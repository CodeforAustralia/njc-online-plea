!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"===n||oe.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ge.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(we)||[],function(e,n){t[n]=!0}),t}function s(){G.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),oe.ready()}function a(){this.expando=oe.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(De,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Se.test(n)?oe.parseJSON(n):n}catch(i){}Ne.set(e,t,n)}else n=void 0;return n}function l(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return oe.css(e,t,"")},u=a(),l=n&&n[3]||(oe.cssNumber[t]?"":"px"),c=(oe.cssNumber[t]||"px"!==l&&+u)&&Ae.exec(oe.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do o=o||".5",c/=o,oe.style(e,t,c+l);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function c(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function f(e,t){for(var n=0,r=e.length;r>n;n++)Ee.set(e[n],"globalEval",!t||Ee.get(t[n],"globalEval"))}function p(e,t,n,r,i){for(var o,s,a,u,l,p,d=t.createDocumentFragment(),h=[],g=0,v=e.length;v>g;g++)if(o=e[g],o||0===o)if("object"===oe.type(o))oe.merge(h,o.nodeType?[o]:o);else if(Re.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(Oe.exec(o)||["",""])[1].toLowerCase(),u=Pe[a]||Pe._default,s.innerHTML=u[1]+oe.htmlPrefilter(o)+u[2],p=u[0];p--;)s=s.lastChild;oe.merge(h,s.childNodes),s=d.firstChild,s.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",g=0;o=h[g++];)if(r&&oe.inArray(o,r)>-1)i&&i.push(o);else if(l=oe.contains(o.ownerDocument,o),s=c(d.appendChild(o),"script"),l&&f(s),n)for(p=0;o=s[p++];)Fe.test(o.type||"")&&n.push(o);return d}function d(){return!0}function h(){return!1}function g(){try{return G.activeElement}catch(e){}}function v(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)v(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=h;else if(!i)return e;return 1===o&&(s=i,i=function(e){return oe().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,i,r,n)})}function m(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function x(e){var t=Xe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(Ee.hasData(e)&&(o=Ee.access(e),s=Ee.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)oe.event.add(t,i,l[i][n])}Ne.hasData(e)&&(a=Ne.access(e),u=oe.extend({},a),Ne.set(t,u))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&He.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,n,r){t=J.apply([],t);var i,o,s,a,u,l,f=0,d=e.length,h=d-1,g=t[0],v=oe.isFunction(g);if(v||d>1&&"string"==typeof g&&!re.checkClone&&_e.test(g))return e.each(function(i){var o=e.eq(i);v&&(t[0]=g.call(this,i,o.html())),T(o,t,n,r)});if(d&&(i=p(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=oe.map(c(i,"script"),y),a=s.length;d>f;f++)u=i,f!==h&&(u=oe.clone(u,!0,!0),a&&oe.merge(s,c(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,oe.map(s,x),f=0;a>f;f++)u=s[f],Fe.test(u.type||"")&&!Ee.access(u,"globalEval")&&oe.contains(l,u)&&(u.src?oe._evalUrl&&oe._evalUrl(u.src):oe.globalEval(u.textContent.replace(ze,"")))}return e}function C(e,t,n){for(var r,i=t?oe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||oe.cleanData(c(r)),r.parentNode&&(n&&oe.contains(r.ownerDocument,r)&&f(c(r,"script")),r.parentNode.removeChild(r));return e}function k(e,t){var n=oe(t.createElement(e)).appendTo(t.body),r=oe.css(n[0],"display");return n.detach(),r}function E(e){var t=G,n=Ve[e];return n||(n=k(e,t),"none"!==n&&n||(Ue=(Ue||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Ue[0].contentDocument,t.write(),t.close(),n=k(e,t),Ue.detach()),Ve[e]=n),n}function N(e,t,n){var r,i,o,s,a=e.style;return n=n||Qe(e),s=n?n.getPropertyValue(t)||n[t]:void 0,""!==s&&void 0!==s||oe.contains(e.ownerDocument,e)||(s=oe.style(e,t)),n&&!re.pixelMarginRight()&&Ge.test(s)&&Ye.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o),void 0!==s?s+"":s}function S(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function D(e){if(e in rt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in rt)return e}function j(e,t,n){var r=Ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function A(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=oe.css(e,n+qe[o],!0,i)),r?("content"===n&&(s-=oe.css(e,"padding"+qe[o],!0,i)),"margin"!==n&&(s-=oe.css(e,"border"+qe[o]+"Width",!0,i))):(s+=oe.css(e,"padding"+qe[o],!0,i),"padding"!==n&&(s+=oe.css(e,"border"+qe[o]+"Width",!0,i)));return s}function q(t,n,r){var i=!0,o="width"===n?t.offsetWidth:t.offsetHeight,s=Qe(t),a="border-box"===oe.css(t,"boxSizing",!1,s);if(G.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),0>=o||null==o){if(o=N(t,n,s),(0>o||null==o)&&(o=t.style[n]),Ge.test(o))return o;i=a&&(re.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+A(t,n,r||(a?"border":"content"),i,s)+"px"}function L(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=Ee.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Le(r)&&(o[s]=Ee.access(r,"olddisplay",E(r.nodeName)))):(i=Le(r),"none"===n&&i||Ee.set(r,"olddisplay",i?n:oe.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function O(){return e.setTimeout(function(){it=void 0}),it=oe.now()}function F(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=qe[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var r,i=(I.tweeners[t]||[]).concat(I.tweeners["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function R(e,t,n){var r,i,o,s,a,u,l,c,f=this,p={},d=e.style,h=e.nodeType&&Le(e),g=Ee.get(e,"fxshow");n.queue||(a=oe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,oe.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=oe.css(e,"display"),c="none"===l?Ee.get(e,"olddisplay")||E(e.nodeName):l,"inline"===c&&"none"===oe.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],st.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||oe.style(e,r)}else l=void 0;if(oe.isEmptyObject(p))"inline"===("none"===l?E(e.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(h=g.hidden):g=Ee.access(e,"fxshow",{}),o&&(g.hidden=!h),h?oe(e).show():f.done(function(){oe(e).hide()}),f.done(function(){var t;Ee.remove(e,"fxshow");for(t in p)oe.style(e,t,p[t])});for(r in p)s=P(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function M(e,t){var n,r,i,o,s;for(n in e)if(r=oe.camelCase(n),i=t[r],o=e[n],oe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=oe.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function I(e,t,n){var r,i,o=0,s=I.prefilters.length,a=oe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=it||O(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=oe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(M(c,l.opts.specialEasing);s>o;o++)if(r=I.prefilters[o].call(l,e,c,l.opts))return oe.isFunction(r.stop)&&(oe._queueHooks(l.elem,l.opts.queue).stop=oe.proxy(r.stop,r)),r;return oe.map(c,P,l),oe.isFunction(l.opts.start)&&l.opts.start.call(e,l),oe.fx.timer(oe.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function W(e){return e.getAttribute&&e.getAttribute("class")||""}function $(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(we)||[];if(oe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(a){var u;return o[a]=!0,oe.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===Nt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function _(e,t){var n,r,i=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&oe.extend(!0,e,r),e}function X(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function z(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function U(e,t,n,r){var i;if(oe.isArray(t))oe.each(t,function(t,i){n||At.test(e)?r(e,i):U(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==oe.type(t))r(e,t);else for(i in t)U(e+"["+i+"]",t[i],n,r)}function V(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var Y=[],G=e.document,Q=Y.slice,J=Y.concat,K=Y.push,Z=Y.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie="2.2.3",oe=function(e,t){return new oe.fn.init(e,t)},se=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,ue=/-([\da-z])/gi,le=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:ie,constructor:oe,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:Q.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Y.sort,splice:Y.splice},oe.extend=oe.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||oe.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(oe.isPlainObject(r)||(i=oe.isArray(r)))?(i?(i=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},s[t]=oe.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},oe.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==oe.type(e)||e.nodeType||oe.isWindow(e))return!1;if(e.constructor&&!ne.call(e,"constructor")&&!ne.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||ne.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=G.createElement("script"),t.text=e,G.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(ae,"ms-").replace(ue,le)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r>i&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(se,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?oe.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o,s=0,a=[];if(n(e))for(i=e.length;i>s;s++)o=t(e[s],s,r),null!=o&&a.push(o);else for(s in e)o=t(e[s],s,r),null!=o&&a.push(o);return J.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e)?(r=Q.call(arguments,2),i=function(){return e.apply(t||this,r.concat(Q.call(arguments)))},i.guid=e.guid=e.guid||oe.guid++,i):void 0},now:Date.now,support:re}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=Y[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,s,a,u,l,f,d,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:W)!==L&&q(t),t=t||L,O)){if(11!==g&&(l=me.exec(e)))if(i=l[1]){if(9===g){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(h&&(s=h.getElementById(i))&&M(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&&!z[e+" "]&&(!F||!F.test(e))){if(1!==g)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,"\\$&"):t.setAttribute("id",a=I),f=E(e),o=f.length,u=pe.test(a)?"#"+a:"[id='"+a+"']";o--;)f[o]=u+" "+p(f[o]);d=f.join(","),h=ye.test(e)&&c(t.parentNode)||t}if(d)try{return K.apply(n,h.querySelectorAll(d)),n}catch(v){}finally{a===I&&t.removeAttribute("id")}}}return S(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[I]=!0,e}function i(e){var t=L.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l,c=[$,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[I]||(t[I]={}),u=l[t.uniqueID]||(l[t.uniqueID]={}),(a=u[r])&&a[0]===$&&a[1]===o)return c[2]=a[2];if(u[r]=c,c[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;u>a;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function m(e,t,n,i,o,s){return i&&!i[I]&&(i=m(i)),o&&!o[I]&&(o=m(o,s)),r(function(r,s,a,u){var l,c,f,p=[],d=[],h=s.length,m=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?m:v(m,p,e,a,u),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=v(x,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?ee(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=v(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,u=d(function(e){return e===t},s,!0),l=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];i>a;a++)if(n=T.relative[e[a].type])c=[d(h(c),n)];else{if(n=T.filter[e[a].type].apply(null,e[a].matches),n[I]){for(r=++a;i>r&&!T.relative[e[r].type];r++);return m(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,h="0",g=r&&[],m=[],y=D,x=r||o&&T.find.TAG("*",l),b=$+=null==y?1:Math.random()||.1,w=x.length;for(l&&(D=s===L||s||l);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0,s||c.ownerDocument===L||(q(c),a=!O);p=e[f++];)if(p(c,s||L,a)){u.push(c);break}l&&($=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,m,s,a);if(r){if(d>0)for(;h--;)g[h]||m[h]||(m[h]=Q.call(u));m=v(m)}K.apply(u,m),l&&!r&&m.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&($=b,D=y),g};return i?r(s):s}var b,w,T,C,k,E,N,S,D,j,A,q,L,H,O,F,P,R,M,I="sizzle"+1*new Date,W=e.document,$=0,B=0,_=n(),X=n(),z=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),pe=new RegExp("^"+re+"$"),de={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Te=function(){q()};try{K.apply(G=Z.call(W.childNodes),W.childNodes),G[W.childNodes.length].nodeType}catch(Ce){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},q=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:W;return r!==L&&9===r.nodeType&&r.documentElement?(L=r,H=L.documentElement,O=!k(L),(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(L.getElementsByClassName),w.getById=i(function(e){return H.appendChild(e).id=I,!L.getElementsByName||!L.getElementsByName(I).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n?[n]:[]}},T.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(be,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&O?t.getElementsByClassName(e):void 0},P=[],F=[],(w.qsa=ve.test(L.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+I+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+I+"+*").length||F.push(".#.+[+~]")}),i(function(e){var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=ve.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){w.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),P.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),t=ve.test(H.compareDocumentPosition),M=t||ve.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===W&&M(W,e)?-1:t===L||t.ownerDocument===W&&M(W,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===L?-1:t===L?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===W?-1:u[r]===W?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&q(e),n=n.replace(ce,"='$1']"),w.matchesSelector&&O&&!z[n+" "]&&(!P||!P.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&q(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&q(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",v=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(v){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?v.firstChild:v.lastChild],s&&y){for(p=v,f=p[I]||(p[I]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d&&l[2],p=d&&v.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||h.pop();)if(1===p.nodeType&&++x&&p===t){c[e]=[$,d,x];break}}else if(y&&(p=t,f=p[I]||(p[I]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d),x===!1)for(;(p=++d&&p&&p[g]||(x=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++x||(y&&(f=p[I]||(p[I]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),c[e]=[$,x]),p!==t)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[I]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=N(e.replace(ae,"$1"));return i[I]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){
return[0>n?n+t:n]}),even:l(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=u(b);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,E=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=X[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=T.preFilter;a;){r&&!(i=ue.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=le.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in T.filter)!(i=de[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):X(e,u).slice(0)},N=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[I]?r.push(o):i.push(o);o=z(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,f=!r&&E(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&T.relative[o[1].type]){if(t=(T.find.ID(s.matches[0].replace(be,we),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((u=T.find[a])&&(r=u(s.matches[0].replace(be,we),ye.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(l||N(e,f))(r,t,!O,n,!t||ye.test(e)&&c(t.parentNode)||t),n},w.sortStable=I.split("").sort(U).join("")===I,w.detectDuplicates=!!A,q(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);oe.find=ce,oe.expr=ce.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=ce.uniqueSort,oe.text=ce.getText,oe.isXMLDoc=ce.isXML,oe.contains=ce.contains;var fe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&oe(e).is(n))break;r.push(e)}return r},pe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},de=oe.expr.match.needsContext,he=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ge=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?oe.find.matchesSelector(r,e)?[r]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;n>t;t++)if(oe.contains(i[t],this))return!0}));for(t=0;n>t;t++)oe.find(e,i[t],r);return r=this.pushStack(n>1?oe.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&de.test(e)?oe(e):e||[],!1).length}});var ve,me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||ve,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:me.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:G,!0)),he.test(r[1])&&oe.isPlainObject(t))for(r in t)oe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=G.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=G,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,ve=oe(G);var xe=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=de.test(e)||"string"!=typeof e?oe(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(oe(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return fe(e,"parentNode")},parentsUntil:function(e,t,n){return fe(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return fe(e,"nextSibling")},prevAll:function(e){return fe(e,"previousSibling")},nextUntil:function(e,t,n){return fe(e,"nextSibling",n)},prevUntil:function(e,t,n){return fe(e,"previousSibling",n)},siblings:function(e){return pe((e.parentNode||{}).firstChild,e)},children:function(e){return pe(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,r){var i=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=oe.filter(r,i)),this.length>1&&(be[e]||oe.uniqueSort(i),xe.test(e)&&i.reverse()),this.pushStack(i)}});var we=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,r,i,s=[],a=[],u=-1,l=function(){for(i=e.once,r=t=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=s.length,n=!1);e.memory||(n=!1),t=!1,i&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(u=s.length-1,a.push(n)),function r(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==oe.type(n)&&r(n)})}(arguments),n&&!t&&l()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,s,n))>-1;)s.splice(n,1),u>=n&&u--}),this},has:function(e){return e?oe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return i=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return i=a=[],n||(s=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var s=oe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,r):r}},i={};return r.pipe=r.then,oe.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Q.call(arguments),s=o.length,a=1!==s||e&&oe.isFunction(e.promise)?s:0,u=1===a?e:oe.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Q.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&oe.isFunction(o[i].promise)?o[i].promise().progress(l(i,n,t)).done(l(i,r,o)).fail(u.reject):--a;return a||u.resolveWith(r,o),u.promise()}});var Te;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(Te.resolveWith(G,[oe]),oe.fn.triggerHandler&&(oe(G).triggerHandler("ready"),oe(G).off("ready"))))}}),oe.ready.promise=function(t){return Te||(Te=oe.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?e.setTimeout(oe.ready):(G.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),Te.promise(t)},oe.ready.promise();var Ce=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===oe.type(n)){i=!0;for(a in n)Ce(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,oe.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(oe(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},ke=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};a.uid=1,a.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!ke(e))return{};var t=e[this.expando];return t||(t={},ke(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?r=t.concat(t.map(oe.camelCase)):(i=oe.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(we)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Ee=new a,Ne=new a,Se=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,De=/[A-Z]/g;oe.extend({hasData:function(e){return Ne.hasData(e)||Ee.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ee.access(e,t,n)},_removeData:function(e,t){Ee.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Ne.get(o),1===o.nodeType&&!Ee.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=oe.camelCase(r.slice(5)),u(o,r,i[r])));Ee.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Ce(this,function(t){var n,r;if(o&&void 0===t){if(n=Ne.get(o,e)||Ne.get(o,e.replace(De,"-$&").toLowerCase()),void 0!==n)return n;if(r=oe.camelCase(e),n=Ne.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else r=oe.camelCase(e),this.each(function(){var n=Ne.get(this,r);Ne.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=Ee.get(e,t),n&&(!r||oe.isArray(n)?r=Ee.access(e,t,oe.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),r=n.length,i=n.shift(),o=oe._queueHooks(e,t),s=function(){oe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ee.get(e,n)||Ee.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Ee.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=oe.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=Ee.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var je=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ae=new RegExp("^(?:([+-])=|)("+je+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],Le=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},He=/^(?:checkbox|radio)$/i,Oe=/<([\w:-]+)/,Fe=/^$|\/(?:java|ecma)script/i,Pe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pe.optgroup=Pe.option,Pe.tbody=Pe.tfoot=Pe.colgroup=Pe.caption=Pe.thead,Pe.th=Pe.td;var Re=/<|&#?\w+;/;!function(){var e=G.createDocumentFragment(),t=e.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Me=/^key/,Ie=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,We=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,v=Ee.get(e);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=oe.guid++),(u=v.events)||(u=v.events={}),(s=v.handle)||(s=v.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(we)||[""],l=t.length;l--;)a=We.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=oe.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=oe.event.special[d]||{},c=oe.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&oe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),oe.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,v=Ee.hasData(e)&&Ee.get(e);if(v&&(u=v.events)){for(t=(t||"").match(we)||[""],l=t.length;l--;)if(a=We.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=oe.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,v.handle)!==!1||oe.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)oe.event.remove(e,d+t[l],n,r,!0);oe.isEmptyObject(u)&&Ee.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,r,i,o,s=[],a=Q.call(arguments),u=(Ee.get(this,"events")||{})[e.type]||[],l=oe.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=oe.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((oe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?oe(i,this).index(u)>-1:oe.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||G,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Ie.test(i)?this.mouseHooks:Me.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new oe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=G),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==g()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===g()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&oe.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||oe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,r){return v(this,e,t,n,r)},one:function(e,t,n,r){return v(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,oe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=h),this.each(function(){oe.event.remove(this,e,n,t)})}});var $e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Be=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Xe=/^true\/(.*)/,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace($e,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=oe.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(s=c(a),o=c(e),r=0,i=o.length;i>r;r++)w(o[r],s[r]);if(t)if(n)for(o=o||c(e),s=s||c(a),r=0,i=o.length;i>r;r++)b(o[r],s[r]);else b(e,a);return s=c(a,"script"),s.length>0&&f(s,!u&&c(e,"script")),a},cleanData:function(e){for(var t,n,r,i=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(ke(n)){if(t=n[Ee.expando]){if(t.events)for(r in t.events)i[r]?oe.event.remove(n,r):oe.removeEvent(n,r,t.handle);n[Ee.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),oe.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return Ce(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=m(this,e);t.appendChild(e)}})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=m(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Ce(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!Pe[(Oe.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,r=[],i=oe(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),oe(i[s])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Ue,Ve={HTML:"block",BODY:"block"},Ye=/^margin/,Ge=new RegExp("^("+je+")(?!px)[a-z%]+$","i"),Qe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Je=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ke=G.documentElement;!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ke.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Ke.removeChild(s)}var n,r,i,o,s=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),oe.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Ke.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ke.removeChild(s),a.removeChild(n),t}}))}();var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],rt=G.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=oe.camelCase(t),u=e.style;return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Ae.exec(n))&&i[1]&&(n=l(e,t,i),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(oe.cssNumber[a]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n))))}},css:function(e,t,n,r){var i,o,s,a=oe.camelCase(t);return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=N(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,r){return n?Ze.test(oe.css(e,"display"))&&0===e.offsetWidth?Je(e,et,function(){return q(e,t,r)}):q(e,t,r):void 0},set:function(e,n,r){var i,o=r&&Qe(e),s=r&&A(e,t,r,"border-box"===oe.css(e,"boxSizing",!1,o),o);return s&&(i=Ae.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),j(e,n,s)}}}),oe.cssHooks.marginLeft=S(re.reliableMarginLeft,function(e,t){return t?(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px":void 0}),oe.cssHooks.marginRight=S(re.reliableMarginRight,function(e,t){return t?Je(e,{display:"inline-block"},N,[e,"marginRight"]):void 0}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+qe[r]+t]=o[r]||o[r-2]||o[0];return i}},Ye.test(e)||(oe.cssHooks[e+t].set=j)}),oe.fn.extend({css:function(e,t){return Ce(this,function(e,t,n){var r,i,o={},s=0;if(oe.isArray(t)){for(r=Qe(e),i=t.length;i>s;s++)o[t[s]]=oe.css(e,t[s],!1,r);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Le(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=H.prototype.init,oe.fx.step={};var it,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;oe.Animation=oe.extend(I,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return l(n.elem,e,Ae.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var n,r=0,i=e.length;i>r;r++)n=e[r],I.tweeners[n]=I.tweeners[n]||[],I.tweeners[n].unshift(t)},prefilters:[R],prefilter:function(e,t){t?I.prefilters.unshift(e):I.prefilters.push(e)}}),oe.speed=function(e,t,n){var r=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return r.duration=oe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in oe.fx.speeds?oe.fx.speeds[r.duration]:oe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){oe.isFunction(r.old)&&r.old.call(this),r.queue&&oe.dequeue(this,r.queue)},r},oe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=oe.isEmptyObject(e),o=oe.speed(t,n,r),s=function(){var t=I(this,oe.extend({},e),o);(i||Ee.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=oe.timers,s=Ee.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&at.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Ee.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=oe.timers,s=r?r.length:0;for(n.finish=!0,oe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,r,i)}}),oe.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(it=oe.now();t<n.length;t++)e=n[t],
e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),it=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval))},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=G.createElement("input"),t=G.createElement("select"),n=t.appendChild(G.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=G.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var ut,lt=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Ce(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;return 3!==o&&8!==o&&2!==o?"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),i=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=oe.find.attr(e,t),null==r?void 0:r)):void 0},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(we);if(o&&1===e.nodeType)for(;n=o[i++];)r=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),ut={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=lt[t]||oe.find.attr;lt[t]=function(e,t,r){var i,o;return r||(o=lt[t],lt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,lt[t]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Ce(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;return 3!==o&&8!==o&&2!==o?(1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,i=oe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]):void 0},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),re.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var pt=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,W(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=W(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,W(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=W(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,W(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=oe(this),o=e.match(we)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=W(this),t&&Ee.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Ee.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+W(n)+" ").replace(pt," ").indexOf(t)>-1)return!0;return!1}});var dt=/\r/g,ht=/[\x20\t\r\n\f]+/g;oe.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=oe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,oe(this).val()):e,null==i?i="":"number"==typeof i?i+="":oe.isArray(i)&&(i=oe.map(i,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=oe.valHooks[i.type]||oe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(dt,""):null==n?"":n)):void 0}}),oe.extend({valHooks:{option:{get:function(e){var t=oe.find.attr(e,"value");return null!=t?t:oe.trim(oe.text(e)).replace(ht," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;a>u;u++)if(n=r[u],(n.selected||u===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=oe.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=oe.inArray(oe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){return oe.isArray(t)?e.checked=oe.inArray(oe(e).val(),t)>-1:void 0}},re.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var gt=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||G],d=ne.call(t,"type")?t.type:t,h=ne.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||G,3!==r.nodeType&&8!==r.nodeType&&!gt.test(d+oe.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[oe.expando]?t:new oe.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:oe.makeArray(n,[t]),f=oe.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!oe.isWindow(r)){for(u=f.delegateType||d,gt.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||G)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(Ee.get(s,"events")||{})[t.type]&&Ee.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&ke(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!ke(r)||l&&oe.isFunction(r[d])&&!oe.isWindow(r)&&(a=r[l],a&&(r[l]=null),oe.event.triggered=d,r[d](),oe.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?oe.event.trigger(e,t,n,!0):void 0}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Ee.access(r,t);i||r.addEventListener(e,n,!0),Ee.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ee.access(r,t)-1;i?Ee.access(r,t,i):(r.removeEventListener(e,n,!0),Ee.remove(r,t))}}});var vt=e.location,mt=oe.now(),yt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||oe.error("Invalid XML: "+t),n};var xt=/#.*$/,bt=/([?&])_=[^&]*/,wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Tt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ct=/^(?:GET|HEAD)$/,kt=/^\/\//,Et={},Nt={},St="*/".concat("*"),Dt=G.createElement("a");Dt.href=vt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:vt.href,type:"GET",isLocal:Tt.test(vt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":St,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_(_(e,oe.ajaxSettings),t):_(oe.ajaxSettings,e)},ajaxPrefilter:$(Et),ajaxTransport:$(Nt),ajax:function(t,n){function r(t,n,r,a){var l,f,y,x,w,C=n;2!==b&&(b=2,u&&e.clearTimeout(u),i=void 0,s=a||"",T.readyState=t>0?4:0,l=t>=200&&300>t||304===t,r&&(x=X(p,T,r)),x=z(p,x,T,l),l?(p.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(oe.lastModified[o]=w),w=T.getResponseHeader("etag"),w&&(oe.etag[o]=w)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,y=x.error,l=!y)):(y=C,!t&&C||(C="error",0>t&&(t=0))),T.status=t,T.statusText=(n||C)+"",l?g.resolveWith(d,[f,C,T]):g.rejectWith(d,[T,C,y]),T.statusCode(m),m=void 0,c&&h.trigger(l?"ajaxSuccess":"ajaxError",[T,p,l?f:y]),v.fireWith(d,[T,C]),c&&(h.trigger("ajaxComplete",[T,p]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,u,l,c,f,p=oe.ajaxSetup({},n),d=p.context||p,h=p.context&&(d.nodeType||d.jquery)?oe(d):oe.event,g=oe.Deferred(),v=oe.Callbacks("once memory"),m=p.statusCode||{},y={},x={},b=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=wt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(T).complete=v.add,T.success=T.done,T.error=T.fail,p.url=((t||p.url||vt.href)+"").replace(xt,"").replace(kt,vt.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=oe.trim(p.dataType||"*").toLowerCase().match(we)||[""],null==p.crossDomain){l=G.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Dt.protocol+"//"+Dt.host!=l.protocol+"//"+l.host}catch(C){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=oe.param(p.data,p.traditional)),B(Et,p,n,T),2===b)return T;c=oe.event&&p.global,c&&0===oe.active++&&oe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ct.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(yt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=bt.test(o)?o.replace(bt,"$1_="+mt++):o+(yt.test(o)?"&":"?")+"_="+mt++)),p.ifModified&&(oe.lastModified[o]&&T.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&T.setRequestHeader("If-None-Match",oe.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+St+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(p.beforeSend.call(d,T,p)===!1||2===b))return T.abort();w="abort";for(f in{success:1,error:1,complete:1})T[f](p[f]);if(i=B(Nt,p,n,T)){if(T.readyState=1,c&&h.trigger("ajaxSend",[T,p]),2===b)return T;p.async&&p.timeout>0&&(u=e.setTimeout(function(){T.abort("timeout")},p.timeout));try{b=1,i.send(y,r)}catch(C){if(!(2>b))throw C;r(-1,C)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,r,i){return oe.isFunction(n)&&(i=i||r,r=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:i,data:n,success:r},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes)}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var jt=/%20/g,At=/\[\]$/,qt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,Ht=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,r=[],i=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){i(this.name,this.value)});else for(n in e)U(n,e[n],t,i);return r.join("&").replace(jt,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&Ht.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!He.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(qt,"\r\n")}}):{name:t.name,value:n.replace(qt,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Ot={0:200,1223:204},Ft=oe.ajaxSettings.xhr();re.cors=!!Ft&&"withCredentials"in Ft,re.ajax=Ft=!!Ft,oe.ajaxTransport(function(t){var n,r;return re.cors||Ft&&!t.crossDomain?{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ot[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}:void 0}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),G.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Pt=[],Rt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Pt.pop()||oe.expando+"_"+mt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Rt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rt.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Rt,"$1"+i):t.jsonp!==!1&&(t.url+=(yt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||oe.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?oe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Pt.push(i)),s&&oe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||G;var r=he.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=p([e],t,i),i&&i.length&&oe(i).remove(),oe.merge([],r.childNodes))};var Mt=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Mt)return Mt.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=oe.trim(e.slice(a)),e=e.slice(0,a)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&oe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?oe("<div>").append(oe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=oe.css(e,"position"),f=oe(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=oe.css(e,"top"),u=oe.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;return o?(t=o.documentElement,oe.contains(t,r)?(i=r.getBoundingClientRect(),n=V(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i):void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(r=e.offset()),r.top+=oe.css(e[0],"borderTopWidth",!0),r.left+=oe.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-oe.css(n,"marginTop",!0),left:t.left-r.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Ke})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(r){return Ce(this,function(e,r,i){var o=V(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=S(re.pixelPosition,function(e,n){return n?(n=N(e,t),Ge.test(n)?oe(e).position()[t]+"px":n):void 0})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){oe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return Ce(this,function(t,n,r){var i;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?oe.css(t,n,s):oe.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var It=e.jQuery,Wt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=Wt),t&&e.jQuery===oe&&(e.jQuery=It),oe},t||(e.jQuery=e.$=oe),oe});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return Pn.apply(null,arguments)}function e(t){Pn=t}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function i(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function r(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function s(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function o(t,e){for(var n in e)s(e,n)&&(t[n]=e[n]);return s(e,"toString")&&(t.toString=e.toString),s(e,"valueOf")&&(t.valueOf=e.valueOf),t}function a(t,e,n,i){return Ot(t,e,n,i,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(t){return null==t._pf&&(t._pf=u()),t._pf}function l(t){if(null==t._isValid){var e=d(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function c(t){var e=a(NaN);return null!=t?o(d(e),t):d(e).userInvalidated=!0,e}function f(t,e){var n,i,r;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=d(e)),"undefined"!=typeof e._locale&&(t._locale=e._locale),Hn.length>0)for(n in Hn)i=Hn[n],r=e[i],"undefined"!=typeof r&&(t[i]=r);return t}function h(e){f(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),Ln===!1&&(Ln=!0,t.updateOffset(this),Ln=!1)}function m(t){return t instanceof h||null!=t&&null!=t._isAMomentObject}function _(t){return 0>t?Math.ceil(t):Math.floor(t)}function y(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=_(e)),n}function p(t,e,n){var i,r=Math.min(t.length,e.length),s=Math.abs(t.length-e.length),o=0;for(i=0;r>i;i++)(n&&t[i]!==e[i]||!n&&y(t[i])!==y(e[i]))&&o++;return o+s}function g(){}function D(t){return t?t.toLowerCase().replace("_","-"):t}function v(t){for(var e,n,i,r,s=0;s<t.length;){for(r=D(t[s]).split("-"),e=r.length,n=D(t[s+1]),n=n?n.split("-"):null;e>0;){if(i=M(r.slice(0,e).join("-")))return i;if(n&&n.length>=e&&p(r,n,!0)>=e-1)break;e--}s++}return null}function M(t){var e=null;if(!In[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=xn._abbr,require("./locale/"+t),Y(e)}catch(n){}return In[t]}function Y(t,e){var n;return t&&(n="undefined"==typeof e?S(t):w(t,e),n&&(xn=n)),xn._abbr}function w(t,e){return null!==e?(e.abbr=t,In[t]=In[t]||new g,In[t].set(e),Y(t),In[t]):(delete In[t],null)}function S(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return xn;if(!n(t)){if(e=M(t))return e;t=[t]}return v(t)}function k(t,e){var n=t.toLowerCase();An[n]=An[n+"s"]=An[e]=t}function T(t){return"string"==typeof t?An[t]||An[t.toLowerCase()]:void 0}function b(t){var e,n,i={};for(n in t)s(t,n)&&(e=T(n),e&&(i[e]=t[n]));return i}function O(e,n){return function(i){return null!=i?(W(this,e,i),t.updateOffset(this,n),this):U(this,e)}}function U(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function W(t,e,n){return t._d["set"+(t._isUTC?"UTC":"")+e](n)}function C(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=T(t),"function"==typeof this[t])return this[t](e);return this}function G(t,e,n){var i=""+Math.abs(t),r=e-i.length,s=t>=0;return(s?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function F(t,e,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),t&&(jn[t]=r),e&&(jn[e[0]]=function(){return G(r.apply(this,arguments),e[1],e[2])}),n&&(jn[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function P(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function x(t){var e,n,i=t.match(zn);for(e=0,n=i.length;n>e;e++)jn[i[e]]?i[e]=jn[i[e]]:i[e]=P(i[e]);return function(r){var s="";for(e=0;n>e;e++)s+=i[e]instanceof Function?i[e].call(r,t):i[e];return s}}function H(t,e){return t.isValid()?(e=L(e,t.localeData()),Zn[e]=Zn[e]||x(e),Zn[e](t)):t.localeData().invalidDate()}function L(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(Nn.lastIndex=0;i>=0&&Nn.test(t);)t=t.replace(Nn,n),Nn.lastIndex=0,i-=1;return t}function I(t){return"function"==typeof t&&"[object Function]"===Object.prototype.toString.call(t)}function A(t,e,n){ri[t]=I(e)?e:function(t){return t&&n?n:e}}function z(t,e){return s(ri,t)?ri[t](e._strict,e._locale):new RegExp(N(t))}function N(t){return t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,r){return e||n||i||r}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Z(t,e){var n,i=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(i=function(t,n){n[e]=y(t)}),n=0;n<t.length;n++)si[t[n]]=i}function j(t,e){Z(t,function(t,n,i,r){i._w=i._w||{},e(t,i._w,i,r)})}function E(t,e,n){null!=e&&s(si,t)&&si[t](e,n._a,n,t)}function V(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function q(t){return this._months[t.month()]}function J(t){return this._monthsShort[t.month()]}function $(t,e,n){var i,r,s;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=a([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(s="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}}function R(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),V(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function B(e){return null!=e?(R(this,e),t.updateOffset(this,!0),this):U(this,"Month")}function Q(){return V(this.year(),this.month())}function X(t){var e,n=t._a;return n&&-2===d(t).overflow&&(e=n[ai]<0||n[ai]>11?ai:n[ui]<1||n[ui]>V(n[oi],n[ai])?ui:n[di]<0||n[di]>24||24===n[di]&&(0!==n[li]||0!==n[ci]||0!==n[fi])?di:n[li]<0||n[li]>59?li:n[ci]<0||n[ci]>59?ci:n[fi]<0||n[fi]>999?fi:-1,d(t)._overflowDayOfYear&&(oi>e||e>ui)&&(e=ui),d(t).overflow=e),t}function K(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function tt(t,e){var n=!0;return o(function(){return n&&(K(t+"\n"+(new Error).stack),n=!1),e.apply(this,arguments)},e)}function et(t,e){_i[t]||(K(e),_i[t]=!0)}function nt(t){var e,n,i=t._i,r=yi.exec(i);if(r){for(d(t).iso=!0,e=0,n=pi.length;n>e;e++)if(pi[e][1].exec(i)){t._f=pi[e][0];break}for(e=0,n=gi.length;n>e;e++)if(gi[e][1].exec(i)){t._f+=(r[6]||" ")+gi[e][0];break}i.match(ei)&&(t._f+="Z"),Mt(t)}else t._isValid=!1}function it(e){var n=Di.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(nt(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function rt(t,e,n,i,r,s,o){var a=new Date(t,e,n,i,r,s,o);return 1970>t&&a.setFullYear(t),a}function st(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function ot(t){return at(t)?366:365}function at(t){return t%4===0&&t%100!==0||t%400===0}function ut(){return at(this.year())}function dt(t,e,n){var i,r=n-e,s=n-t.day();return s>r&&(s-=7),r-7>s&&(s+=7),i=Ut(t).add(s,"d"),{week:Math.ceil(i.dayOfYear()/7),year:i.year()}}function lt(t){return dt(t,this._week.dow,this._week.doy).week}function ct(){return this._week.dow}function ft(){return this._week.doy}function ht(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function mt(t){var e=dt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function _t(t,e,n,i,r){var s,o=6+r-i,a=st(t,0,1+o),u=a.getUTCDay();return r>u&&(u+=7),n=null!=n?1*n:r,s=1+o+7*(e-1)-u+n,{year:s>0?t:t-1,dayOfYear:s>0?s:ot(t-1)+s}}function yt(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function pt(t,e,n){return null!=t?t:null!=e?e:n}function gt(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function Dt(t){var e,n,i,r,s=[];if(!t._d){for(i=gt(t),t._w&&null==t._a[ui]&&null==t._a[ai]&&vt(t),t._dayOfYear&&(r=pt(t._a[oi],i[oi]),t._dayOfYear>ot(r)&&(d(t)._overflowDayOfYear=!0),n=st(r,0,t._dayOfYear),t._a[ai]=n.getUTCMonth(),t._a[ui]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=s[e]=i[e];for(;7>e;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[di]&&0===t._a[li]&&0===t._a[ci]&&0===t._a[fi]&&(t._nextDay=!0,t._a[di]=0),t._d=(t._useUTC?st:rt).apply(null,s),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[di]=24)}}function vt(t){var e,n,i,r,s,o,a;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(s=1,o=4,n=pt(e.GG,t._a[oi],dt(Ut(),1,4).year),i=pt(e.W,1),r=pt(e.E,1)):(s=t._locale._week.dow,o=t._locale._week.doy,n=pt(e.gg,t._a[oi],dt(Ut(),s,o).year),i=pt(e.w,1),null!=e.d?(r=e.d,s>r&&++i):r=null!=e.e?e.e+s:s),a=_t(n,i,r,o,s),t._a[oi]=a.year,t._dayOfYear=a.dayOfYear}function Mt(e){if(e._f===t.ISO_8601)return void nt(e);e._a=[],d(e).empty=!0;var n,i,r,s,o,a=""+e._i,u=a.length,l=0;for(r=L(e._f,e._locale).match(zn)||[],n=0;n<r.length;n++)s=r[n],i=(a.match(z(s,e))||[])[0],i&&(o=a.substr(0,a.indexOf(i)),o.length>0&&d(e).unusedInput.push(o),a=a.slice(a.indexOf(i)+i.length),l+=i.length),jn[s]?(i?d(e).empty=!1:d(e).unusedTokens.push(s),E(s,i,e)):e._strict&&!i&&d(e).unusedTokens.push(s);d(e).charsLeftOver=u-l,a.length>0&&d(e).unusedInput.push(a),d(e).bigHour===!0&&e._a[di]<=12&&e._a[di]>0&&(d(e).bigHour=void 0),e._a[di]=Yt(e._locale,e._a[di],e._meridiem),Dt(e),X(e)}function Yt(t,e,n){var i;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(i=t.isPM(n),i&&12>e&&(e+=12),i||12!==e||(e=0),e):e}function wt(t){var e,n,i,r,s;if(0===t._f.length)return d(t).invalidFormat=!0,void(t._d=new Date(NaN));for(r=0;r<t._f.length;r++)s=0,e=f({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[r],Mt(e),l(e)&&(s+=d(e).charsLeftOver,s+=10*d(e).unusedTokens.length,d(e).score=s,(null==i||i>s)&&(i=s,n=e));o(t,n||e)}function St(t){if(!t._d){var e=b(t._i);t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],Dt(t)}}function kt(t){var e=new h(X(Tt(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Tt(t){var e=t._i,r=t._f;return t._locale=t._locale||S(t._l),null===e||void 0===r&&""===e?c({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),m(e)?new h(X(e)):(n(r)?wt(t):r?Mt(t):i(e)?t._d=e:bt(t),t))}function bt(e){var s=e._i;void 0===s?e._d=new Date:i(s)?e._d=new Date(+s):"string"==typeof s?it(e):n(s)?(e._a=r(s.slice(0),function(t){return parseInt(t,10)}),Dt(e)):"object"==typeof s?St(e):"number"==typeof s?e._d=new Date(s):t.createFromInputFallback(e)}function Ot(t,e,n,i,r){var s={};return"boolean"==typeof n&&(i=n,n=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=r,s._l=n,s._i=t,s._f=e,s._strict=i,kt(s)}function Ut(t,e,n,i){return Ot(t,e,n,i,!1)}function Wt(t,e){var i,r;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return Ut();for(i=e[0],r=1;r<e.length;++r)(!e[r].isValid()||e[r][t](i))&&(i=e[r]);return i}function Ct(){var t=[].slice.call(arguments,0);return Wt("isBefore",t)}function Gt(){var t=[].slice.call(arguments,0);return Wt("isAfter",t)}function Ft(t){var e=b(t),n=e.year||0,i=e.quarter||0,r=e.month||0,s=e.week||0,o=e.day||0,a=e.hour||0,u=e.minute||0,d=e.second||0,l=e.millisecond||0;this._milliseconds=+l+1e3*d+6e4*u+36e5*a,this._days=+o+7*s,this._months=+r+3*i+12*n,this._data={},this._locale=S(),this._bubble()}function Pt(t){return t instanceof Ft}function xt(t,e){F(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+G(~~(t/60),2)+e+G(~~t%60,2)})}function Ht(t){var e=(t||"").match(ei)||[],n=e[e.length-1]||[],i=(n+"").match(Si)||["-",0,0],r=+(60*i[1])+y(i[2]);return"+"===i[0]?r:-r}function Lt(e,n){var r,s;return n._isUTC?(r=n.clone(),s=(m(e)||i(e)?+e:+Ut(e))-+r,r._d.setTime(+r._d+s),t.updateOffset(r,!1),r):Ut(e).local()}function It(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function At(e,n){var i,r=this._offset||0;return null!=e?("string"==typeof e&&(e=Ht(e)),Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(i=It(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!n||this._changeInProgress?ee(this,Bt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:It(this)}function zt(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Nt(t){return this.utcOffset(0,t)}function Zt(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(It(this),"m")),this}function jt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ht(this._i)),this}function Et(t){return t=t?Ut(t).utcOffset():0,(this.utcOffset()-t)%60===0}function Vt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function qt(){if("undefined"!=typeof this._isDSTShifted)return this._isDSTShifted;var t={};if(f(t,this),t=Tt(t),t._a){var e=t._isUTC?a(t._a):Ut(t._a);this._isDSTShifted=this.isValid()&&p(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Jt(){return!this._isUTC}function $t(){return this._isUTC}function Rt(){return this._isUTC&&0===this._offset}function Bt(t,e){var n,i,r,o=t,a=null;return Pt(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(a=ki.exec(t))?(n="-"===a[1]?-1:1,o={y:0,d:y(a[ui])*n,h:y(a[di])*n,m:y(a[li])*n,s:y(a[ci])*n,ms:y(a[fi])*n}):(a=Ti.exec(t))?(n="-"===a[1]?-1:1,o={y:Qt(a[2],n),M:Qt(a[3],n),d:Qt(a[4],n),h:Qt(a[5],n),m:Qt(a[6],n),s:Qt(a[7],n),w:Qt(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=Kt(Ut(o.from),Ut(o.to)),o={},o.ms=r.milliseconds,o.M=r.months),i=new Ft(o),Pt(t)&&s(t,"_locale")&&(i._locale=t._locale),i}function Qt(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Xt(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Kt(t,e){var n;return e=Lt(e,t),t.isBefore(e)?n=Xt(t,e):(n=Xt(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function te(t,e){return function(n,i){var r,s;return null===i||isNaN(+i)||(et(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),s=n,n=i,i=s),n="string"==typeof n?+n:n,r=Bt(n,i),ee(this,r,t),this}}function ee(e,n,i,r){var s=n._milliseconds,o=n._days,a=n._months;r=null==r?!0:r,s&&e._d.setTime(+e._d+s*i),o&&W(e,"Date",U(e,"Date")+o*i),a&&R(e,U(e,"Month")+a*i),r&&t.updateOffset(e,o||a)}function ne(t,e){var n=t||Ut(),i=Lt(n,this).startOf("day"),r=this.diff(i,"days",!0),s=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse";return this.format(e&&e[s]||this.localeData().calendar(s,this,Ut(n)))}function ie(){return new h(this)}function re(t,e){var n;return e=T("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=m(t)?t:Ut(t),+this>+t):(n=m(t)?+t:+Ut(t),n<+this.clone().startOf(e))}function se(t,e){var n;return e=T("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=m(t)?t:Ut(t),+t>+this):(n=m(t)?+t:+Ut(t),+this.clone().endOf(e)<n)}function oe(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function ae(t,e){var n;return e=T(e||"millisecond"),"millisecond"===e?(t=m(t)?t:Ut(t),+this===+t):(n=+Ut(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))}function ue(t,e,n){var i,r,s=Lt(t,this),o=6e4*(s.utcOffset()-this.utcOffset());return e=T(e),"year"===e||"month"===e||"quarter"===e?(r=de(this,s),"quarter"===e?r/=3:"year"===e&&(r/=12)):(i=this-s,r="second"===e?i/1e3:"minute"===e?i/6e4:"hour"===e?i/36e5:"day"===e?(i-o)/864e5:"week"===e?(i-o)/6048e5:i),n?r:_(r)}function de(t,e){var n,i,r=12*(e.year()-t.year())+(e.month()-t.month()),s=t.clone().add(r,"months");return 0>e-s?(n=t.clone().add(r-1,"months"),i=(e-s)/(s-n)):(n=t.clone().add(r+1,"months"),i=(e-s)/(n-s)),-(r+i)}function le(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ce(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():H(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):H(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function fe(e){var n=H(this,e||t.defaultFormat);return this.localeData().postformat(n)}function he(t,e){return this.isValid()?Bt({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function me(t){return this.from(Ut(),t)}function _e(t,e){return this.isValid()?Bt({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function ye(t){return this.to(Ut(),t)}function pe(t){var e;return void 0===t?this._locale._abbr:(e=S(t),null!=e&&(this._locale=e),this)}function ge(){return this._locale}function De(t){switch(t=T(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function ve(t){return t=T(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function Me(){return+this._d-6e4*(this._offset||0)}function Ye(){return Math.floor(+this/1e3)}function we(){return this._offset?new Date(+this):this._d}function Se(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function ke(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function Te(){return l(this)}function be(){return o({},d(this))}function Oe(){return d(this).overflow}function Ue(t,e){F(0,[t,t.length],0,e)}function We(t,e,n){return dt(Ut([t,11,31+e-n]),e,n).week}function Ce(t){var e=dt(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")}function Ge(t){var e=dt(this,1,4).year;return null==t?e:this.add(t-e,"y")}function Fe(){return We(this.year(),1,4)}function Pe(){var t=this.localeData()._week;return We(this.year(),t.dow,t.doy)}function xe(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function He(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function Le(t){return this._weekdays[t.day()]}function Ie(t){return this._weekdaysShort[t.day()]}function Ae(t){return this._weekdaysMin[t.day()]}function ze(t){var e,n,i;for(this._weekdaysParse=this._weekdaysParse||[],e=0;7>e;e++)if(this._weekdaysParse[e]||(n=Ut([2e3,1]).day(e),i="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(i.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e}function Ne(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=He(t,this.localeData()),this.add(t-e,"d")):e}function Ze(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function je(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)}function Ee(t,e){F(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function Ve(t,e){return e._meridiemParse}function qe(t){return"p"===(t+"").toLowerCase().charAt(0)}function Je(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function $e(t,e){e[fi]=y(1e3*("0."+t))}function Re(){return this._isUTC?"UTC":""}function Be(){return this._isUTC?"Coordinated Universal Time":""}function Qe(t){return Ut(1e3*t)}function Xe(){return Ut.apply(null,arguments).parseZone()}function Ke(t,e,n){var i=this._calendar[t];return"function"==typeof i?i.call(e,n):i}function tn(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function en(){return this._invalidDate}function nn(t){return this._ordinal.replace("%d",t)}function rn(t){return t}function sn(t,e,n,i){var r=this._relativeTime[n];return"function"==typeof r?r(t,e,n,i):r.replace(/%d/i,t)}function on(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)}function an(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function un(t,e,n,i){var r=S(),s=a().set(i,e);return r[n](s,t)}function dn(t,e,n,i,r){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return un(t,e,n,r);var s,o=[];for(s=0;i>s;s++)o[s]=un(t,s,n,r);return o}function ln(t,e){return dn(t,e,"months",12,"month")}function cn(t,e){return dn(t,e,"monthsShort",12,"month")}function fn(t,e){return dn(t,e,"weekdays",7,"day")}function hn(t,e){return dn(t,e,"weekdaysShort",7,"day")}function mn(t,e){return dn(t,e,"weekdaysMin",7,"day")}function _n(){var t=this._data;return this._milliseconds=Ri(this._milliseconds),this._days=Ri(this._days),this._months=Ri(this._months),t.milliseconds=Ri(t.milliseconds),t.seconds=Ri(t.seconds),t.minutes=Ri(t.minutes),t.hours=Ri(t.hours),t.months=Ri(t.months),t.years=Ri(t.years),this}function yn(t,e,n,i){var r=Bt(e,n);return t._milliseconds+=i*r._milliseconds,t._days+=i*r._days,t._months+=i*r._months,t._bubble()}function pn(t,e){return yn(this,t,e,1)}function gn(t,e){return yn(this,t,e,-1)}function Dn(t){return 0>t?Math.floor(t):Math.ceil(t)}function vn(){var t,e,n,i,r,s=this._milliseconds,o=this._days,a=this._months,u=this._data;return s>=0&&o>=0&&a>=0||0>=s&&0>=o&&0>=a||(s+=864e5*Dn(Yn(a)+o),o=0,a=0),u.milliseconds=s%1e3,t=_(s/1e3),u.seconds=t%60,e=_(t/60),u.minutes=e%60,n=_(e/60),u.hours=n%24,o+=_(n/24),r=_(Mn(o)),a+=r,o-=Dn(Yn(r)),i=_(a/12),a%=12,u.days=o,u.months=a,u.years=i,this}function Mn(t){return 4800*t/146097}function Yn(t){return 146097*t/4800}function wn(t){var e,n,i=this._milliseconds;if(t=T(t),"month"===t||"year"===t)return e=this._days+i/864e5,n=this._months+Mn(e),"month"===t?n:n/12;switch(e=this._days+Math.round(Yn(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}}function Sn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function kn(t){return function(){return this.as(t)}}function Tn(t){return t=T(t),this[t+"s"]()}function bn(t){return function(){return this._data[t]}}function On(){return _(this.days()/7)}function Un(t,e,n,i,r){return r.relativeTime(e||1,!!n,t,i)}function Wn(t,e,n){var i=Bt(t).abs(),r=cr(i.as("s")),s=cr(i.as("m")),o=cr(i.as("h")),a=cr(i.as("d")),u=cr(i.as("M")),d=cr(i.as("y")),l=r<fr.s&&["s",r]||1===s&&["m"]||s<fr.m&&["mm",s]||1===o&&["h"]||o<fr.h&&["hh",o]||1===a&&["d"]||a<fr.d&&["dd",a]||1===u&&["M"]||u<fr.M&&["MM",u]||1===d&&["y"]||["yy",d];return l[2]=e,l[3]=+t>0,l[4]=n,Un.apply(null,l)}function Cn(t,e){return void 0===fr[t]?!1:void 0===e?fr[t]:(fr[t]=e,!0)}function Gn(t){var e=this.localeData(),n=Wn(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function Fn(){var t,e,n,i=hr(this._milliseconds)/1e3,r=hr(this._days),s=hr(this._months);t=_(i/60),e=_(t/60),i%=60,t%=60,n=_(s/12),s%=12;var o=n,a=s,u=r,d=e,l=t,c=i,f=this.asSeconds();return f?(0>f?"-":"")+"P"+(o?o+"Y":"")+(a?a+"M":"")+(u?u+"D":"")+(d||l||c?"T":"")+(d?d+"H":"")+(l?l+"M":"")+(c?c+"S":""):"P0D"}var Pn,xn,Hn=t.momentProperties=[],Ln=!1,In={},An={},zn=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Nn=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Zn={},jn={},En=/\d/,Vn=/\d\d/,qn=/\d{3}/,Jn=/\d{4}/,$n=/[+-]?\d{6}/,Rn=/\d\d?/,Bn=/\d{1,3}/,Qn=/\d{1,4}/,Xn=/[+-]?\d{1,6}/,Kn=/\d+/,ti=/[+-]?\d+/,ei=/Z|[+-]\d\d:?\d\d/gi,ni=/[+-]?\d+(\.\d{1,3})?/,ii=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ri={},si={},oi=0,ai=1,ui=2,di=3,li=4,ci=5,fi=6;F("M",["MM",2],"Mo",function(){return this.month()+1}),F("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),F("MMMM",0,0,function(t){return this.localeData().months(this,t)}),k("month","M"),A("M",Rn),A("MM",Rn,Vn),A("MMM",ii),A("MMMM",ii),Z(["M","MM"],function(t,e){e[ai]=y(t)-1}),Z(["MMM","MMMM"],function(t,e,n,i){var r=n._locale.monthsParse(t,i,n._strict);null!=r?e[ai]=r:d(n).invalidMonth=t});var hi="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),mi="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),_i={};t.suppressDeprecationWarnings=!1;var yi=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,pi=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],gi=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],Di=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=tt("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),F(0,["YY",2],0,function(){return this.year()%100}),F(0,["YYYY",4],0,"year"),F(0,["YYYYY",5],0,"year"),F(0,["YYYYYY",6,!0],0,"year"),k("year","y"),A("Y",ti),A("YY",Rn,Vn),A("YYYY",Qn,Jn),A("YYYYY",Xn,$n),A("YYYYYY",Xn,$n),Z(["YYYYY","YYYYYY"],oi),Z("YYYY",function(e,n){n[oi]=2===e.length?t.parseTwoDigitYear(e):y(e)}),Z("YY",function(e,n){n[oi]=t.parseTwoDigitYear(e)}),t.parseTwoDigitYear=function(t){return y(t)+(y(t)>68?1900:2e3)};var vi=O("FullYear",!1);F("w",["ww",2],"wo","week"),F("W",["WW",2],"Wo","isoWeek"),k("week","w"),k("isoWeek","W"),A("w",Rn),A("ww",Rn,Vn),A("W",Rn),A("WW",Rn,Vn),j(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=y(t)});var Mi={dow:0,doy:6};F("DDD",["DDDD",3],"DDDo","dayOfYear"),k("dayOfYear","DDD"),A("DDD",Bn),A("DDDD",qn),Z(["DDD","DDDD"],function(t,e,n){n._dayOfYear=y(t)}),t.ISO_8601=function(){};var Yi=tt("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Ut.apply(null,arguments);return this>t?this:t}),wi=tt("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Ut.apply(null,arguments);return t>this?this:t});xt("Z",":"),xt("ZZ",""),A("Z",ei),A("ZZ",ei),Z(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Ht(t)});var Si=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var ki=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Ti=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Bt.fn=Ft.prototype;var bi=te(1,"add"),Oi=te(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Ui=tt("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});F(0,["gg",2],0,function(){return this.weekYear()%100}),F(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ue("gggg","weekYear"),Ue("ggggg","weekYear"),Ue("GGGG","isoWeekYear"),Ue("GGGGG","isoWeekYear"),k("weekYear","gg"),k("isoWeekYear","GG"),A("G",ti),A("g",ti),A("GG",Rn,Vn),A("gg",Rn,Vn),A("GGGG",Qn,Jn),A("gggg",Qn,Jn),A("GGGGG",Xn,$n),A("ggggg",Xn,$n),j(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=y(t)}),j(["gg","GG"],function(e,n,i,r){n[r]=t.parseTwoDigitYear(e)}),F("Q",0,0,"quarter"),k("quarter","Q"),A("Q",En),Z("Q",function(t,e){e[ai]=3*(y(t)-1)}),F("D",["DD",2],"Do","date"),k("date","D"),A("D",Rn),A("DD",Rn,Vn),A("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),Z(["D","DD"],ui),Z("Do",function(t,e){e[ui]=y(t.match(Rn)[0],10)});var Wi=O("Date",!0);F("d",0,"do","day"),F("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),F("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),F("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),F("e",0,0,"weekday"),F("E",0,0,"isoWeekday"),k("day","d"),k("weekday","e"),k("isoWeekday","E"),A("d",Rn),A("e",Rn),A("E",Rn),A("dd",ii),A("ddd",ii),A("dddd",ii),j(["dd","ddd","dddd"],function(t,e,n){var i=n._locale.weekdaysParse(t);null!=i?e.d=i:d(n).invalidWeekday=t}),j(["d","e","E"],function(t,e,n,i){e[i]=y(t)});var Ci="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Gi="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Fi="Su_Mo_Tu_We_Th_Fr_Sa".split("_");F("H",["HH",2],0,"hour"),F("h",["hh",2],0,function(){return this.hours()%12||12}),Ee("a",!0),Ee("A",!1),k("hour","h"),A("a",Ve),A("A",Ve),A("H",Rn),A("h",Rn),A("HH",Rn,Vn),A("hh",Rn,Vn),Z(["H","HH"],di),Z(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),Z(["h","hh"],function(t,e,n){e[di]=y(t),d(n).bigHour=!0});var Pi=/[ap]\.?m?\.?/i,xi=O("Hours",!0);F("m",["mm",2],0,"minute"),k("minute","m"),A("m",Rn),A("mm",Rn,Vn),Z(["m","mm"],li);var Hi=O("Minutes",!1);F("s",["ss",2],0,"second"),k("second","s"),A("s",Rn),A("ss",Rn,Vn),Z(["s","ss"],ci);var Li=O("Seconds",!1);F("S",0,0,function(){return~~(this.millisecond()/100)}),F(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),F(0,["SSS",3],0,"millisecond"),F(0,["SSSS",4],0,function(){return 10*this.millisecond()}),F(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),F(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),F(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),F(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),F(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),k("millisecond","ms"),A("S",Bn,En),A("SS",Bn,Vn),A("SSS",Bn,qn);var Ii;for(Ii="SSSS";Ii.length<=9;Ii+="S")A(Ii,Kn);for(Ii="S";Ii.length<=9;Ii+="S")Z(Ii,$e);var Ai=O("Milliseconds",!1);F("z",0,0,"zoneAbbr"),F("zz",0,0,"zoneName");var zi=h.prototype;zi.add=bi,zi.calendar=ne,zi.clone=ie,zi.diff=ue,zi.endOf=ve,zi.format=fe,zi.from=he,zi.fromNow=me,zi.to=_e,zi.toNow=ye,zi.get=C,zi.invalidAt=Oe,zi.isAfter=re,zi.isBefore=se,zi.isBetween=oe,zi.isSame=ae,zi.isValid=Te,zi.lang=Ui,zi.locale=pe,zi.localeData=ge,zi.max=wi,zi.min=Yi,zi.parsingFlags=be,zi.set=C,zi.startOf=De,zi.subtract=Oi,zi.toArray=Se,zi.toObject=ke,zi.toDate=we,zi.toISOString=ce,zi.toJSON=ce,zi.toString=le,zi.unix=Ye,zi.valueOf=Me,zi.year=vi,zi.isLeapYear=ut,zi.weekYear=Ce,zi.isoWeekYear=Ge,zi.quarter=zi.quarters=xe,zi.month=B,zi.daysInMonth=Q,zi.week=zi.weeks=ht,zi.isoWeek=zi.isoWeeks=mt,zi.weeksInYear=Pe,zi.isoWeeksInYear=Fe,zi.date=Wi,zi.day=zi.days=Ne,zi.weekday=Ze,zi.isoWeekday=je,zi.dayOfYear=yt,zi.hour=zi.hours=xi,zi.minute=zi.minutes=Hi,zi.second=zi.seconds=Li,
zi.millisecond=zi.milliseconds=Ai,zi.utcOffset=At,zi.utc=Nt,zi.local=Zt,zi.parseZone=jt,zi.hasAlignedHourOffset=Et,zi.isDST=Vt,zi.isDSTShifted=qt,zi.isLocal=Jt,zi.isUtcOffset=$t,zi.isUtc=Rt,zi.isUTC=Rt,zi.zoneAbbr=Re,zi.zoneName=Be,zi.dates=tt("dates accessor is deprecated. Use date instead.",Wi),zi.months=tt("months accessor is deprecated. Use month instead",B),zi.years=tt("years accessor is deprecated. Use year instead",vi),zi.zone=tt("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",zt);var Ni=zi,Zi={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},ji={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ei="Invalid date",Vi="%d",qi=/\d{1,2}/,Ji={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},$i=g.prototype;$i._calendar=Zi,$i.calendar=Ke,$i._longDateFormat=ji,$i.longDateFormat=tn,$i._invalidDate=Ei,$i.invalidDate=en,$i._ordinal=Vi,$i.ordinal=nn,$i._ordinalParse=qi,$i.preparse=rn,$i.postformat=rn,$i._relativeTime=Ji,$i.relativeTime=sn,$i.pastFuture=on,$i.set=an,$i.months=q,$i._months=hi,$i.monthsShort=J,$i._monthsShort=mi,$i.monthsParse=$,$i.week=lt,$i._week=Mi,$i.firstDayOfYear=ft,$i.firstDayOfWeek=ct,$i.weekdays=Le,$i._weekdays=Ci,$i.weekdaysMin=Ae,$i._weekdaysMin=Fi,$i.weekdaysShort=Ie,$i._weekdaysShort=Gi,$i.weekdaysParse=ze,$i.isPM=qe,$i._meridiemParse=Pi,$i.meridiem=Je,Y("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===y(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=tt("moment.lang is deprecated. Use moment.locale instead.",Y),t.langData=tt("moment.langData is deprecated. Use moment.localeData instead.",S);var Ri=Math.abs,Bi=kn("ms"),Qi=kn("s"),Xi=kn("m"),Ki=kn("h"),tr=kn("d"),er=kn("w"),nr=kn("M"),ir=kn("y"),rr=bn("milliseconds"),sr=bn("seconds"),or=bn("minutes"),ar=bn("hours"),ur=bn("days"),dr=bn("months"),lr=bn("years"),cr=Math.round,fr={s:45,m:45,h:22,d:26,M:11},hr=Math.abs,mr=Ft.prototype;mr.abs=_n,mr.add=pn,mr.subtract=gn,mr.as=wn,mr.asMilliseconds=Bi,mr.asSeconds=Qi,mr.asMinutes=Xi,mr.asHours=Ki,mr.asDays=tr,mr.asWeeks=er,mr.asMonths=nr,mr.asYears=ir,mr.valueOf=Sn,mr._bubble=vn,mr.get=Tn,mr.milliseconds=rr,mr.seconds=sr,mr.minutes=or,mr.hours=ar,mr.days=ur,mr.weeks=On,mr.months=dr,mr.years=lr,mr.humanize=Gn,mr.toISOString=Fn,mr.toString=Fn,mr.toJSON=Fn,mr.locale=pe,mr.localeData=ge,mr.toIsoString=tt("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Fn),mr.lang=Ui,F("X",0,0,"unix"),F("x",0,0,"valueOf"),A("x",ti),A("X",ni),Z("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),Z("x",function(t,e,n){n._d=new Date(y(t))}),t.version="2.10.6",e(Ut),t.fn=Ni,t.min=Ct,t.max=Gt,t.utc=a,t.unix=Qe,t.months=ln,t.isDate=i,t.locale=Y,t.invalid=c,t.duration=Bt,t.isMoment=m,t.weekdays=fn,t.parseZone=Xe,t.localeData=S,t.isDuration=Pt,t.monthsShort=cn,t.weekdaysMin=mn,t.defineLocale=w,t.weekdaysShort=hn,t.normalizeUnits=T,t.relativeTimeThreshold=Cn;var _r=t;return _r});
!function(t,e,n){"use strict";function r(t){return function(){var e,n=arguments[0];for(e="["+(t?t+":":"")+n+"] http://errors.angularjs.org/1.4.10/"+(t?t+"/":"")+n,n=1;n<arguments.length;n++){e=e+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,e+=i(r)}return Error(e)}}function i(t){if(null==t||A(t))return!1;if(or(t)||x(t)||Hn&&t instanceof Hn)return!0;var e="length"in Object(t)&&t.length;return S(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function o(t,e,n){var r,a;if(t)if(E(t))for(r in t)"prototype"==r||"length"==r||"name"==r||t.hasOwnProperty&&!t.hasOwnProperty(r)||e.call(n,t[r],r,t);else if(or(t)||i(t)){var s="object"!=typeof t;for(r=0,a=t.length;a>r;r++)(s||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(w(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)Jn.call(t,r)&&e.call(n,t[r],r,t);return t}function a(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function s(t){return function(e,n){t(n,e)}}function u(){return++rr}function c(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;o>i;++i){var a=e[i];if(b(a)||E(a))for(var s=Object.keys(a),u=0,l=s.length;l>u;u++){var f=s[u],h=a[f];n&&b(h)?C(h)?t[f]=new Date(h.valueOf()):k(h)?t[f]=new RegExp(h):h.nodeName?t[f]=h.cloneNode(!0):N(h)?t[f]=h.clone():(b(t[f])||(t[f]=or(h)?[]:{}),c(t[f],[h],!0)):t[f]=h}}return r?t.$$hashKey=r:delete t.$$hashKey,t}function l(t){return c(t,Yn.call(arguments,1),!1)}function f(t){return c(t,Yn.call(arguments,1),!0)}function h(t){return parseInt(t,10)}function p(t,e){return l(Object.create(t),e)}function $(){}function d(t){return t}function m(t){return function(){return t}}function v(t){return E(t.toString)&&t.toString!==Qn}function g(t){return"undefined"==typeof t}function y(t){return"undefined"!=typeof t}function b(t){return null!==t&&"object"==typeof t}function w(t){return null!==t&&"object"==typeof t&&!tr(t)}function x(t){return"string"==typeof t}function S(t){return"number"==typeof t}function C(t){return"[object Date]"===Qn.call(t)}function E(t){return"function"==typeof t}function k(t){return"[object RegExp]"===Qn.call(t)}function A(t){return t&&t.window===t}function O(t){return t&&t.$evalAsync&&t.$watch}function M(t){return"boolean"==typeof t}function T(t){return t&&S(t.length)&&ar.test(Qn.call(t))}function N(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function V(t){var e={};t=t.split(",");var n;for(n=0;n<t.length;n++)e[t[n]]=!0;return e}function j(t){return Gn(t.nodeName||t[0]&&t[0].nodeName)}function D(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function P(t,e){function n(t,e){var n,i=e.$$hashKey;if(or(t)){n=0;for(var o=t.length;o>n;n++)e.push(r(t[n]))}else if(w(t))for(n in t)e[n]=r(t[n]);else if(t&&"function"==typeof t.hasOwnProperty)for(n in t)t.hasOwnProperty(n)&&(e[n]=r(t[n]));else for(n in t)Jn.call(t,n)&&(e[n]=r(t[n]));return i?e.$$hashKey=i:delete e.$$hashKey,e}function r(t){if(!b(t))return t;var e=i.indexOf(t);if(-1!==e)return a[e];if(A(t)||O(t))throw er("cpws");var r,e=!1;return or(t)?(r=[],e=!0):T(t)?r=new t.constructor(t):C(t)?r=new Date(t.getTime()):k(t)?(r=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]),r.lastIndex=t.lastIndex):"[object Blob]"===Qn.call(t)?r=new t.constructor([t],{type:t.type}):E(t.cloneNode)?r=t.cloneNode(!0):(r=Object.create(tr(t)),e=!0),i.push(t),a.push(r),e?n(t,r):r}var i=[],a=[];if(e){if(T(e))throw er("cpta");if(t===e)throw er("cpi");return or(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),i.push(t),a.push(e),n(t,e)}return r(t)}function I(t,e){if(or(t)){e=e||[];for(var n=0,r=t.length;r>n;n++)e[n]=t[n]}else if(b(t))for(n in e=e||{},t)"$"===n.charAt(0)&&"$"===n.charAt(1)||(e[n]=t[n]);return e||t}function R(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r=typeof t;if(r==typeof e&&"object"==r){if(!or(t)){if(C(t))return C(e)?R(t.getTime(),e.getTime()):!1;if(k(t))return k(e)?t.toString()==e.toString():!1;if(O(t)||O(e)||A(t)||A(e)||or(e)||C(e)||k(e))return!1;r=ct();for(n in t)if("$"!==n.charAt(0)&&!E(t[n])){if(!R(t[n],e[n]))return!1;r[n]=!0}for(n in e)if(!(n in r)&&"$"!==n.charAt(0)&&y(e[n])&&!E(e[n]))return!1;return!0}if(!or(e))return!1;if((r=t.length)==e.length){for(n=0;r>n;n++)if(!R(t[n],e[n]))return!1;return!0}}return!1}function F(t,e,n){return t.concat(Yn.call(e,n))}function _(t,e){var n=2<arguments.length?Yn.call(arguments,2):[];return!E(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,F(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function q(t,r){var i=r;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?i=n:A(r)?i="$WINDOW":r&&e===r?i="$DOCUMENT":O(r)&&(i="$SCOPE"),i}function U(t,e){return g(t)?n:(S(e)||(e=e?2:null),JSON.stringify(t,q,e))}function B(t){return x(t)?JSON.parse(t):t}function H(t,e){t=t.replace(fr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return isNaN(n)?e:n}function L(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset();return e=H(e,r),n*=e-r,t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+n),t}function z(t){t=Hn(t).clone();try{t.empty()}catch(e){}var n=Hn("<div>").append(t).html();try{return t[0].nodeType===dr?Gn(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+Gn(e)})}catch(r){return Gn(n)}}function W(t){try{return decodeURIComponent(t)}catch(e){}}function G(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),-1!==n&&(r=t.substring(0,n),i=t.substring(n+1)),r=W(r),y(r)&&(i=y(i)?W(i):!0,Jn.call(e,r)?or(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function J(t){var e=[];return o(t,function(t,n){or(t)?o(t,function(t){e.push(Y(n,!0)+(!0===t?"":"="+Y(t,!0)))}):e.push(Y(n,!0)+(!0===t?"":"="+Y(t,!0)))}),e.length?e.join("&"):""}function K(t){return Y(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Y(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function Z(t,e){var n,r,i=hr.length;for(r=0;i>r;++r)if(n=hr[r]+e,x(n=t.getAttribute(n)))return n;return null}function X(t,e){var n,r,i={};o(hr,function(e){e+="app",!n&&t.hasAttribute&&t.hasAttribute(e)&&(n=t,r=t.getAttribute(e))}),o(hr,function(e){e+="app";var i;!n&&(i=t.querySelector("["+e.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(e))}),n&&(i.strictDi=null!==Z(n,"strict-di"),e(n,r?[r]:[],i))}function Q(n,r,i){b(i)||(i={}),i=l({strictDi:!1},i);var a=function(){if(n=Hn(n),n.injector()){var t=n[0]===e?"document":z(n);throw er("btstrpd",t.replace(/</,"&lt;").replace(/>/,"&gt;"))}return r=r||[],r.unshift(["$provide",function(t){t.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),r.unshift("ng"),t=qt(r,i.strictDi),t.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),t},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return t&&s.test(t.name)&&(i.debugInfoEnabled=!0,t.name=t.name.replace(s,"")),t&&!u.test(t.name)?a():(t.name=t.name.replace(u,""),nr.resumeBootstrap=function(t){return o(t,function(t){r.push(t)}),a()},void(E(nr.resumeDeferredBootstrap)&&nr.resumeDeferredBootstrap()))}function tt(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function et(t){if(t=nr.element(t).injector(),!t)throw er("test");return t.get("$$testability")}function nt(t,e){return e=e||"_",t.replace(pr,function(t,n){return(n?e:"")+t.toLowerCase()})}function rt(){var e;if(!$r){var r=lr();(Ln=g(r)?t.jQuery:r?t[r]:n)&&Ln.fn.on?(Hn=Ln,l(Ln.fn,{scope:Mr.scope,isolateScope:Mr.isolateScope,controller:Mr.controller,injector:Mr.injector,inheritedData:Mr.inheritedData}),e=Ln.cleanData,Ln.cleanData=function(t){var n;if(ir)ir=!1;else for(var r,i=0;null!=(r=t[i]);i++)(n=Ln._data(r,"events"))&&n.$destroy&&Ln(r).triggerHandler("$destroy");e(t)}):Hn=mt,nr.element=Hn,$r=!0}}function it(t,e,n){if(!t)throw er("areq",e||"?",n||"required");return t}function ot(t,e,n){return n&&or(t)&&(t=t[t.length-1]),it(E(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function at(t,e){if("hasOwnProperty"===t)throw er("badname",e)}function st(t,e,n){if(!e)return t;e=e.split(".");for(var r,i=t,o=e.length,a=0;o>a;a++)r=e[a],t&&(t=(i=t)[r]);return!n&&E(t)?_(i,t):t}function ut(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=Hn(Yn.call(t,0,i))),e.push(n));return e||t}function ct(){return Object.create(null)}function lt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng");return t=e(t,"angular",Object),t.$$minErr=t.$$minErr||r,e(t,"module",function(){var t={};return function(r,o,a){if("hasOwnProperty"===r)throw i("badname","module");return o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=i),function(){return r[n||"push"]([t,e,arguments]),l}}function e(t,e){return function(n,o){return o&&E(o)&&(o.$$moduleName=r),i.push([t,e,arguments]),l}}if(!o)throw n("nomod",r);var i=[],s=[],u=[],c=t("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:c,run:function(t){return u.push(t),this}};return a&&c(a),l})}})}function ft(e){l(e,{bootstrap:Q,copy:P,extend:l,merge:f,equals:R,element:Hn,forEach:o,injector:qt,noop:$,bind:_,toJson:U,fromJson:B,identity:d,isUndefined:g,isDefined:y,isString:x,isFunction:E,isObject:b,isNumber:S,isElement:N,isArray:or,version:mr,isDate:C,lowercase:Gn,uppercase:Kn,callbacks:{counter:0},getTestability:et,$$minErr:r,$$csp:cr,reloadWithDebugInfo:tt}),(zn=lt(t))("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:Ye}),t.provider("$compile",Kt).directive({a:Ni,input:Ji,textarea:Ji,form:Pi,script:Ro,select:qo,style:Bo,option:Uo,ngBind:Zi,ngBindHtml:Qi,ngBindTemplate:Xi,ngClass:eo,ngClassEven:ro,ngClassOdd:no,ngCloak:io,ngController:oo,ngForm:Ii,ngHide:No,ngIf:uo,ngInclude:co,ngInit:fo,ngNonBindable:Co,ngPluralize:Oo,ngRepeat:Mo,ngShow:To,ngStyle:Vo,ngSwitch:jo,ngSwitchWhen:Do,ngSwitchDefault:Po,ngOptions:Ao,ngTransclude:Io,ngModel:wo,ngList:ho,ngChange:to,pattern:Lo,ngPattern:Lo,required:Ho,ngRequired:Ho,minlength:Wo,ngMinlength:Wo,maxlength:zo,ngMaxlength:zo,ngValue:Yi,ngModelOptions:So}).directive({ngInclude:lo}).directive(Vi).directive(ao),t.provider({$anchorScroll:Ut,$animate:Br,$animateCss:zr,$$animateJs:qr,$$animateQueue:Ur,$$AnimateRunner:Lr,$$animateAsyncRun:Hr,$browser:Wt,$cacheFactory:Gt,$controller:Qt,$document:te,$exceptionHandler:ee,$filter:fn,$$forceReflow:Yr,$interpolate:pe,$interval:$e,$http:ce,$httpParamSerializer:re,$httpParamSerializerJQLike:ie,$httpBackend:fe,$xhrFactory:le,$location:ke,$log:Ae,$parse:Le,$rootScope:Ke,$q:ze,$$q:We,$sce:tn,$sceDelegate:Qe,$sniffer:en,$templateCache:Jt,$templateRequest:nn,$$testability:rn,$timeout:on,$window:un,$$rAF:Je,$$jqLite:It,$$HashMap:jr,$$cookieReader:ln})}])}function ht(t){return t.replace(yr,function(t,e,n,r){return r?n.toUpperCase():n}).replace(br,"Moz$1")}function pt(t){return t=t.nodeType,1===t||!t||9===t}function $t(t,e){var n,r,i=e.createDocumentFragment(),a=[];if(Cr.test(t)){for(n=n||i.appendChild(e.createElement("div")),r=(Er.exec(t)||["",""])[1].toLowerCase(),r=Ar[r]||Ar._default,n.innerHTML=r[1]+t.replace(kr,"<$1></$2>")+r[2],r=r[0];r--;)n=n.lastChild;a=F(a,n.childNodes),n=i.firstChild,n.textContent=""}else a.push(e.createTextNode(t));return i.textContent="",i.innerHTML="",o(a,function(t){i.appendChild(t)}),i}function dt(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}function mt(t){if(t instanceof mt)return t;var n;if(x(t)&&(t=sr(t),n=!0),!(this instanceof mt)){if(n&&"<"!=t.charAt(0))throw xr("nosel");return new mt(t)}if(n){n=e;var r;t=(r=Sr.exec(t))?[n.createElement(r[1])]:(r=$t(t,n))?r.childNodes:[]}kt(this,t)}function vt(t){return t.cloneNode(!0)}function gt(t,e){if(e||bt(t),t.querySelectorAll)for(var n=t.querySelectorAll("*"),r=0,i=n.length;i>r;r++)bt(n[r])}function yt(t,e,n,r){if(y(r))throw xr("offargs");var i=(r=wt(t))&&r.events,a=r&&r.handle;if(a)if(e){var s=function(e){var r=i[e];y(n)&&D(r||[],n),y(n)&&r&&0<r.length||(t.removeEventListener(e,a,!1),delete i[e])};o(e.split(" "),function(t){s(t),wr[t]&&s(wr[t])})}else for(e in i)"$destroy"!==e&&t.removeEventListener(e,a,!1),delete i[e]}function bt(t,e){var r=t.ng339,i=r&&vr[r];i&&(e?delete i.data[e]:(i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),yt(t)),delete vr[r],t.ng339=n))}function wt(t,e){var r=t.ng339,r=r&&vr[r];return e&&!r&&(t.ng339=r=++gr,r=vr[r]={events:{},data:{},handle:n}),r}function xt(t,e,n){if(pt(t)){var r=y(n),i=!r&&e&&!b(e),o=!e;if(t=(t=wt(t,!i))&&t.data,r)t[e]=n;else{if(o)return t;if(i)return t&&t[e];l(t,e)}}}function St(t,e){return t.getAttribute?-1<(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" "):!1}function Ct(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",sr((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+sr(e)+" "," ")))})}function Et(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=sr(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",sr(n))}}function kt(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;n>r;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function At(t,e){return Ot(t,"$"+(e||"ngController")+"Controller")}function Ot(t,e,n){for(9==t.nodeType&&(t=t.documentElement),e=or(e)?e:[e];t;){for(var r=0,i=e.length;i>r;r++)if(y(n=Hn.data(t,e[r])))return n;t=t.parentNode||11===t.nodeType&&t.host}}function Mt(t){for(gt(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Tt(t,e){e||gt(t);var n=t.parentNode;n&&n.removeChild(t)}function Nt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):Hn(n).on("load",e)}function Vt(t,e){var n=Tr[e.toLowerCase()];return n&&Nr[j(t)]&&n}function jt(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(g(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||Dt;o>1&&(i=I(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function Dt(t,e,n){n.call(t,e)}function Pt(t,e,n){var r=e.relatedTarget;r&&(r===t||Or.call(t,r))||n.call(t,e)}function It(){this.$get=function(){return l(mt,{hasClass:function(t,e){return t.attr&&(t=t[0]),St(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Et(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),Ct(t,e)}})}}function Rt(t,e){var n=t&&t.$$hashKey;return n?("function"==typeof n&&(n=t.$$hashKey()),n):(n=typeof t,n="function"==n||"object"==n&&null!==t?t.$$hashKey=n+":"+(e||u)():n+":"+t)}function Ft(t,e){if(e){var n=0;this.nextUid=function(){return++n}}o(t,this.put,this)}function _t(t){return(t=t.toString().replace(Rr,"").match(Dr))?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function qt(t,e){function r(t){return function(e,n){return b(e)?void o(e,s(t)):t(e,n)}}function i(t,e){if(at(t,"service"),(E(e)||or(e))&&(e=d.instantiate(e)),!e.$get)throw Fr("pget",t);return $[t+"Provider"]=e}function a(t,e){return function(){var n=y.invoke(e,this);if(g(n))throw Fr("undef",t);return n}}function u(t,e,n){return i(t,{$get:!1!==n?a(t,e):e})}function c(t){it(g(t)||or(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;n>e;e++){var r=t[e],i=d.get(r[0]);i[r[1]].apply(i,r[2])}}if(!p.get(t)){p.put(t,!0);try{x(t)?(e=zn(t),n=n.concat(c(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):E(t)?n.push(d.invoke(t)):or(t)?n.push(d.invoke(t)):ot(t,"module")}catch(i){throw or(t)&&(t=t[t.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Fr("modulerr",t,i.stack||i.message||i)}}}),n}function l(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===f)throw Fr("cdep",e+" <- "+h.join(" <- "));return t[e]}try{return h.unshift(e),t[e]=f,t[e]=n(e,r)}catch(i){throw t[e]===f&&delete t[e],i}finally{h.shift()}}function i(t,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,u,c=[],l=qt.$$annotate(t,e,o);for(s=0,a=l.length;a>s;s++){if(u=l[s],"string"!=typeof u)throw Fr("itkn",u);c.push(i&&i.hasOwnProperty(u)?i[u]:r(u,o))}return or(t)&&(t=t[a]),t.apply(n,c)}return{invoke:i,instantiate:function(t,e,n){var r=Object.create((or(t)?t[t.length-1]:t).prototype||null);return t=i(t,r,e,n),b(t)||E(t)?t:r},get:r,annotate:qt.$$annotate,has:function(e){return $.hasOwnProperty(e+"Provider")||t.hasOwnProperty(e)}}}e=!0===e;var f={},h=[],p=new Ft([],!0),$={$provide:{provider:r(i),factory:r(u),service:r(function(t,e){return u(t,["$injector",function(t){return t.instantiate(e)}])}),value:r(function(t,e){return u(t,m(e),!1)}),constant:r(function(t,e){at(t,"constant"),$[t]=e,v[t]=e}),decorator:function(t,e){var n=d.get(t+"Provider"),r=n.$get;n.$get=function(){var t=y.invoke(r,n);return y.invoke(e,null,{$delegate:t})}}}},d=$.$injector=l($,function(t,e){throw nr.isString(e)&&h.push(e),Fr("unpr",h.join(" <- "))}),v={},y=v.$injector=l(v,function(t,e){var r=d.get(t+"Provider",e);return y.invoke(r.$get,r,n,t)});return o(c(t),function(t){t&&y.invoke(t)}),y}function Ut(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){return"a"===j(t)?(e=t,!0):void 0}),e}function o(t){if(t){t.scrollIntoView();var n;n=a.yOffset,E(n)?n=n():N(n)?(n=n[0],n="fixed"!==e.getComputedStyle(n).position?0:n.getBoundingClientRect().bottom):S(n)||(n=0),n&&(t=t.getBoundingClientRect().top,e.scrollBy(0,t-n))}else e.scrollTo(0,0)}function a(t){t=x(t)?t:n.hash();var e;t?(e=s.getElementById(t))?o(e):(e=i(s.getElementsByName(t)))?o(e):"top"===t&&o(null):o(null)}var s=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){t===e&&""===t||Nt(function(){r.$evalAsync(a)})}),a}]}function Bt(t,e){return t||e?t?e?(or(t)&&(t=t.join(" ")),or(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function Ht(t){x(t)&&(t=t.split(" "));var e=ct();return o(t,function(t){t.length&&(e[t]=!0)}),e}function Lt(t){return b(t)?t:{}}function zt(t,e,n,r){function i(t){try{t.apply(null,Yn.call(arguments,1))}finally{if(m--,0===m)for(;v.length;)try{v.pop()()}catch(e){n.error(e)}}}function a(){S=null,s(),u()}function s(){t:{try{y=f.state;break t}catch(t){}y=void 0}y=g(y)?null:y,R(y,k)&&(y=k),k=y}function u(){w===c.url()&&b===y||(w=c.url(),b=y,o(C,function(t){t(c.url(),y)}))}var c=this,l=t.location,f=t.history,h=t.setTimeout,p=t.clearTimeout,d={};c.isMock=!1;var m=0,v=[];c.$$completeOutstandingRequest=i,c.$$incOutstandingRequestCount=function(){m++},c.notifyWhenNoOutstandingRequests=function(t){0===m?t():v.push(t)};var y,b,w=l.href,x=e.find("base"),S=null;s(),b=y,c.url=function(e,n,i){if(g(i)&&(i=null),l!==t.location&&(l=t.location),f!==t.history&&(f=t.history),e){var o=b===i;if(w===e&&(!r.history||o))return c;var a=w&&ye(w)===ye(e);return w=e,b=i,!r.history||a&&o?(a&&!S||(S=e),n?l.replace(e):a?(n=l,i=e.indexOf("#"),i=-1===i?"":e.substr(i),n.hash=i):l.href=e,l.href!==e&&(S=e)):(f[n?"replaceState":"pushState"](i,"",e),s(),b=y),c}return S||l.href.replace(/%27/g,"'")},c.state=function(){return y};var C=[],E=!1,k=null;c.onUrlChange=function(e){return E||(r.history&&Hn(t).on("popstate",a),Hn(t).on("hashchange",a),E=!0),C.push(e),e},c.$$applicationDestroyed=function(){Hn(t).off("hashchange popstate",a)},c.$$checkUrlChange=u,c.baseHref=function(){var t=x.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(t,e){var n;return m++,n=h(function(){delete d[n],i(t)},e||0),d[n]=!0,n},c.defer.cancel=function(t){return d[t]?(delete d[t],p(t),i($),!0):!1}}function Wt(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new zt(t,r,e,n)}]}function Gt(){this.$get=function(){function t(t,n){function i(t){t!=h&&(p?p==t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}function o(t,e){t!=e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid",t);var a=0,s=l({},n,{id:t}),u=ct(),c=n&&n.capacity||Number.MAX_VALUE,f=ct(),h=null,p=null;return e[t]={put:function(t,e){if(!g(e)){if(c<Number.MAX_VALUE){var n=f[t]||(f[t]={key:t});i(n)}return t in u||a++,u[t]=e,a>c&&this.remove(p.key),e}},get:function(t){if(c<Number.MAX_VALUE){var e=f[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(c<Number.MAX_VALUE){var e=f[t];if(!e)return;e==h&&(h=e.p),e==p&&(p=e.n),o(e.n,e.p),delete f[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=ct(),a=0,f=ct(),h=p=null},destroy:function(){f=s=u=null,delete e[t]},info:function(){return l({},s,{size:a})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function Jt(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function Kt(t,r){function i(t,e,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(t,function(t,o){if(t in S)i[o]=S[t];else{var a=t.match(r);if(!a)throw Wr("iscp",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(S[t]=i[o])}}),i}function a(t){var e=t.charAt(0);if(!e||e!==Gn(e))throw Wr("baddir",t);if(t!==t.trim())throw Wr("baddir",t)}var u={},c=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,h=V("ngSrc,ngSrcset,src,srcset"),v=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/,S=ct();this.directive=function k(e,n){return at(e,"directive"),x(e)?(a(e),it(n,"directiveFactory"),u.hasOwnProperty(e)||(u[e]=[],t.factory(e+"Directive",["$injector","$exceptionHandler",function(t,n){var r=[];return o(u[e],function(i,o){try{var a=t.invoke(i);E(a)?a={compile:m(a)}:!a.compile&&a.link&&(a.compile=m(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=a.require||a.controller&&a.name,a.restrict=a.restrict||"EA",a.$$moduleName=i.$$moduleName,r.push(a)}catch(s){n(s)}}),r}])),u[e].push(n)):o(e,s(k)),this},this.aHrefSanitizationWhitelist=function(t){return y(t)?(r.aHrefSanitizationWhitelist(t),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return y(t)?(r.imgSrcSanitizationWhitelist(t),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(t){return y(t)?(C=t,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,r,a,s,m,y,S,k,A,T){function N(t,e){try{t.addClass(e)}catch(n){}}function V(t,n,r,i,o){t instanceof Hn||(t=Hn(t));for(var a=/\S+/,s=0,u=t.length;u>s;s++){var c=t[s];c.nodeType===dr&&c.nodeValue.match(a)&&dt(c,t[s]=e.createElement("span"))}var l=P(t,n,t,r,i,o);V.$$addScopeClass(t);var f=null;return function(e,n,r){it(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers;if(r=r.futureParentElement,i&&i.$$boundTransclude&&(i=i.$$boundTransclude),f||(f=(r=r&&r[0])&&"foreignobject"!==j(r)&&r.toString().match(/SVG/)?"svg":"html"),r="html"!==f?Hn(Z(f,Hn("<div>").append(t).html())):n?Mr.clone.call(t):t,a)for(var s in a)r.data("$"+s+"Controller",a[s].instance);return V.$$addScopeInfo(r,e),n&&n(r,e),l&&l(e,r,r,i),r}}function P(t,e,r,i,o,a){function s(t,r,i,o){var a,s,u,c,l,f,$;if(h)for($=Array(r.length),c=0;c<p.length;c+=3)a=p[c],$[a]=r[a];else $=r;for(c=0,l=p.length;l>c;)s=$[p[c++]],r=p[c++],a=p[c++],r?(r.scope?(u=t.$new(),V.$$addScopeInfo(Hn(s),u)):u=t,f=r.transcludeOnThisElement?I(t,r.transclude,o):!r.templateOnThisElement&&o?o:!o&&e?I(t,e):null,r(a,u,s,i,f)):a&&a(t,s.childNodes,n,o)}for(var u,c,l,f,h,p=[],$=0;$<t.length;$++)u=new at,c=F(t[$],[],u,0===$?i:n,o),(a=c.length?U(c,t[$],u,e,r,null,[],[],a):null)&&a.scope&&V.$$addScopeClass(u.$$element),u=a&&a.terminal||!(l=t[$].childNodes)||!l.length?null:P(l,a?(a.transcludeOnThisElement||!a.templateOnThisElement)&&a.transclude:e),(a||u)&&(p.push($,a,u),f=!0,h=h||a),a=null;return f?s:null}function I(t,e,n){return function(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}}function F(t,e,n,r,i){var o,a=n.$attr;switch(t.nodeType){case 1:H(e,Yt(j(t)),"E",r,i);for(var s,u,l,h=t.attributes,p=0,$=h&&h.length;$>p;p++){var d=!1,m=!1;s=h[p],o=s.name,u=sr(s.value),s=Yt(o),(l=ft.test(s))&&(o=o.replace(Gr,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()})),(s=s.match(ht))&&L(s[1])&&(d=o,m=o.substr(0,o.length-5)+"end",o=o.substr(0,o.length-6)),s=Yt(o.toLowerCase()),a[s]=o,!l&&n.hasOwnProperty(s)||(n[s]=u,Vt(t,s)&&(n[s]=!0)),Q(t,e,u,s,l),H(e,s,"A",r,i,d,m)}if(t=t.className,b(t)&&(t=t.animVal),x(t)&&""!==t)for(;o=f.exec(t);)s=Yt(o[2]),H(e,s,"C",r,i)&&(n[s]=sr(o[3])),t=t.substr(o.index+o[0].length);break;case dr:if(11===Bn)for(;t.parentNode&&t.nextSibling&&t.nextSibling.nodeType===dr;)t.nodeValue+=t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);Y(e,t.nodeValue);break;case 8:try{(o=c.exec(t.nodeValue))&&(s=Yt(o[1]),H(e,s,"M",r,i)&&(n[s]=sr(o[2])))}catch(v){}}return e.sort(J),e}function _(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw Wr("uterdir",e,n);1==t.nodeType&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return Hn(r)}function q(t,e,n){return function(r,i,o,a,s){return i=_(i[0],e,n),t(r,i,o,a,s)}}function U(t,r,i,o,s,u,c,l,f){function h(t,e,n,r){t&&(n&&(t=q(t,n,r)),t.require=m.require,t.directiveName=g,(M===m||m.$$isolateScope)&&(t=et(t,{isolateScope:!0})),c.push(t)),e&&(n&&(e=q(e,n,r)),e.require=m.require,e.directiveName=g,(M===m||m.$$isolateScope)&&(e=et(e,{isolateScope:!0})),l.push(e))}function p(t,e,n,r){var i;if(x(e)){var o=e.match(v);e=e.substring(o[0].length);var a=o[1]||o[3],o="?"===o[2];if("^^"===a?n=n.parent():i=(i=r&&r[e])&&i.instance,i||(r="$"+e+"Controller",i=a?n.inheritedData(r):n.data(r)),!i&&!o)throw Wr("ctreq",e,t)}else if(or(e))for(i=[],a=0,o=e.length;o>a;a++)i[a]=p(t,e[a],n,r);return i||null}function $(t,e,n,r,i,o){var a,s=ct();for(a in r){var u=r[a],c={$scope:u===M||u.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},l=u.controller;"@"==l&&(l=e[u.name]),c=y(l,c,!0,u.controllerAs),s[u.name]=c,t.data("$"+u.name+"Controller",c.instance)}return s}function d(t,e,o,a,s){function u(t,e,r){var i;return O(t)||(r=e,e=t,t=n),P&&(i=m),r||(r=P?g.parent():g),s(t,e,i,r,C)}var f,h,d,m,v,g,y;r===o?(a=i,g=i.$$element):(g=Hn(o),a=new at(g,i)),d=e,M?h=e.$new(!0):k&&(d=e.$parent),s&&(v=u,v.$$boundTransclude=s),A&&(m=$(g,a,v,A,h,e)),M&&(V.$$addScopeInfo(g,h,!0,!(T&&(T===M||T===M.$$originalDirective))),V.$$addScopeClass(g,!0),h.$$isolateBindings=M.$$isolateBindings,(y=ot(e,a,h,h.$$isolateBindings,M))&&h.$on("$destroy",y));for(var b in m){y=A[b];var w=m[b],x=y.$$bindings.bindToController;w.identifier&&x&&(f=ot(d,a,w.instance,x,y));var S=w();S!==w.instance&&(w.instance=S,g.data("$"+y.name+"Controller",S),f&&f(),f=ot(d,a,w.instance,x,y))}for(U=0,H=c.length;H>U;U++)f=c[U],rt(f,f.isolateScope?h:e,g,a,f.require&&p(f.directiveName,f.require,g,m),v);var C=e;for(M&&(M.template||null===M.templateUrl)&&(C=h),t&&t(C,o.childNodes,n,s),U=l.length-1;U>=0;U--)f=l[U],rt(f,f.isolateScope?h:e,g,a,f.require&&p(f.directiveName,f.require,g,m),v)}f=f||{};for(var m,g,w,S,C=-Number.MAX_VALUE,k=f.newScopeDirective,A=f.controllerDirectives,M=f.newIsolateScopeDirective,T=f.templateDirective,N=f.nonTlbTranscludeDirective,j=!1,D=!1,P=f.hasElementTranscludeDirective,I=i.$$element=Hn(r),R=o,U=0,H=t.length;H>U;U++){m=t[U];var L=m.$$start,J=m.$$end;if(L&&(I=_(r,L,J)),w=n,C>m.priority)break;if((w=m.scope)&&(m.templateUrl||(b(w)?(K("new/isolated scope",M||k,m,I),M=m):K("new/isolated scope",M,m,I)),k=k||m),g=m.name,!m.templateUrl&&m.controller&&(w=m.controller,A=A||ct(),K("'"+g+"' controller",A[g],m,I),A[g]=m),(w=m.transclude)&&(j=!0,m.$$tlb||(K("transclusion",N,m,I),N=m),"element"==w?(P=!0,C=m.priority,w=I,I=i.$$element=Hn(e.createComment(" "+g+": "+i[g]+" ")),r=I[0],tt(s,Yn.call(w,0),r),R=V(w,o,C,u&&u.name,{nonTlbTranscludeDirective:N})):(w=Hn(vt(r)).contents(),I.empty(),R=V(w,o,n,n,{needsNewScope:m.$$isolateScope||m.$$newScope}))),m.template)if(D=!0,K("template",T,m,I),T=m,w=E(m.template)?m.template(I,i):m.template,w=lt(w),m.replace){if(u=m,w=Cr.test(w)?Xt(Z(m.templateNamespace,sr(w))):[],r=w[0],1!=w.length||1!==r.nodeType)throw Wr("tplrt",g,"");tt(s,I,r),w={$attr:{}};var Y=F(r,[],w),X=t.splice(U+1,t.length-(U+1));(M||k)&&B(Y,M,k),t=t.concat(Y).concat(X),W(i,w),H=t.length}else I.html(w);if(m.templateUrl)D=!0,K("template",T,m,I),T=m,m.replace&&(u=m),d=G(t.splice(U,t.length-U),I,i,s,j&&R,c,l,{controllerDirectives:A,newScopeDirective:k!==m&&k,newIsolateScopeDirective:M,templateDirective:T,nonTlbTranscludeDirective:N}),H=t.length;else if(m.compile)try{S=m.compile(I,i,R),E(S)?h(null,S,L,J):S&&h(S.pre,S.post,L,J)}catch(Q){a(Q,z(I))}m.terminal&&(d.terminal=!0,C=Math.max(C,m.priority))}return d.scope=k&&!0===k.scope,d.transcludeOnThisElement=j,d.templateOnThisElement=D,d.transclude=R,f.hasElementTranscludeDirective=P,d}function B(t,e,n){for(var r=0,i=t.length;i>r;r++)t[r]=p(t[r],{$$isolateScope:e,$$newScope:n})}function H(e,n,r,o,s,c,l){if(n===s)return null;if(s=null,u.hasOwnProperty(n)){var f;n=t.get(n+"Directive");for(var h=0,$=n.length;$>h;h++)try{if(f=n[h],(g(o)||o>f.priority)&&-1!=f.restrict.indexOf(r)){if(c&&(f=p(f,{$$start:c,$$end:l})),!f.$$bindings){var d=f,m=f,v=f.name,y={isolateScope:null,bindToController:null};if(b(m.scope)&&(!0===m.bindToController?(y.bindToController=i(m.scope,v,!0),y.isolateScope={}):y.isolateScope=i(m.scope,v,!1)),b(m.bindToController)&&(y.bindToController=i(m.bindToController,v,!0)),b(y.bindToController)){var w=m.controller,S=m.controllerAs;if(!w)throw Wr("noctrl",v);var C;t:{var m=w,E=S;if(E&&x(E))C=E;else{if(x(m)){var k=Kr.exec(m);if(k){C=k[3];break t}}C=void 0}}if(!C)throw Wr("noident",v)}var A=d.$$bindings=y;b(A.isolateScope)&&(f.$$isolateBindings=A.isolateScope)}e.push(f),s=f}}catch(O){a(O)}}return s}function L(e){if(u.hasOwnProperty(e))for(var n=t.get(e+"Directive"),r=0,i=n.length;i>r;r++)if(e=n[r],e.multiElement)return!0;return!1}function W(t,e){var n=e.$attr,r=t.$attr,i=t.$$element;o(t,function(r,i){"$"!=i.charAt(0)&&(e[i]&&e[i]!==r&&(r+=("style"===i?";":" ")+e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,o){"class"==o?(N(i,e),t["class"]=(t["class"]?t["class"]+" ":"")+e):"style"==o?(i.attr("style",i.attr("style")+";"+e),t.style=(t.style?t.style+";":"")+e):"$"==o.charAt(0)||t.hasOwnProperty(o)||(t[o]=e,r[o]=n[o])})}function G(t,e,n,r,i,a,u,c){var l,f,h=[],$=e[0],d=t.shift(),m=p(d,{templateUrl:null,transclude:null,replace:null,$$originalDirective:d}),v=E(d.templateUrl)?d.templateUrl(e,n):d.templateUrl,g=d.templateNamespace;return e.empty(),s(v).then(function(s){var p,y;if(s=lt(s),d.replace){if(s=Cr.test(s)?Xt(Z(g,sr(s))):[],p=s[0],1!=s.length||1!==p.nodeType)throw Wr("tplrt",d.name,v);s={$attr:{}},tt(r,e,p);var w=F(p,[],s);b(d.scope)&&B(w,!0),t=w.concat(t),W(n,s);
}else p=$,e.html(s);for(t.unshift(m),l=U(t,p,n,i,e,d,a,u,c),o(r,function(t,n){t==p&&(r[n]=e[0])}),f=P(e[0].childNodes,i);h.length;){s=h.shift(),y=h.shift();var x=h.shift(),S=h.shift(),w=e[0];if(!s.$$destroyed){if(y!==$){var C=y.className;c.hasElementTranscludeDirective&&d.replace||(w=vt(p)),tt(x,Hn(y),w),N(Hn(w),C)}y=l.transcludeOnThisElement?I(s,l.transclude,S):S,l(f,s,w,r,y)}}h=null}),function(t,e,n,r,i){t=i,e.$$destroyed||(h?h.push(e,n,r,t):(l.transcludeOnThisElement&&(t=I(e,l.transclude,i)),l(f,e,n,r,t)))}}function J(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function K(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw Wr("multidir",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,z(r))}function Y(t,e){var n=r(e,!0);n&&t.push({priority:0,compile:function(t){t=t.parent();var e=!!t.length;return e&&V.$$addBindingClass(t),function(t,r){var i=r.parent();e||V.$$addBindingClass(i),V.$$addBindingInfo(i,n.expressions),t.$watch(n,function(t){r[0].nodeValue=t})}}})}function Z(t,n){switch(t=Gn(t||"html")){case"svg":case"math":var r=e.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function X(t,e){if("srcdoc"==e)return k.HTML;var n=j(t);return"xlinkHref"==e||"form"==n&&"action"==e||"img"!=n&&("src"==e||"ngSrc"==e)?k.RESOURCE_URL:void 0}function Q(t,e,n,i,o){var a=X(t,i);o=h[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===j(t))throw Wr("selmulti",z(t));e.push({priority:100,compile:function(){return{pre:function(t,e,u){if(e=u.$$observers||(u.$$observers=ct()),w.test(i))throw Wr("nodomevents");var c=u[i];c!==n&&(s=c&&r(c,!0,a,o),n=c),s&&(u[i]=s(t),(e[i]||(e[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||t).$watch(s,function(t,e){"class"===i&&t!=e?u.$updateClass(t,e):u.$set(i,t)}))}}}})}}function tt(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==a){t[i++]=r,o=i+s-1;for(var c=t.length;c>i;i++,o++)c>o?t[i]=t[o]:delete t[i];t.length-=s-1,t.context===a&&(t.context=r);break}for(u&&u.replaceChild(r,a),t=e.createDocumentFragment(),t.appendChild(a),Hn.hasData(a)&&(Hn.data(r,Hn.data(a)),Ln?(ir=!0,Ln.cleanData([a])):delete Hn.cache[a[Hn.expando]]),a=1,s=n.length;s>a;a++)u=n[a],Hn(u).remove(),t.appendChild(u),delete n[a];n[0]=r,n.length=1}function et(t,e){return l(function(){return t.apply(null,arguments)},t,e)}function rt(t,e,n,r,i,o){try{t(e,n,r,i,o)}catch(s){a(s,z(n))}}function ot(t,e,n,i,a){var s=[];return o(i,function(i,o){var u,c,l,f,h=i.attrName,p=i.optional;switch(i.mode){case"@":p||Jn.call(e,h)||(n[o]=e[h]=void 0),e.$observe(h,function(t){x(t)&&(n[o]=t)}),e.$$observers[h].$$scope=t,u=e[h],x(u)?n[o]=r(u)(t):M(u)&&(n[o]=u);break;case"=":if(!Jn.call(e,h)){if(p)break;e[h]=void 0}if(p&&!e[h])break;c=m(e[h]),f=c.literal?R:function(t,e){return t===e||t!==t&&e!==e},l=c.assign||function(){throw u=n[o]=c(t),Wr("nonassign",e[h],h,a.name)},u=n[o]=c(t),p=function(e){return f(e,n[o])||(f(e,u)?l(t,e=n[o]):n[o]=e),u=e},p.$stateful=!0,p=i.collection?t.$watchCollection(e[h],p):t.$watch(m(e[h],p),null,c.literal),s.push(p);break;case"&":if(c=e.hasOwnProperty(h)?m(e[h]):$,c===$&&p)break;n[o]=function(e){return c(t,e)}}}),s.length&&function(){for(var t=0,e=s.length;e>t;++t)s[t]()}}var at=function(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t};at.prototype={$normalize:Yt,$addClass:function(t){t&&0<t.length&&A.addClass(this.$$element,t)},$removeClass:function(t){t&&0<t.length&&A.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=Zt(t,e);n&&n.length&&A.addClass(this.$$element,n),(n=Zt(e,t))&&n.length&&A.removeClass(this.$$element,n)},$set:function(t,e,n,r){var i=Vt(this.$$element[0],t),s=Vr[t],u=t;if(i?(this.$$element.prop(t,e),r=i):s&&(this[s]=e,u=s),this[t]=e,r?this.$attr[t]=r:(r=this.$attr[t])||(this.$attr[t]=r=nt(t,"-")),i=j(this.$$element),"a"===i&&"href"===t||"img"===i&&"src"===t)this[t]=e=T(e,"src"===t);else if("img"===i&&"srcset"===t){for(var i="",s=sr(e),c=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,c=/\s/.test(s)?c:/(,)/,s=s.split(c),c=Math.floor(s.length/2),l=0;c>l;l++)var f=2*l,i=i+T(sr(s[f]),!0),i=i+(" "+sr(s[f+1]));s=sr(s[2*l]).split(/\s/),i+=T(sr(s[0]),!0),2===s.length&&(i+=" "+sr(s[1])),this[t]=e=i}!1!==n&&(null===e||g(e)?this.$$element.removeAttr(r):this.$$element.attr(r,e)),(t=this.$$observers)&&o(t[u],function(t){try{t(e)}catch(n){a(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=ct()),i=r[t]||(r[t]=[]);return i.push(e),S.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||g(n[t])||e(n[t])}),function(){D(i,e)}}};var st=r.startSymbol(),ut=r.endSymbol(),lt="{{"==st&&"}}"==ut?d:function(t){return t.replace(/\{\{/g,st).replace(/}}/g,ut)},ft=/^ngAttr[A-Z]/,ht=/^(.+)Start$/;return V.$$addBindingInfo=C?function(t,e){var n=t.data("$binding")||[];or(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:$,V.$$addBindingClass=C?function(t){N(t,"ng-binding")}:$,V.$$addScopeInfo=C?function(t,e,n,r){t.data(n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope",e)}:$,V.$$addScopeClass=C?function(t,e){N(t,e?"ng-isolate-scope":"ng-scope")}:$,V}]}function Yt(t){return ht(t.replace(Gr,""))}function Zt(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/),o=0;t:for(;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue t;n+=(0<n.length?" ":"")+a}return n}function Xt(t){t=Hn(t);var e=t.length;if(1>=e)return t;for(;e--;)8===t[e].nodeType&&Zn.call(t,e,1);return t}function Qt(){var t={},e=!1;this.register=function(e,n){at(e,"controller"),b(e)?l(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(i,o){function a(t,e,n,i){if(!t||!b(t.$scope))throw r("$controller")("noscp",i,e);t.$scope[e]=n}return function(r,s,u,c){var f,h,p;if(u=!0===u,c&&x(c)&&(p=c),x(r)){if(c=r.match(Kr),!c)throw Jr("ctrlfmt",r);h=c[1],p=p||c[3],r=t.hasOwnProperty(h)?t[h]:st(s.$scope,h,!0)||(e?st(o,h,!0):n),ot(r,h,!0)}return u?(u=(or(r)?r[r.length-1]:r).prototype,f=Object.create(u||null),p&&a(s,p,f,h||r.name),l(function(){var t=i.invoke(r,f,s,h);return t!==f&&(b(t)||E(t))&&(f=t,p&&a(s,p,f,h||r.name)),f},{instance:f,identifier:p})):(f=i.instantiate(r,s,h),p&&a(s,p,f,h||r.name),f)}}]}function te(){this.$get=["$window",function(t){return Hn(t.document)}]}function ee(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function ne(t){return b(t)?C(t)?t.toISOString():U(t):t}function re(){this.$get=function(){return function(t){if(!t)return"";var e=[];return a(t,function(t,n){null===t||g(t)||(or(t)?o(t,function(t,r){e.push(Y(n)+"="+Y(ne(t)))}):e.push(Y(n)+"="+Y(ne(t))))}),e.join("&")}}}function ie(){this.$get=function(){return function(t){function e(t,r,i){null===t||g(t)||(or(t)?o(t,function(t,n){e(t,r+"["+(b(t)?n:"")+"]")}):b(t)&&!C(t)?a(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(Y(r)+"="+Y(ne(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function oe(t,e){if(x(t)){var n=t.replace(ei,"").trim();if(n){var r=e("Content-Type");(r=r&&0===r.indexOf(Zr))||(r=(r=n.match(Qr))&&ti[r[0]].test(n)),r&&(t=B(n))}}return t}function ae(t){var e,n=ct();return x(t)?o(t.split("\n"),function(t){e=t.indexOf(":");var r=Gn(sr(t.substr(0,e)));t=sr(t.substr(e+1)),r&&(n[r]=n[r]?n[r]+", "+t:t)}):b(t)&&o(t,function(t,e){var r=Gn(e),i=sr(t);r&&(n[r]=n[r]?n[r]+", "+i:i)}),n}function se(t){var e;return function(n){return e||(e=ae(t)),n?(n=e[Gn(n)],void 0===n&&(n=null),n):e}}function ue(t,e,n,r){return E(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function ce(){var t=this.defaults={transformResponse:[oe],transformRequest:[function(t){return b(t)&&"[object File]"!==Qn.call(t)&&"[object Blob]"!==Qn.call(t)&&"[object FormData]"!==Qn.call(t)?U(t):t}],headers:{common:{Accept:"application/json, text/plain, */*"},post:I(Xr),put:I(Xr),patch:I(Xr)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},e=!1;this.useApplyAsync=function(t){return y(t)?(e=!!t,this):e};var i=!0;this.useLegacyPromiseExtensions=function(t){return y(t)?(i=!!t,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,u,c,f,h,p){function $(e){function a(t){var e=l({},t);return e.data=ue(t.data,t.headers,t.status,u.transformResponse),t=t.status,t>=200&&300>t?e:h.reject(e)}function s(t,e){var n,r={};return o(t,function(t,i){E(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}if(!nr.isObject(e))throw r("$http")("badreq",e);if(!x(e.url))throw r("$http")("badreq",e.url);var u=l({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer},e);u.headers=function(e){var n,r,i,o=t.headers,a=l({},e.headers),o=l({},o.common,o[Gn(e.method)]);t:for(n in o){r=Gn(n);for(i in a)if(Gn(i)===r)continue t;a[n]=o[n]}return s(a,I(e))}(e),u.method=Kn(u.method),u.paramSerializer=x(u.paramSerializer)?p.get(u.paramSerializer):u.paramSerializer;var c=[function(e){var r=e.headers,i=ue(e.data,se(r),n,e.transformRequest);return g(i)&&o(r,function(t,e){"content-type"===Gn(e)&&delete r[e]}),g(e.withCredentials)&&!g(t.withCredentials)&&(e.withCredentials=t.withCredentials),d(e,i).then(a,a)},n],f=h.when(u);for(o(w,function(t){(t.request||t.requestError)&&c.unshift(t.request,t.requestError),(t.response||t.responseError)&&c.push(t.response,t.responseError)});c.length;){e=c.shift();var $=c.shift(),f=f.then(e,$)}return i?(f.success=function(t){return ot(t,"fn"),f.then(function(e){t(e.data,e.status,e.headers,u)}),f},f.error=function(t){return ot(t,"fn"),f.then(null,function(e){t(e.data,e.status,e.headers,u)}),f}):(f.success=ri("success"),f.error=ri("error")),f}function d(r,i){function o(t,n,r,i){function o(){a(n,t,r,i)}p&&(t>=200&&300>t?p.put(C,[t,n,ae(r),i]):p.remove(C)),e?f.$applyAsync(o):(o(),f.$$phase||f.$apply())}function a(t,e,n,i){e=e>=-1?e:0,(e>=200&&300>e?w.resolve:w.reject)({data:t,status:e,headers:se(n),config:r,statusText:i})}function c(t){a(t.data,t.status,I(t.headers()),t.statusText)}function l(){var t=$.pendingRequests.indexOf(r);-1!==t&&$.pendingRequests.splice(t,1)}var p,d,w=h.defer(),x=w.promise,S=r.headers,C=m(r.url,r.paramSerializer(r.params));return $.pendingRequests.push(r),x.then(l,l),!r.cache&&!t.cache||!1===r.cache||"GET"!==r.method&&"JSONP"!==r.method||(p=b(r.cache)?r.cache:b(t.cache)?t.cache:v),p&&(d=p.get(C),y(d)?d&&E(d.then)?d.then(c,c):or(d)?a(d[1],d[0],I(d[2]),d[3]):a(d,200,{},"OK"):p.put(C,x)),g(d)&&((d=sn(r.url)?u()[r.xsrfCookieName||t.xsrfCookieName]:n)&&(S[r.xsrfHeaderName||t.xsrfHeaderName]=d),s(r.method,C,i,o,S,r.timeout,r.withCredentials,r.responseType)),x}function m(t,e){return 0<e.length&&(t+=(-1==t.indexOf("?")?"?":"&")+e),t}var v=c("$http");t.paramSerializer=x(t.paramSerializer)?p.get(t.paramSerializer):t.paramSerializer;var w=[];return o(a,function(t){w.unshift(x(t)?p.get(t):p.invoke(t))}),$.pendingRequests=[],function(t){o(arguments,function(t){$[t]=function(e,n){return $(l({},n||{},{method:t,url:e}))}})}("get","delete","head","jsonp"),function(t){o(arguments,function(t){$[t]=function(e,n,r){return $(l({},r||{},{method:t,url:e,data:n}))}})}("post","put","patch"),$.defaults=t,$}]}function le(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function fe(){this.$get=["$browser","$window","$document","$xhrFactory",function(t,e,n,r){return he(t,r,t.defer,e.angular.callbacks,n[0])}]}function he(t,e,n,r,i){function a(t,e,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){o.removeEventListener("load",a,!1),o.removeEventListener("error",a,!1),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r[e].called||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},o.addEventListener("load",a,!1),o.addEventListener("error",a,!1),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p){function d(){b&&b(),w&&w.abort()}function m(e,r,i,o,a){y(S)&&n.cancel(S),b=w=null,e(r,i,o,a),t.$$completeOutstandingRequest($)}if(t.$$incOutstandingRequestCount(),s=s||t.url(),"jsonp"==Gn(i)){var v="_"+(r.counter++).toString(36);r[v]=function(t){r[v].data=t,r[v].called=!0};var b=a(s.replace("JSON_CALLBACK","angular.callbacks."+v),v,function(t,e){m(c,t,r[v].data,"",e),r[v]=$})}else{var w=e(i,s);if(w.open(i,s,!0),o(l,function(t,e){y(t)&&w.setRequestHeader(e,t)}),w.onload=function(){var t=w.statusText||"",e="response"in w?w.response:w.responseText,n=1223===w.status?204:w.status;0===n&&(n=e?200:"file"==an(s).protocol?404:0),m(c,n,e,w.getAllResponseHeaders(),t)},i=function(){m(c,-1,null,null,"")},w.onerror=i,w.onabort=i,h&&(w.withCredentials=!0),p)try{w.responseType=p}catch(x){if("json"!==p)throw x}w.send(g(u)?null:u)}if(f>0)var S=n(d,f);else f&&E(f.then)&&f.then(d)}}function pe(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(f,t).replace(h,e)}function s(o,s,f,h){function p(t){try{var e=t;t=f?i.getTrusted(f,e):i.valueOf(e);var n;if(h&&!y(t))n=t;else if(null==t)n="";else{switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=U(t)}n=t}return n}catch(a){r(ii.interr(o,a))}}h=!!h;for(var $,d,m=0,v=[],b=[],w=o.length,x=[],S=[];w>m;){if(-1==($=o.indexOf(t,m))||-1==(d=o.indexOf(e,$+u))){m!==w&&x.push(a(o.substring(m)));break}m!==$&&x.push(a(o.substring(m,$))),m=o.substring($+u,d),v.push(m),b.push(n(m,p)),m=d+c,S.push(x.length),x.push("")}if(f&&1<x.length&&ii.throwNoconcat(o),!s||v.length){var C=function(t){for(var e=0,n=v.length;n>e;e++){if(h&&g(t[e]))return;x[S[e]]=t[e]}return x.join("")};return l(function(t){var e=0,n=v.length,i=Array(n);try{for(;n>e;e++)i[e]=b[e](t);return C(i)}catch(a){r(ii.interr(o,a))}},{exp:o,expressions:v,$$watchDelegate:function(t,e){var n;return t.$watchGroup(b,function(r,i){var o=C(r);E(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var u=t.length,c=e.length,f=new RegExp(t.replace(/./g,o),"g"),h=new RegExp(e.replace(/./g,o),"g");return s.startSymbol=function(){return t},s.endSymbol=function(){return e},s}]}function $e(){this.$get=["$rootScope","$window","$q","$$q",function(t,e,n,r){function i(i,a,s,u){var c=4<arguments.length,l=c?Yn.call(arguments,4):[],f=e.setInterval,h=e.clearInterval,p=0,$=y(u)&&!u,d=($?r:n).defer(),m=d.promise;return s=y(s)?s:0,m.then(null,null,c?function(){i.apply(null,l)}:i),m.$$intervalId=f(function(){d.notify(p++),s>0&&p>=s&&(d.resolve(p),h(m.$$intervalId),delete o[m.$$intervalId]),$||t.$apply()},a),o[m.$$intervalId]=d,m}var o={};return i.cancel=function(t){return t&&t.$$intervalId in o?(o[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete o[t.$$intervalId],!0):!1},i}]}function de(t){t=t.split("/");for(var e=t.length;e--;)t[e]=K(t[e]);return t.join("/")}function me(t,e){var n=an(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=h(n.port)||ai[n.protocol]||null}function ve(t,e){var n="/"!==t.charAt(0);n&&(t="/"+t);var r=an(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=G(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function ge(t,e){return 0===e.indexOf(t)?e.substr(t.length):void 0}function ye(t){var e=t.indexOf("#");return-1==e?t:t.substr(0,e)}function be(t){return t.replace(/(#.+)|#$/,"$1")}function we(t,e,n){this.$$html5=!0,n=n||"",me(t,this),this.$$parse=function(t){var n=ge(e,t);if(!x(n))throw si("ipthprfx",t,e);ve(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=J(this.$$search),n=this.$$hash?"#"+K(this.$$hash):"";this.$$url=de(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return y(o=ge(t,r))?(a=o,a=y(o=ge(n,o))?e+(ge("/",o)||o):t+a):y(o=ge(e,r))?a=e+o:e==r+"/"&&(a=e),a&&this.$$parse(a),!!a}}function xe(t,e,n){me(t,this),this.$$parse=function(r){var i,o=ge(t,r)||ge(e,r);g(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",g(o)&&(t=r,this.replace())):(i=ge(n,o),g(i)&&(i=o)),ve(i,this),r=this.$$path;var o=t,a=/^\/[A-Z]:(\/.*)/;0===i.indexOf(o)&&(i=i.replace(o,"")),a.exec(i)||(r=(i=a.exec(r))?i[1]:r),this.$$path=r,this.$$compose()},this.$$compose=function(){var e=J(this.$$search),r=this.$$hash?"#"+K(this.$$hash):"";this.$$url=de(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(e,n){return ye(t)==ye(e)?(this.$$parse(e),!0):!1}}function Se(t,e,n){this.$$html5=!0,xe.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t==ye(r)?o=r:(a=ge(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=J(this.$$search),r=this.$$hash?"#"+K(this.$$hash):"";this.$$url=de(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url}}function Ce(t){return function(){return this[t]}}function Ee(t,e){return function(n){return g(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function ke(){var t="",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return y(e)?(t=e,this):t},this.html5Mode=function(t){return M(t)?(e.enabled=t,this):b(t)?(M(t.enabled)&&(e.enabled=t.enabled),M(t.requireBase)&&(e.requireBase=t.requireBase),M(t.rewriteLinks)&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l;l=r.baseHref();var f,h=r.url();if(e.enabled){if(!l&&e.requireBase)throw si("nobase");f=h.substring(0,h.indexOf("/",h.indexOf("//")+2))+(l||"/"),l=i.history?we:Se}else f=ye(h),l=xe;var p=f.substr(0,ye(f).lastIndexOf("/")+1);c=new l(f,p,"#"+t),c.$$parseLinkUrl(h,h),c.$$state=r.state();var $=/^\s*(javascript|mailto):/i;o.on("click",function(t){if(e.rewriteLinks&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!=t.which&&2!=t.button){for(var i=Hn(t.target);"a"!==j(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");b(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=an(s.animVal).href),$.test(s)||!s||i.attr("target")||t.isDefaultPrevented()||!c.$$parseLinkUrl(s,u)||(t.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),be(c.absUrl())!=be(h)&&r.url(c.absUrl(),!0);var d=!0;return r.onUrlChange(function(t,e){g(ge(p,t))?a.location.href=t:(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=be(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(d=!1,u(i,o)))}),n.$$phase||n.$digest())}),n.$watch(function(){var t=be(r.url()),e=be(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(d||l)&&(d=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))})),c.$$replace=!1}),c}]}function Ae(){var t=!0,e=this;this.debugEnabled=function(e){return y(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return t instanceof Error&&(t.stack?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||$;t=!1;try{t=!!i.apply}catch(a){}return t?function(){var t=[];return o(arguments,function(e){t.push(r(e))}),i.apply(e,t)}:function(t,e){i(t,null==e?"":e)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function Oe(t,e){if("__defineGetter__"===t||"__defineSetter__"===t||"__lookupGetter__"===t||"__lookupSetter__"===t||"__proto__"===t)throw ci("isecfld",e);return t}function Me(t,e){if(t+="",!x(t))throw ci("iseccst",e);return t}function Te(t,e){if(t){if(t.constructor===t)throw ci("isecfn",e);if(t.window===t)throw ci("isecwindow",e);if(t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw ci("isecdom",e);if(t===Object)throw ci("isecobj",e)}return t}function Ne(t,e){if(t){if(t.constructor===t)throw ci("isecfn",e);if(t===li||t===fi||t===hi)throw ci("isecff",e)}}function Ve(t,e){if(t&&(t===0..constructor||t===(!1).constructor||t==="".constructor||t==={}.constructor||t===[].constructor||t===Function.constructor))throw ci("isecaf",e)}function je(t,e){return"undefined"!=typeof t?t:e}function De(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function Pe(t,e){var n,r;switch(t.type){case mi.Program:n=!0,o(t.body,function(t){Pe(t.expression,e),n=n&&t.expression.constant}),t.constant=n;break;case mi.Literal:t.constant=!0,t.toWatch=[];break;case mi.UnaryExpression:Pe(t.argument,e),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case mi.BinaryExpression:Pe(t.left,e),Pe(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case mi.LogicalExpression:Pe(t.left,e),Pe(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case mi.ConditionalExpression:Pe(t.test,e),Pe(t.alternate,e),Pe(t.consequent,e),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case mi.Identifier:t.constant=!1,t.toWatch=[t];break;case mi.MemberExpression:Pe(t.object,e),t.computed&&Pe(t.property,e),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=[t];break;case mi.CallExpression:n=t.filter?!e(t.callee.name).$stateful:!1,r=[],o(t.arguments,function(t){Pe(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=t.filter&&!e(t.callee.name).$stateful?r:[t];break;case mi.AssignmentExpression:Pe(t.left,e),Pe(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case mi.ArrayExpression:n=!0,r=[],o(t.elements,function(t){Pe(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=r;break;case mi.ObjectExpression:n=!0,r=[],o(t.properties,function(t){Pe(t.value,e),n=n&&t.value.constant,t.value.constant||r.push.apply(r,t.value.toWatch)}),t.constant=n,t.toWatch=r;break;case mi.ThisExpression:t.constant=!1,t.toWatch=[]}}function Ie(t){if(1==t.length){t=t[0].expression;var e=t.toWatch;return 1!==e.length?e:e[0]!==t?e:n}}function Re(t){return t.type===mi.Identifier||t.type===mi.MemberExpression}function Fe(t){return 1===t.body.length&&Re(t.body[0].expression)?{type:mi.AssignmentExpression,left:t.body[0].expression,right:{type:mi.NGValueParameter},operator:"="}:void 0}function _e(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===mi.Literal||t.body[0].expression.type===mi.ArrayExpression||t.body[0].expression.type===mi.ObjectExpression)}function qe(t,e){this.astBuilder=t,this.$filter=e}function Ue(t,e){this.astBuilder=t,this.$filter=e}function Be(t){return"constructor"==t}function He(t){return E(t.valueOf)?t.valueOf():gi.call(t)}function Le(){var t=ct(),e=ct();this.$get=["$filter",function(r){function i(n,i,o){var s,p,g;switch(o=o||v,typeof n){case"string":g=n=n.trim();var y=o?e:t;if(s=y[g],!s){":"===n.charAt(0)&&":"===n.charAt(1)&&(p=!0,n=n.substring(2)),s=o?m:d;var b=new di(s);s=new vi(b,r,s).parse(n),s.constant?s.$$watchDelegate=f:p?s.$$watchDelegate=s.literal?l:c:s.inputs&&(s.$$watchDelegate=u),o&&(s=a(s)),y[g]=s}return h(s,i);case"function":return h(n,i);default:return h($,i)}}function a(t){function e(e,n,r,i){var o=v;v=!0;try{return t(e,n,r,i)}finally{v=o}}if(!t)return t;e.$$watchDelegate=t.$$watchDelegate,e.assign=a(t.assign),e.constant=t.constant,e.literal=t.literal;for(var n=0;t.inputs&&n<t.inputs.length;++n)t.inputs[n]=a(t.inputs[n]);return e.inputs=t.inputs,e}function s(t,e){return null==t||null==e?t===e:"object"==typeof t&&(t=He(t),"object"==typeof t)?!1:t===e||t!==t&&e!==e}function u(t,e,r,i,o){var a,u=i.inputs;if(1===u.length){var c=s,u=u[0];return t.$watch(function(t){var e=u(t);return s(e,c)||(a=i(t,n,n,[e]),c=e&&He(e)),a},e,r,o)}for(var l=[],f=[],h=0,p=u.length;p>h;h++)l[h]=s,f[h]=null;return t.$watch(function(t){for(var e=!1,r=0,o=u.length;o>r;r++){var c=u[r](t);(e||(e=!s(c,l[r])))&&(f[r]=c,l[r]=c&&He(c))}return e&&(a=i(t,n,n,f)),a},e,r,o)}function c(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,E(e)&&e.apply(this,arguments),y(t)&&r.$$postDigest(function(){y(o)&&i()})},n)}function l(t,e,n,r){function i(t){var e=!0;return o(t,function(t){y(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return r(t)},function(t,n,r){s=t,E(e)&&e.call(this,t,n,r),i(t)&&r.$$postDigest(function(){i(s)&&a()})},n)}function f(t,e,n,r){var i;return i=t.$watch(function(t){return r(t)},function(t,n,r){E(e)&&e.apply(this,arguments),i()},n)}function h(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,n=n!==l&&n!==c?function(n,i,o,a){return o=r&&a?a[0]:t(n,i,o,a),e(o,n,i)}:function(n,r,i,o){return i=t(n,r,i,o),n=e(i,n,r),y(i)?n:i};return t.$$watchDelegate&&t.$$watchDelegate!==u?n.$$watchDelegate=t.$$watchDelegate:e.$stateful||(n.$$watchDelegate=u,r=!t.inputs,n.inputs=t.inputs?t.inputs:[t]),n}var p=cr().noUnsafeEval,d={csp:p,expensiveChecks:!1},m={csp:p,expensiveChecks:!0},v=!1;return i.$$runningExpensiveChecks=function(){return v},i}]}function ze(){this.$get=["$rootScope","$exceptionHandler",function(t,e){return Ge(function(e){t.$evalAsync(e)},e)}]}function We(){this.$get=["$browser","$exceptionHandler",function(t,e){return Ge(function(e){t.defer(e)},e)}]}function Ge(t,e){function i(t,e,n){function r(e){return function(n){i||(i=!0,e.call(t,n))}}var i=!1;return[r(e),r(n)]}function a(){this.$$state={status:0}}function s(t,e){return function(n){e.call(t,n)}}function u(r){!r.processScheduled&&r.pending&&(r.processScheduled=!0,t(function(){var t,i,o;o=r.pending,r.processScheduled=!1,r.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],t=o[a][r.status];try{E(t)?i.resolve(t(r.value)):1===r.status?i.resolve(r.value):i.reject(r.value)}catch(u){i.reject(u),e(u)}}}))}function c(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}var f=r("$q",TypeError);l(a.prototype,{then:function(t,e,n){if(g(t)&&g(e)&&g(n))return this;var r=new c;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),0<this.$$state.status&&u(this.$$state),r.promise},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return p(e,!0,t)},function(e){return p(e,!1,t)},e)}}),l(c.prototype,{resolve:function(t){this.promise.$$state.status||(t===this.promise?this.$$reject(f("qcycle",t)):this.$$resolve(t))},$$resolve:function(t){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(b(t)||E(t))&&(n=t&&t.then),E(n)?(this.promise.$$state.status=-1,n.call(t,r[0],r[1],this.notify)):(this.promise.$$state.value=t,this.promise.$$state.status=1,u(this.promise.$$state))}catch(o){r[1](o),e(o)}},reject:function(t){this.promise.$$state.status||this.$$reject(t)},$$reject:function(t){this.promise.$$state.value=t,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;0>=this.promise.$$state.status&&r&&r.length&&t(function(){for(var t,i,o=0,a=r.length;a>o;o++){i=r[o][0],t=r[o][3];try{i.notify(E(t)?t(n):n)}catch(s){e(s)}}})}});var h=function(t,e){var n=new c;return e?n.resolve(t):n.reject(t),n.promise},p=function(t,e,n){var r=null;try{E(n)&&(r=n())}catch(i){return h(i,!1)}return r&&E(r.then)?r.then(function(){return h(t,e)},function(t){return h(t,!1)}):h(t,e)},$=function(t,e,n,r){var i=new c;return i.resolve(t),i.promise.then(e,n,r)},d=function m(t){if(!E(t))throw f("norslvr",t);if(!(this instanceof m))return new m(t);var e=new c;return t(function(t){e.resolve(t)},function(t){e.reject(t)}),e.promise};return d.defer=function(){return new c},d.reject=function(t){var e=new c;return e.reject(t),e.promise},d.when=$,d.resolve=$,d.all=function(t){var e=new c,n=0,r=or(t)?[]:{};return o(t,function(t,i){n++,$(t).then(function(t){r.hasOwnProperty(i)||(r[i]=t,--n||e.resolve(r))},function(t){r.hasOwnProperty(i)||e.reject(t)})}),0===n&&e.resolve(r),e.promise},d}function Je(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function Ke(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++rr,this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,u,c,l){function f(t){t.currentScope.$$destroyed=!0}function h(t){9===Bn&&(t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function p(){this.$id=++rr,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function d(t){if(S.$$phase)throw n("inprog",S.$$phase);S.$$phase=t}function m(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function v(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function y(){}function w(){for(;A.length;)try{A.shift()()}catch(t){u(t)}s=null}function x(){null===s&&(s=l.defer(function(){S.$apply(w)}))}p.prototype={constructor:p,$new:function(e,n){var r;return n=n||this,e?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!=this)&&r.$on("$destroy",f),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,s=o.$$watchers,u={fn:e,last:y,get:i,exp:r||t,eq:!!n};return a=null,E(e)||(u.fn=$),s||(s=o.$$watchers=[]),s.unshift(u),m(this,1),function(){0<=D(s,u)&&m(o,-1),a=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(i,i,s)):e(i,r,s)}var r=Array(t.length),i=Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(i,i,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=s.$watch(t,function(t,o){i[e]=t,r[e]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function n(t){r=t;var e,n,a,s;if(!g(r)){if(b(r))if(i(r))for(o!==h&&(o=h,d=o.length=0,l++),t=r.length,d!==t&&(l++,o.length=d=t),e=0;t>e;e++)s=o[e],a=r[e],n=s!==s&&a!==a,n||s===a||(l++,o[e]=a);else{o!==p&&(o=p={},d=0,l++),t=0;for(e in r)Jn.call(r,e)&&(t++,a=r[e],s=o[e],e in o?(n=s!==s&&a!==a,n||s===a||(l++,o[e]=a)):(d++,o[e]=a,l++));if(d>t)for(e in l++,o)Jn.call(r,e)||(d--,delete o[e])}else o!==r&&(o=r,l++);return l}}n.$stateful=!0;var r,o,a,s=this,u=1<e.length,l=0,f=c(t,n),h=[],p={},$=!0,d=0;return this.$watch(f,function(){if($?($=!1,e(r,r,s)):e(r,a,s),u)if(b(r))if(i(r)){a=Array(r.length);for(var t=0;t<r.length;t++)a[t]=r[t]}else for(t in a={},r)Jn.call(r,t)&&(a[t]=r[t]);else a=r})},$digest:function(){
var t,r,i,o,c,f,h,p,$,m,v,g=e,b=[];d("$digest"),l.$$checkUrlChange(),this===S&&null!==s&&(l.defer.cancel(s),w()),a=null;do{for(p=!1,$=this;C.length;){try{v=C.shift(),v.scope.$eval(v.expression,v.locals)}catch(x){u(x)}a=null}t:do{if(f=$.$$watchers)for(h=f.length;h--;)try{if(t=f[h])if(c=t.get,(r=c($))===(i=t.last)||(t.eq?R(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(t===a){p=!1;break t}}else p=!0,a=t,t.last=t.eq?P(r,null):r,o=t.fn,o(r,i===y?r:i,$),5>g&&(m=4-g,b[m]||(b[m]=[]),b[m].push({msg:E(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:r,oldVal:i}))}catch(A){u(A)}if(!(f=$.$$watchersCount&&$.$$childHead||$!==this&&$.$$nextSibling))for(;$!==this&&!(f=$.$$nextSibling);)$=$.$parent}while($=f);if((p||C.length)&&!g--)throw S.$$phase=null,n("infdig",e,b)}while(p||C.length);for(S.$$phase=null;k.length;)try{k.shift()()}catch(O){u(O)}},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===S&&l.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var e in this.$$listenerCount)v(this,this.$$listenerCount[e],e);t&&t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=$,this.$on=this.$watch=this.$watchGroup=function(){return $},this.$$listeners={},this.$$nextSibling=null,h(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){S.$$phase||C.length||l.defer(function(){C.length&&S.$digest()}),C.push({scope:this,expression:c(t),locals:e})},$$postDigest:function(t){k.push(t)},$apply:function(t){try{d("$apply");try{return this.$eval(t)}finally{S.$$phase=null}}catch(e){u(e)}finally{try{S.$digest()}catch(n){throw u(n),n}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&A.push(e),t=c(t),x()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(n[r]=null,v(i,1,t))}},$emit:function(t,e){var n,r,i,o=[],a=this,s=!1,c={name:t,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=F([c],arguments,1);do{for(n=a.$$listeners[t]||o,c.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,l)}catch(f){u(f)}else n.splice(r,1),r--,i--;if(s)return c.currentScope=null,c;a=a.$parent}while(a);return c.currentScope=null,c},$broadcast:function(t,e){var n=this,r=this,i={name:t,targetScope:this,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[t])return i;for(var o,a,s=F([i],arguments,1);n=r;){for(i.currentScope=n,r=n.$$listeners[t]||[],o=0,a=r.length;a>o;o++)if(r[o])try{r[o].apply(null,s)}catch(c){u(c)}else r.splice(o,1),o--,a--;if(!(r=n.$$listenerCount[t]&&n.$$childHead||n!==this&&n.$$nextSibling))for(;n!==this&&!(r=n.$$nextSibling);)n=n.$parent}return i.currentScope=null,i}};var S=new p,C=S.$$asyncQueue=[],k=S.$$postDigestQueue=[],A=S.$$applyAsyncQueue=[];return S}]}function Ye(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=an(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Ze(t){if("self"===t)return t;if(x(t)){if(-1<t.indexOf("***"))throw yi("iwcard",t);return t=ur(t).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(k(t))return new RegExp("^"+t.source+"$");throw yi("imatcher")}function Xe(t){var e=[];return y(t)&&o(t,function(t){e.push(Ze(t))}),e}function Qe(){this.SCE_CONTEXTS=bi;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=Xe(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=Xe(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?sn(e):!!t.exec(e.href)}function i(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}var o=function(t){throw yi("unsafe")};n.has("$sanitize")&&(o=n.get("$sanitize"));var a=i(),s={};return s[bi.HTML]=i(a),s[bi.CSS]=i(a),s[bi.URL]=i(a),s[bi.JS]=i(a),s[bi.RESOURCE_URL]=i(s[bi.URL]),{trustAs:function(t,e){var n=s.hasOwnProperty(t)?s[t]:null;if(!n)throw yi("icontext",t,e);if(null===e||g(e)||""===e)return e;if("string"!=typeof e)throw yi("itype",t);return new n(e)},getTrusted:function(n,i){if(null===i||g(i)||""===i)return i;var a=s.hasOwnProperty(n)?s[n]:null;if(a&&i instanceof a)return i.$$unwrapTrustedValue();if(n===bi.RESOURCE_URL){var u,c,a=an(i.toString()),l=!1;for(u=0,c=t.length;c>u;u++)if(r(t[u],a)){l=!0;break}if(l)for(u=0,c=e.length;c>u;u++)if(r(e[u],a)){l=!1;break}if(l)return i;throw yi("insecurl",i.toString())}if(n===bi.HTML)return o(i);throw yi("unsafe")},valueOf:function(t){return t instanceof a?t.$$unwrapTrustedValue():t}}}]}function tn(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&8>Bn)throw yi("iequirks");var r=I(bi);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=d),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(bi,function(t,e){var n=Gn(e);r[ht("parse_as_"+n)]=function(e){return i(t,e)},r[ht("get_trusted_"+n)]=function(e){return a(t,e)},r[ht("trust_as_"+n)]=function(e){return s(t,e)}}),r}]}function en(){this.$get=["$window","$document",function(t,e){var n,r={},i=h((/android (\d+)/.exec(Gn((t.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((t.navigator||{}).userAgent),a=e[0]||{},s=/^(Moz|webkit|ms)(?=[A-Z])/,u=a.body&&a.body.style,c=!1,l=!1;if(u){for(var f in u)if(c=s.exec(f)){n=c[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),c=!!("transition"in u||n+"Transition"in u),l=!!("animation"in u||n+"Animation"in u),!i||c&&l||(c=x(u.webkitTransition),l=x(u.webkitAnimation))}return{history:!(!t.history||!t.history.pushState||4>i||o),hasEvent:function(t){if("input"===t&&11>=Bn)return!1;if(g(r[t])){var e=a.createElement("div");r[t]="on"+t in e}return r[t]},csp:cr(),vendorPrefix:n,transitions:c,animations:l,android:i}}]}function nn(){this.$get=["$templateCache","$http","$q","$sce",function(t,e,n,r){function i(o,a){i.totalPendingRequests++,x(o)&&t.get(o)||(o=r.getTrustedResourceUrl(o));var s=e.defaults&&e.defaults.transformResponse;return or(s)?s=s.filter(function(t){return t!==oe}):s===oe&&(s=null),e.get(o,{cache:t,transformResponse:s})["finally"](function(){i.totalPendingRequests--}).then(function(e){return t.put(o,e.data),e.data},function(t){if(!a)throw Wr("tpload",o,t.status,t.statusText);return n.reject(t)})}return i.totalPendingRequests=0,i}]}function rn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){return{findBindings:function(t,e,n){t=t.getElementsByClassName("ng-binding");var r=[];return o(t,function(t){var i=nr.element(t).data("$binding");i&&o(i,function(i){n?new RegExp("(^|\\s)"+ur(e)+"(\\s|\\||$)").test(i)&&r.push(t):-1!=i.indexOf(e)&&r.push(t)})}),r},findModels:function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=t.querySelectorAll("["+r[i]+"model"+(n?"=":"*=")+'"'+e+'"]');if(o.length)return o}},getLocation:function(){return n.url()},setLocation:function(e){e!==n.url()&&(n.url(e),t.$digest())},whenStable:function(t){e.notifyWhenNoOutstandingRequests(t)}}}]}function on(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){E(o)||(u=s,s=o,o=$);var c,l=Yn.call(arguments,3),f=y(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(e){h.reject(e),i(e)}finally{delete a[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(t){return t&&t.$$timeoutId in a?(a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId)):!1},o}]}function an(t){return Bn&&(wi.setAttribute("href",t),t=wi.href),wi.setAttribute("href",t),{href:wi.href,protocol:wi.protocol?wi.protocol.replace(/:$/,""):"",host:wi.host,search:wi.search?wi.search.replace(/^\?/,""):"",hash:wi.hash?wi.hash.replace(/^#/,""):"",hostname:wi.hostname,port:wi.port,pathname:"/"===wi.pathname.charAt(0)?wi.pathname:"/"+wi.pathname}}function sn(t){return t=x(t)?an(t):t,t.protocol===xi.protocol&&t.host===xi.host}function un(){this.$get=m(t)}function cn(t){function e(t){try{return decodeURIComponent(t)}catch(e){return t}}var n=t[0]||{},r={},i="";return function(){var t,o,a,s,u;if(t=n.cookie||"",t!==i)for(i=t,t=i.split("; "),r={},a=0;a<t.length;a++)o=t[a],s=o.indexOf("="),s>0&&(u=e(o.substring(0,s)),g(r[u])&&(r[u]=e(o.substring(s+1))));return r}}function ln(){this.$get=cn}function fn(t){function e(n,r){if(b(n)){var i={};return o(n,function(t,n){i[n]=e(n,t)}),i}return t.factory(n+"Filter",r)}this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+"Filter")}}],e("currency",mn),e("date",An),e("filter",hn),e("json",On),e("limitTo",Mn),e("lowercase",Mi),e("number",vn),e("orderBy",Tn),e("uppercase",Ti)}function hn(){return function(t,e,n){if(!i(t)){if(null==t)return t;throw r("filter")("notarray",t)}var o;switch(dn(e)){case"function":break;case"boolean":case"null":case"number":case"string":o=!0;case"object":e=pn(e,n,o);break;default:return t}return Array.prototype.filter.call(t,e)}}function pn(t,e,n){var r=b(t)&&"$"in t;return!0===e?e=R:E(e)||(e=function(t,e){return g(t)?!1:null===t||null===e?t===e:b(e)||b(t)&&!v(t)?!1:(t=Gn(""+t),e=Gn(""+e),-1!==t.indexOf(e))}),function(i){return r&&!b(i)?$n(i,t.$,e,!1):$n(i,t,e,n)}}function $n(t,e,n,r,i){var o=dn(t),a=dn(e);if("string"===a&&"!"===e.charAt(0))return!$n(t,e.substring(1),n,r);if(or(t))return t.some(function(t){return $n(t,e,n,r)});switch(o){case"object":var s;if(r){for(s in t)if("$"!==s.charAt(0)&&$n(t[s],e,n,!0))return!0;return i?!1:$n(t,e,n,!1)}if("object"===a){for(s in e)if(i=e[s],!E(i)&&!g(i)&&(o="$"===s,!$n(o?t:t[s],i,n,o,o)))return!1;return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function dn(t){return null===t?"null":typeof t}function mn(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return g(n)&&(n=e.CURRENCY_SYM),g(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:bn(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function vn(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:bn(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function gn(t){var e,n,r,i,o,a=0;for(-1<(n=t.indexOf(Ci))&&(t=t.replace(Ci,"")),0<(r=t.search(/e/i))?(0>n&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):0>n&&(n=t.length),r=0;t.charAt(r)==Ei;r++);if(r==(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)==Ei;)o--;for(n-=r,e=[],i=0;o>=r;r++,i++)e[i]=+t.charAt(r)}return n>Si&&(e=e.splice(0,Si-1),a=n-1,n=1),{d:e,e:a,i:n}}function yn(t,e,n,r){var i=t.d,o=i.length-t.i;if(e=g(e)?Math.min(Math.max(n,o),r):+e,n=e+t.i,r=i[n],n>0)i.splice(n);else{t.i=1,i.length=n=e+1;for(var a=0;n>a;a++)i[a]=0}for(r>=5&&i[n-1]++;e>o;o++)i.push(0);(e=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0))&&(i.unshift(e),t.i++)}function bn(t,e,n,r,i){if(!x(t)&&!S(t)||isNaN(t))return"";var o=!isFinite(t),a=!1,s=Math.abs(t)+"",u="";if(o)u="∞";else{for(a=gn(s),yn(a,i,e.minFrac,e.maxFrac),u=a.d,s=a.i,i=a.e,o=[],a=u.reduce(function(t,e){return t&&!e},!0);0>s;)u.unshift(0),s++;for(s>0?o=u.splice(s):(o=u,u=[0]),s=[],u.length>e.lgSize&&s.unshift(u.splice(-e.lgSize).join(""));u.length>e.gSize;)s.unshift(u.splice(-e.gSize).join(""));u.length&&s.unshift(u.join("")),u=s.join(n),o.length&&(u+=r+o.join("")),i&&(u+="e+"+i)}return 0>t&&!a?e.negPre+u+e.negSuf:e.posPre+u+e.posSuf}function wn(t,e,n){var r="";for(0>t&&(r="-",t=-t),t=""+t;t.length<e;)t=Ei+t;return n&&(t=t.substr(t.length-e)),r+t}function xn(t,e,n,r){return n=n||0,function(i){return i=i["get"+t](),(n>0||i>-n)&&(i+=n),0===i&&-12==n&&(i=12),wn(i,e,r)}}function Sn(t,e){return function(n,r){var i=n["get"+t](),o=Kn(e?"SHORT"+t:t);return r[o][i]}}function Cn(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(4>=e?5:12)-e)}function En(t){return function(e){var n=Cn(e.getFullYear());return e=+new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))-+n,e=1+Math.round(e/6048e5),wn(e,t)}}function kn(t,e){return 0>=t.getFullYear()?e.ERAS[0]:e.ERAS[1]}function An(t){function e(t){var e;if(e=t.match(n)){t=new Date(0);var r=0,i=0,o=e[8]?t.setUTCFullYear:t.setFullYear,a=e[8]?t.setUTCHours:t.setHours;e[9]&&(r=h(e[9]+e[10]),i=h(e[9]+e[11])),o.call(t,h(e[1]),h(e[2])-1,h(e[3])),r=h(e[4]||0)-r,i=h(e[5]||0)-i,o=h(e[6]||0),e=Math.round(1e3*parseFloat("0."+(e[7]||0))),a.call(t,r,i,o,e)}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,x(n)&&(n=Oi.test(n)?h(n):e(n)),S(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)(s=Ai.exec(r))?(c=F(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=H(i,l),n=L(n,i,!0)),o(c,function(e){a=ki[e],u+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function On(){return function(t,e){return g(e)&&(e=2),U(t,e)}}function Mn(){return function(t,e,n){return e=1/0===Math.abs(Number(e))?Number(e):h(e),isNaN(e)?t:(S(t)&&(t=t.toString()),or(t)||x(t)?(n=!n||isNaN(n)?0:h(n),n=0>n?Math.max(0,t.length+n):n,e>=0?t.slice(n,n+e):0===n?t.slice(e,t.length):t.slice(Math.max(0,n+e),n)):t)}}function Tn(t){function e(e,n){return n=n?-1:1,e.map(function(e){var r=1,i=d;if(E(e))i=e;else if(x(e)&&("+"!=e.charAt(0)&&"-"!=e.charAt(0)||(r="-"==e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(i=t(e),i.constant)))var o=i(),i=function(t){return t[o]};return{get:i,descending:r*n}})}function n(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}return function(t,r,o){if(!i(t))return t;or(r)||(r=[r]),0===r.length&&(r=["+"]);var a=e(r,o);return a.push({get:function(){return{}},descending:o?-1:1}),t=Array.prototype.map.call(t,function(t,e){return{value:t,predicateValues:a.map(function(r){var i=r.get(t);return r=typeof i,null===i?(r="string",i="null"):"string"===r?i=i.toLowerCase():"object"===r&&("function"==typeof i.valueOf&&(i=i.valueOf(),n(i))||v(i)&&(i=i.toString(),n(i))||(i=e)),{value:i,type:r}})}}),t.sort(function(t,e){for(var n=0,r=0,i=a.length;i>r;++r){var n=t.predicateValues[r],o=e.predicateValues[r],s=0;if(n.type===o.type?n.value!==o.value&&(s=n.value<o.value?-1:1):s=n.type<o.type?-1:1,n=s*a[r].descending)break}return n}),t=t.map(function(t){return t.value})}}function Nn(t){return E(t)&&(t={link:t}),t.restrict=t.restrict||"AC",m(t)}function Vn(t,e,r,i,a){var s=this,u=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(e.name||e.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=ji,s.$rollbackViewValue=function(){o(u,function(t){t.$rollbackViewValue()})},s.$commitViewValue=function(){o(u,function(t){t.$commitViewValue()})},s.$addControl=function(t){at(t.$name,"input"),u.push(t),t.$name&&(s[t.$name]=t),t.$$parentForm=s},s.$$renameControl=function(t,e){var n=t.$name;s[n]===t&&delete s[n],s[e]=t,t.$name=e},s.$removeControl=function(t){t.$name&&s[t.$name]===t&&delete s[t.$name],o(s.$pending,function(e,n){s.$setValidity(n,null,t)}),o(s.$error,function(e,n){s.$setValidity(n,null,t)}),o(s.$$success,function(e,n){s.$setValidity(n,null,t)}),D(u,t),t.$$parentForm=ji},qn({ctrl:this,$element:t,set:function(t,e,n){var r=t[e];r?-1===r.indexOf(n)&&r.push(n):t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(D(r,n),0===r.length&&delete t[e])},$animate:i}),s.$setDirty=function(){i.removeClass(t,mo),i.addClass(t,vo),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(t,mo,vo+" ng-submitted"),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(u,function(t){t.$setPristine()})},s.$setUntouched=function(){o(u,function(t){t.$setUntouched()})},s.$setSubmitted=function(){i.addClass(t,"ng-submitted"),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function jn(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function Dn(t,e,n,r,i,o){var a=Gn(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(t){s=!0}),e.on("compositionend",function(){s=!1,c()})}var u,c=function(t){if(u&&(o.defer.cancel(u),u=null),!s){var i=e.val();t=t&&t.type,"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=sr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,t)}};if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||e>15&&19>e||e>=37&&40>=e||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",c),Wi[a]&&r.$$hasNativeValidators&&a===n.type&&e.on("keydown wheel mousedown",function(t){if(!u){var e=this.validity,n=e.badInput,r=e.typeMismatch;u=o.defer(function(){u=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function Pn(t,e){return function(n,r){var i,a;if(C(n))return n;if(x(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Ri.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function In(t,e,r,i){return function(o,a,s,u,c,l,f){function h(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function p(t){return y(t)&&!C(t)?r(t)||n:t}Rn(o,a,s,u),Dn(o,a,s,u,c,l);var $,d=u&&u.$options&&u.$options.timezone;if(u.$$parserName=t,u.$parsers.push(function(t){return u.$isEmpty(t)?null:e.test(t)?(t=r(t,$),d&&(t=L(t,d)),t):n}),u.$formatters.push(function(t){if(t&&!C(t))throw yo("datefmt",t);return h(t)?(($=t)&&d&&($=L($,d,!0)),f("date")(t,i,d)):($=null,"")}),y(s.min)||s.ngMin){var m;u.$validators.min=function(t){return!h(t)||g(m)||r(t)>=m},s.$observe("min",function(t){m=p(t),u.$validate()})}if(y(s.max)||s.ngMax){var v;u.$validators.max=function(t){return!h(t)||g(v)||r(t)<=v},s.$observe("max",function(t){v=p(t),u.$validate()})}}}function Rn(t,e,r,i){(i.$$hasNativeValidators=b(e[0].validity))&&i.$parsers.push(function(t){var r=e.prop("validity")||{};return r.badInput&&!r.typeMismatch?n:t})}function Fn(t,e,n,r,i){if(y(r)){if(t=t(r),!t.constant)throw yo("constexpr",n,r);return t(e)}return i}function _n(t,e){return t="ngClass"+t,["$animate",function(n){function r(t,e){var n=[],r=0;t:for(;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function i(t){var e=[];return or(t)?(o(t,function(t){e=e.concat(i(t))}),e):x(t)?t.split(" "):b(t)?(o(t,function(t,n){t&&(e=e.concat(n.split(" ")))}),e):t}return{restrict:"AC",link:function(a,s,u){function c(t,e){var n=s.data("$classCounts")||ct(),r=[];return o(t,function(t){(e>0||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(e>0)&&r.push(t))}),s.data("$classCounts",n),r.join(" ")}function l(t){if(!0===e||a.$index%2===e){var o=i(t||[]);if(f){if(!R(t,f)){var l=i(f),h=r(o,l),o=r(l,o),h=c(h,1),o=c(o,-1);h&&h.length&&n.addClass(s,h),o&&o.length&&n.removeClass(s,o)}}else{var h=c(o,1);u.$addClass(h)}}f=I(t)}var f;a.$watch(u[t],l,!0),u.$observe("class",function(e){l(a.$eval(u[t]))}),"ngClass"!==t&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(u[t]));o===e?(o=c(s,1),u.$addClass(o)):(o=c(s,-1),u.$removeClass(o))}})}}}]}function qn(t){function e(t,e){e&&!a[t]?(c.addClass(o,t),a[t]=!0):!e&&a[t]&&(c.removeClass(o,t),a[t]=!1)}function r(t,n){t=t?"-"+nt(t,"-"):"",e(po+t,!0===n),e($o+t,!1===n)}var i=t.ctrl,o=t.$element,a={},s=t.set,u=t.unset,c=t.$animate;a[$o]=!(a[po]=o.hasClass(po)),i.$setValidity=function(t,o,a){g(o)?(i.$pending||(i.$pending={}),s(i.$pending,t,a)):(i.$pending&&u(i.$pending,t,a),Un(i.$pending)&&(i.$pending=n)),M(o)?o?(u(i.$error,t,a),s(i.$$success,t,a)):(s(i.$error,t,a),u(i.$$success,t,a)):(u(i.$error,t,a),u(i.$$success,t,a)),i.$pending?(e(go,!0),i.$valid=i.$invalid=n,r("",null)):(e(go,!1),i.$valid=Un(i.$error),i.$invalid=!i.$valid,r("",i.$valid)),o=i.$pending&&i.$pending[t]?n:i.$error[t]?!1:i.$$success[t]?!0:null,r(t,o),i.$$parentForm.$setValidity(t,o,i)}}function Un(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}var Bn,Hn,Ln,zn,Wn=/^\/(.+)\/([a-z]*)$/,Gn=function(t){return x(t)?t.toLowerCase():t},Jn=Object.prototype.hasOwnProperty,Kn=function(t){return x(t)?t.toUpperCase():t},Yn=[].slice,Zn=[].splice,Xn=[].push,Qn=Object.prototype.toString,tr=Object.getPrototypeOf,er=r("ng"),nr=t.angular||(t.angular={}),rr=0;Bn=e.documentMode,$.$inject=[],d.$inject=[];var ir,or=Array.isArray,ar=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,sr=function(t){return x(t)?t.trim():t},ur=function(t){return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},cr=function(){if(!y(cr.rules)){var t=e.querySelector("[ng-csp]")||e.querySelector("[data-ng-csp]");if(t){var n=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");cr.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else{t=cr;try{new Function(""),n=!1}catch(r){n=!0}t.rules={noUnsafeEval:n,noInlineStyle:!1}}}return cr.rules},lr=function(){if(y(lr.name_))return lr.name_;var t,n,r,i,o=hr.length;for(n=0;o>n;++n)if(r=hr[n],t=e.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return lr.name_=i},fr=/:/g,hr=["ng-","data-ng-","ng:","x-ng-"],pr=/[A-Z]/g,$r=!1,dr=3,mr={full:"1.4.10",major:1,minor:4,dot:10,codeName:"benignant-oscillation"};mt.expando="ng339";var vr=mt.cache={},gr=1;mt._data=function(t){return this.cache[t[this.expando]]||{}};var yr=/([\:\-\_]+(.))/g,br=/^moz([A-Z])/,wr={mouseleave:"mouseout",mouseenter:"mouseover"},xr=r("jqLite"),Sr=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Cr=/<|&#?\w+;/,Er=/<([\w:-]+)/,kr=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ar={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ar.optgroup=Ar.option,Ar.tbody=Ar.tfoot=Ar.colgroup=Ar.caption=Ar.thead,Ar.th=Ar.td;var Or=Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},Mr=mt.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===e.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),mt(t).on("load",r))},toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return Hn(t>=0?this[t]:this[this.length+t])},length:0,push:Xn,sort:[].sort,splice:[].splice},Tr={};o("multiple selected checked disabled readOnly required open".split(" "),function(t){Tr[Gn(t)]=t});var Nr={};o("input select option textarea button form details".split(" "),function(t){Nr[t]=!0});var Vr={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:xt,removeData:bt,hasData:function(t){for(var e in vr[t.ng339])return!0;return!1}},function(t,e){mt[e]=t}),o({data:xt,inheritedData:Ot,scope:function(t){return Hn.data(t,"$scope")||Ot(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return Hn.data(t,"$isolateScope")||Hn.data(t,"$isolateScopeNoTemplate")},controller:At,injector:function(t){return Ot(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:St,css:function(t,e,n){return e=ht(e),y(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,r){var i=t.nodeType;if(i!==dr&&2!==i&&8!==i)if(i=Gn(e),Tr[i]){if(!y(r))return t[e]||(t.attributes.getNamedItem(e)||$).specified?i:n;r?(t[e]=!0,t.setAttribute(e,i)):(t[e]=!1,t.removeAttribute(i))}else if(y(r))t.setAttribute(e,r);else if(t.getAttribute)return t=t.getAttribute(e,2),null===t?n:t},prop:function(t,e,n){return y(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if(g(e)){var n=t.nodeType;return 1===n||n===dr?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(g(e)){if(t.multiple&&"select"===j(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){return g(e)?t.innerHTML:(gt(t,!0),void(t.innerHTML=e))},empty:Mt},function(t,e){mt.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Mt&&g(2==t.length&&t!==St&&t!==At?e:n)){if(b(e)){for(r=0;o>r;r++)if(t===xt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(r=t.$dv,o=g(r)?Math.min(o,1):o,i=0;o>i;i++){var a=t(this[i],e,n);r=r?r+a:a}return r}for(r=0;o>r;r++)t(this[r],e,n);return this}}),o({removeData:bt,on:function(t,e,r,i){if(y(i))throw xr("onargs");if(pt(t)){i=wt(t,!0);var o=i.events,a=i.handle;a||(a=i.handle=jt(t,o)),i=0<=e.indexOf(" ")?e.split(" "):[e];for(var s=i.length,u=function(e,n,i){var s=o[e];s||(s=o[e]=[],s.specialHandlerWrapper=n,"$destroy"===e||i||t.addEventListener(e,a,!1)),s.push(r)};s--;)e=i[s],wr[e]?(u(wr[e],Pt),u(e,n,!0)):u(e)}},off:yt,one:function(t,e,n){t=Hn(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;gt(t),o(new mt(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return o(t.childNodes,function(t){1===t.nodeType&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(1===n||11===n){e=new mt(e);for(var n=0,r=e.length;r>n;n++)t.appendChild(e[n])}},prepend:function(t,e){if(1===t.nodeType){var n=t.firstChild;o(new mt(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){dt(t,Hn(e).eq(0).clone()[0])},remove:Tt,detach:function(t){Tt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;e=new mt(e);for(var i=0,o=e.length;o>i;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Et,removeClass:Ct,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;g(r)&&(r=!St(t,e)),(r?Et:Ct)(t,e)})},parent:function(t){return(t=t.parentNode)&&11!==t.nodeType?t:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:vt,triggerHandler:function(t,e,n){var r,i,a=e.type||e,s=wt(t);(s=(s=s&&s.events)&&s[a])&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:$,type:a,target:t},e.type&&(r=l(r,e)),e=I(s),i=n?[r].concat(n):[r],o(e,function(e){r.isImmediatePropagationStopped()||e.apply(t,i)}))}},function(t,e){mt.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;a>o;o++)g(i)?(i=t(this[o],e,n,r),y(i)&&(i=Hn(i))):kt(i,t(this[o],e,n,r));return y(i)?i:this},mt.prototype.bind=mt.prototype.on,mt.prototype.unbind=mt.prototype.off}),Ft.prototype={put:function(t,e){this[Rt(t,this.nextUid)]=e},get:function(t){return this[Rt(t,this.nextUid)]},remove:function(t){var e=this[t=Rt(t,this.nextUid)];return delete this[t],e}};var jr=[function(){this.$get=[function(){return Ft}]}],Dr=/^[^\(]*\(\s*([^\)]*)\)/m,Pr=/,/,Ir=/^\s*(_?)(\S+?)\1\s*$/,Rr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Fr=r("$injector");qt.$$annotate=function(t,e,n){var r;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw x(n)&&n||(n=t.name||_t(t)),Fr("strictdi",n);e=t.toString().replace(Rr,""),e=e.match(Dr),o(e[1].split(Pr),function(t){t.replace(Ir,function(t,e,n){r.push(n)})})}t.$inject=r}}else or(t)?(e=t.length-1,ot(t[e],"fn"),r=t.slice(0,e)):ot(t,"fn",!0);return r};var _r=r("$animate"),qr=function(){this.$get=function(){}},Ur=function(){var t=new Ft,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=x(e)?e.split(" "):or(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){o(e,function(e){var n=t.get(e);if(n){var r=Ht(e.attr("class")),i="",a="";o(n,function(t,e){t!==!!r[e]&&(t?i+=(i.length?" ":"")+e:a+=(a.length?" ":"")+e)}),o(e,function(t){i&&Et(t,i),a&&Ct(t,a)}),t.remove(e)}}),e.length=0}return{enabled:$,on:$,off:$,pin:$,push:function(o,s,u,c){return c&&c(),u=u||{},u.from&&o.css(u.from),u.to&&o.css(u.to),(u.addClass||u.removeClass)&&(s=u.addClass,c=u.removeClass,u=t.get(o)||{},s=i(u,s,!0),c=i(u,c,!1),(s||c)&&(t.put(o,u),e.push(o),1===e.length&&r.$$postDigest(a))),o=new n,o.complete(),o}}}]},Br=["$provide",function(t){var e=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw _r("notcsel",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.classNameFilter=function(t){if(1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw _r("nongcls","ng-animate");return this.$$classNameFilter},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r;t:{for(r=0;r<n.length;r++){var i=n[r];if(1===i.nodeType){r=i;break t}}r=void 0}!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&Hn(r),i=i&&Hn(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",Lt(o))},move:function(n,r,i,o){return r=r&&Hn(r),i=i&&Hn(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",Lt(o))},leave:function(e,n){return t.push(e,"leave",Lt(n),function(){e.remove()})},addClass:function(e,n,r){return r=Lt(r),r.addClass=Bt(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=Lt(r),r.removeClass=Bt(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=Lt(i),i.addClass=Bt(i.addClass,n),i.removeClass=Bt(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=Lt(o),o.from=o.from?l(o.from,n):n,o.to=o.to?l(o.to,r):r,o.tempClasses=Bt(o.tempClasses,i||"ng-inline-animate"),t.push(e,"animate",o)}}}]}],Hr=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),1<n.length||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},Lr=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(t,e,n,r,i){function a(t){this.setHost(t);var e=n();this._doneCallbacks=[],this._tick=function(t){var n=r[0];n&&n.hidden?i(t,0,!1):e(t)},this._state=0}return a.chain=function(t,e){function n(){r===t.length?e(!0):t[r](function(t){!1===t?e(!1):(r++,n())})}var r=0;n()},a.all=function(t,e){function n(n){i=i&&n,++r===t.length&&e(i)}var r=0,i=!0;o(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){2===this._state?t():this._doneCallbacks.push(t)},progress:$,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){!1===e?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e);
},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;0===e._state&&(e._state=1,e._tick(function(){e._resolve(t)}))},_resolve:function(t){2!==this._state&&(o(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=2)}},a}]},zr=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o.addClass&&(e.addClass(o.addClass),o.addClass=null),o.removeClass&&(e.removeClass(o.removeClass),o.removeClass=null),o.to&&(e.css(o.to),o.to=null),a||s.complete(),a=!0}),s}var o=r||{};o.$$prepared||(o=P(o)),o.cleanupStyles&&(o.from=o.to=null),o.from&&(e.css(o.from),o.from=null);var a,s=new n;return{start:i,end:i}}}]},Wr=r("$compile");Kt.$inject=["$provide","$$sanitizeUriProvider"];var Gr=/^((?:x|data)[\:\-_])/i,Jr=r("$controller"),Kr=/^(\S+)(\s+as\s+([\w$]+))?$/,Yr=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof Hn&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Zr="application/json",Xr={"Content-Type":Zr+";charset=utf-8"},Qr=/^\[|^\{(?!\{)/,ti={"[":/]$/,"{":/}$/},ei=/^\)\]\}',?\n/,ni=r("$http"),ri=function(t){return function(){throw ni("legacy",t)}},ii=nr.$interpolateMinErr=r("$interpolate");ii.throwNoconcat=function(t){throw ii("noconcat",t)},ii.interr=function(t,e){return ii("interr",t,e.toString())};var oi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ai={http:80,https:443,ftp:21},si=r("$location"),ui={$$html5:!1,$$replace:!1,absUrl:Ce("$$absUrl"),url:function(t){if(g(t))return this.$$url;var e=oi.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:Ce("$$protocol"),host:Ce("$$host"),port:Ce("$$port"),path:Ee("$$path",function(t){return t=null!==t?t.toString():"","/"==t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(x(t)||S(t))t=t.toString(),this.$$search=G(t);else{if(!b(t))throw si("isrcharg");t=P(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:g(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:Ee("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Se,xe,we],function(t){t.prototype=Object.create(ui),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==we||!this.$$html5)throw si("nostate");return this.$$state=g(e)?null:e,this}});var ci=r("$parse"),li=Function.prototype.call,fi=Function.prototype.apply,hi=Function.prototype.bind,pi=ct();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){pi[t]=!0});var $i={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},di=function(t){this.options=t};di.prototype={constructor:di,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;)if(t=this.text.charAt(this.index),'"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var e=t+this.peek(),n=e+this.peek(2),r=pi[e],i=pi[n];pi[t]||r||i?(t=i?n:r?e:t,this.tokens.push({index:this.index,text:t,operator:!0}),this.index+=t.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(t,e){return-1!==e.indexOf(t)},peek:function(t){return t=t||1,this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(t){return t>="0"&&"9">=t&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"	"===t||"\n"===t||"\x0B"===t||" "===t},isIdent:function(t){return t>="a"&&"z">=t||t>="A"&&"Z">=t||"_"===t||"$"===t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){throw n=n||this.index,e=y(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n,ci("lexerr",t,e,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=Gn(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){for(var t=this.index;this.index<this.text.length;){var e=this.text.charAt(this.index);if(!this.isIdent(e)&&!this.isNumber(e))break;this.index++}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index),r=r+o;if(i)"u"===o?(i=this.text.substring(this.index+1,this.index+5),i.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+i+"]"),this.index+=4,n+=String.fromCharCode(parseInt(i,16))):n+=$i[o]||o,i=!1;else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var mi=function(t,e){this.lexer=t,this.options=e};mi.Program="Program",mi.ExpressionStatement="ExpressionStatement",mi.AssignmentExpression="AssignmentExpression",mi.ConditionalExpression="ConditionalExpression",mi.LogicalExpression="LogicalExpression",mi.BinaryExpression="BinaryExpression",mi.UnaryExpression="UnaryExpression",mi.CallExpression="CallExpression",mi.MemberExpression="MemberExpression",mi.Identifier="Identifier",mi.Literal="Literal",mi.ArrayExpression="ArrayExpression",mi.Property="Property",mi.ObjectExpression="ObjectExpression",mi.ThisExpression="ThisExpression",mi.NGValueParameter="NGValueParameter",mi.prototype={ast:function(t){return this.text=t,this.tokens=this.lexer.lex(t),t=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var t=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:mi.Program,body:t}},expressionStatement:function(){return{type:mi.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t=this.expression();this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();return this.expect("=")&&(t={type:mi.AssignmentExpression,left:t,right:this.assignment(),operator:"="}),t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:mi.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:mi.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:mi.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:mi.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:mi.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:mi.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:mi.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:mi.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.constants.hasOwnProperty(this.peek().text)?t=P(this.constants[this.consume().text]):this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:mi.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:mi.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:mi.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){t=[t];for(var e={type:mi.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return e},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.expression());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:mi.Identifier,name:t.text}},constant:function(){return{type:mi.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:mi.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:mi.Property,kind:"init"},this.peek().constant?t.key=this.constant():this.peek().identifier?t.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),t.value=this.expression(),e.push(t)}while(this.expect(","));return this.consume("}"),{type:mi.ObjectExpression,properties:e}},throwError:function(t,e){throw ci("syntax",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw ci("ueoe",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw ci("ueoe",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){t=this.tokens[t];var o=t.text;if(o===e||o===n||o===r||o===i||!(e||n||r||i))return t}return!1},expect:function(t,e,n,r){return(t=this.peek(t,e,n,r))?(this.tokens.shift(),t):!1},constants:{"true":{type:mi.Literal,value:!0},"false":{type:mi.Literal,value:!1},"null":{type:mi.Literal,value:null},undefined:{type:mi.Literal,value:n},"this":{type:mi.ThisExpression}}},qe.prototype={compile:function(t,e){var r=this,i=this.astBuilder.ast(t);this.state={nextId:0,filters:{},expensiveChecks:e,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Pe(i,r.$filter);var a,s="";return this.stage="assign",(a=Fe(i))&&(this.state.computing="assign",s=this.nextId(),this.recurse(a,s),this.return_(s),s="fn.assign="+this.generateFunction("assign","s,v,l")),a=Ie(i.body),r.stage="inputs",o(a,function(t,e){var n="fn"+e;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(t,i),r.return_(i),r.state.inputs.push(n),t.watchId=e}),this.state.computing="fn",this.stage="main",this.recurse(i),s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",s=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",s)(this.$filter,Oe,Te,Ne,Me,Ve,je,De,t),this.state=this.stage=n,s.literal=_e(i),s.constant=i.constant,s},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e+"="+n.generateFunction(e,"s"))}),e.length&&t.push("fn.inputs=["+e.join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,r,i,a,s){var u,c,l,f,h=this;if(i=i||$,!s&&y(t.watchId))e=e||this.nextId(),this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,r,i,a,!0));else switch(t.type){case mi.Program:o(t.body,function(e,r){h.recurse(e.expression,n,n,function(t){c=t}),r!==t.body.length-1?h.current().body.push(c,";"):h.return_(c)});break;case mi.Literal:f=this.escape(t.value),this.assign(e,f),i(f);break;case mi.UnaryExpression:this.recurse(t.argument,n,n,function(t){c=t}),f=t.operator+"("+this.ifDefined(c,0)+")",this.assign(e,f),i(f);break;case mi.BinaryExpression:this.recurse(t.left,n,n,function(t){u=t}),this.recurse(t.right,n,n,function(t){c=t}),f="+"===t.operator?this.plus(u,c):"-"===t.operator?this.ifDefined(u,0)+t.operator+this.ifDefined(c,0):"("+u+")"+t.operator+"("+c+")",this.assign(e,f),i(f);break;case mi.LogicalExpression:e=e||this.nextId(),h.recurse(t.left,e),h.if_("&&"===t.operator?e:h.not(e),h.lazyRecurse(t.right,e)),i(e);break;case mi.ConditionalExpression:e=e||this.nextId(),h.recurse(t.test,e),h.if_(e,h.lazyRecurse(t.alternate,e),h.lazyRecurse(t.consequent,e)),i(e);break;case mi.Identifier:e=e||this.nextId(),r&&(r.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),r.computed=!1,r.name=t.name),Oe(t.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",t.name)),function(){h.if_("inputs"===h.stage||"s",function(){a&&1!==a&&h.if_(h.not(h.nonComputedMember("s",t.name)),h.lazyAssign(h.nonComputedMember("s",t.name),"{}")),h.assign(e,h.nonComputedMember("s",t.name))})},e&&h.lazyAssign(e,h.nonComputedMember("l",t.name))),(h.state.expensiveChecks||Be(t.name))&&h.addEnsureSafeObject(e),i(e);break;case mi.MemberExpression:u=r&&(r.context=this.nextId())||this.nextId(),e=e||this.nextId(),h.recurse(t.object,u,n,function(){h.if_(h.notNull(u),function(){a&&1!==a&&h.addEnsureSafeAssignContext(u),t.computed?(c=h.nextId(),h.recurse(t.property,c),h.getStringValue(c),h.addEnsureSafeMemberName(c),a&&1!==a&&h.if_(h.not(h.computedMember(u,c)),h.lazyAssign(h.computedMember(u,c),"{}")),f=h.ensureSafeObject(h.computedMember(u,c)),h.assign(e,f),r&&(r.computed=!0,r.name=c)):(Oe(t.property.name),a&&1!==a&&h.if_(h.not(h.nonComputedMember(u,t.property.name)),h.lazyAssign(h.nonComputedMember(u,t.property.name),"{}")),f=h.nonComputedMember(u,t.property.name),(h.state.expensiveChecks||Be(t.property.name))&&(f=h.ensureSafeObject(f)),h.assign(e,f),r&&(r.computed=!1,r.name=t.property.name))},function(){h.assign(e,"undefined")}),i(e)},!!a);break;case mi.CallExpression:e=e||this.nextId(),t.filter?(c=h.filter(t.callee.name),l=[],o(t.arguments,function(t){var e=h.nextId();h.recurse(t,e),l.push(e)}),f=c+"("+l.join(",")+")",h.assign(e,f),i(e)):(c=h.nextId(),u={},l=[],h.recurse(t.callee,c,u,function(){h.if_(h.notNull(c),function(){h.addEnsureSafeFunction(c),o(t.arguments,function(t){h.recurse(t,h.nextId(),n,function(t){l.push(h.ensureSafeObject(t))})}),u.name?(h.state.expensiveChecks||h.addEnsureSafeObject(u.context),f=h.member(u.context,u.name,u.computed)+"("+l.join(",")+")"):f=c+"("+l.join(",")+")",f=h.ensureSafeObject(f),h.assign(e,f)},function(){h.assign(e,"undefined")}),i(e)}));break;case mi.AssignmentExpression:if(c=this.nextId(),u={},!Re(t.left))throw ci("lval");this.recurse(t.left,n,u,function(){h.if_(h.notNull(u.context),function(){h.recurse(t.right,c),h.addEnsureSafeObject(h.member(u.context,u.name,u.computed)),h.addEnsureSafeAssignContext(u.context),f=h.member(u.context,u.name,u.computed)+t.operator+c,h.assign(e,f),i(e||f)})},1);break;case mi.ArrayExpression:l=[],o(t.elements,function(t){h.recurse(t,h.nextId(),n,function(t){l.push(t)})}),f="["+l.join(",")+"]",this.assign(e,f),i(f);break;case mi.ObjectExpression:l=[],o(t.properties,function(t){h.recurse(t.value,h.nextId(),n,function(e){l.push(h.escape(t.key.type===mi.Identifier?t.key.name:""+t.key.value)+":"+e)})}),f="{"+l.join(",")+"}",this.assign(e,f),i(f);break;case mi.ThisExpression:this.assign(e,"s"),i("s");break;case mi.NGValueParameter:this.assign(e,"v"),i("v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){return t?(this.current().body.push(t,"=",e,";"),t):void 0},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(!0===t)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){return t+"."+e},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},addEnsureSafeObject:function(t){this.current().body.push(this.ensureSafeObject(t),";")},addEnsureSafeMemberName:function(t){this.current().body.push(this.ensureSafeMemberName(t),";")},addEnsureSafeFunction:function(t){this.current().body.push(this.ensureSafeFunction(t),";")},addEnsureSafeAssignContext:function(t){this.current().body.push(this.ensureSafeAssignContext(t),";")},ensureSafeObject:function(t){return"ensureSafeObject("+t+",text)"},ensureSafeMemberName:function(t){return"ensureSafeMemberName("+t+",text)"},ensureSafeFunction:function(t){return"ensureSafeFunction("+t+",text)"},getStringValue:function(t){this.assign(t,"getStringValue("+t+",text)")},ensureSafeAssignContext:function(t){return"ensureSafeAssignContext("+t+",text)"},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(x(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(S(t))return t.toString();if(!0===t)return"true";if(!1===t)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw ci("esc")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},Ue.prototype={compile:function(t,e){var n=this,r=this.astBuilder.ast(t);this.expression=t,this.expensiveChecks=e,Pe(r,n.$filter);var i,a;(i=Fe(r))&&(a=this.recurse(i)),i=Ie(r.body);var s;i&&(s=[],o(i,function(t,e){var r=n.recurse(t);t.input=r,s.push(r),t.watchId=e}));var u=[];return o(r.body,function(t){u.push(n.recurse(t.expression))}),i=0===r.body.length?function(){}:1===r.body.length?u[0]:function(t,e){var n;return o(u,function(r){n=r(t,e)}),n},a&&(i.assign=function(t,e,n){return a(t,n,e)}),s&&(i.inputs=s),i.literal=_e(r),i.constant=r.constant,i},recurse:function(t,e,r){var i,a,s,u=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case mi.Literal:return this.value(t.value,e);case mi.UnaryExpression:return a=this.recurse(t.argument),this["unary"+t.operator](a,e);case mi.BinaryExpression:return i=this.recurse(t.left),a=this.recurse(t.right),this["binary"+t.operator](i,a,e);case mi.LogicalExpression:return i=this.recurse(t.left),a=this.recurse(t.right),this["binary"+t.operator](i,a,e);case mi.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case mi.Identifier:return Oe(t.name,u.expression),u.identifier(t.name,u.expensiveChecks||Be(t.name),e,r,u.expression);case mi.MemberExpression:return i=this.recurse(t.object,!1,!!r),t.computed||(Oe(t.property.name,u.expression),a=t.property.name),t.computed&&(a=this.recurse(t.property)),t.computed?this.computedMember(i,a,e,r,u.expression):this.nonComputedMember(i,a,u.expensiveChecks,e,r,u.expression);case mi.CallExpression:return s=[],o(t.arguments,function(t){s.push(u.recurse(t))}),t.filter&&(a=this.$filter(t.callee.name)),t.filter||(a=this.recurse(t.callee,!0)),t.filter?function(t,r,i,o){for(var u=[],c=0;c<s.length;++c)u.push(s[c](t,r,i,o));return t=a.apply(n,u,o),e?{context:n,name:n,value:t}:t}:function(t,n,r,i){var o,c=a(t,n,r,i);if(null!=c.value){Te(c.context,u.expression),Ne(c.value,u.expression),o=[];for(var l=0;l<s.length;++l)o.push(Te(s[l](t,n,r,i),u.expression));o=Te(c.value.apply(c.context,o),u.expression)}return e?{value:o}:o};case mi.AssignmentExpression:return i=this.recurse(t.left,!0,1),a=this.recurse(t.right),function(t,n,r,o){var s=i(t,n,r,o);return t=a(t,n,r,o),Te(s.value,u.expression),Ve(s.context),s.context[s.name]=t,e?{value:t}:t};case mi.ArrayExpression:return s=[],o(t.elements,function(t){s.push(u.recurse(t))}),function(t,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](t,n,r,i));return e?{value:o}:o};case mi.ObjectExpression:return s=[],o(t.properties,function(t){s.push({key:t.key.type===mi.Identifier?t.key.name:""+t.key.value,value:u.recurse(t.value)})}),function(t,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(t,n,r,i);return e?{value:o}:o};case mi.ThisExpression:return function(t){return e?{value:t}:t};case mi.NGValueParameter:return function(t,n,r,i){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){return n=t(n,r,i,o),n=y(n)?+n:0,e?{value:n}:n}},"unary-":function(t,e){return function(n,r,i,o){return n=t(n,r,i,o),n=y(n)?-n:0,e?{value:n}:n}},"unary!":function(t,e){return function(n,r,i,o){return n=!t(n,r,i,o),e?{value:n}:n}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a);return r=e(r,i,o,a),s=De(s,r),n?{value:s}:s}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a);return r=e(r,i,o,a),s=(y(s)?s:0)-(y(r)?r:0),n?{value:s}:s}},"binary*":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)*e(r,i,o,a),n?{value:r}:r}},"binary/":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)/e(r,i,o,a),n?{value:r}:r}},"binary%":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)%e(r,i,o,a),n?{value:r}:r}},"binary===":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)===e(r,i,o,a),n?{value:r}:r}},"binary!==":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)!==e(r,i,o,a),n?{value:r}:r}},"binary==":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)==e(r,i,o,a),n?{value:r}:r}},"binary!=":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)!=e(r,i,o,a),n?{value:r}:r}},"binary<":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)<e(r,i,o,a),n?{value:r}:r}},"binary>":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)>e(r,i,o,a),n?{value:r}:r}},"binary<=":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)<=e(r,i,o,a),n?{value:r}:r}},"binary>=":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)>=e(r,i,o,a),n?{value:r}:r}},"binary&&":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)&&e(r,i,o,a),n?{value:r}:r}},"binary||":function(t,e,n){return function(r,i,o,a){return r=t(r,i,o,a)||e(r,i,o,a),n?{value:r}:r}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){return i=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s),r?{value:i}:i}},value:function(t,e){return function(){return e?{context:n,name:n,value:t}:t}},identifier:function(t,e,r,i,o){return function(a,s,u,c){return a=s&&t in s?s:a,i&&1!==i&&a&&!a[t]&&(a[t]={}),s=a?a[t]:n,e&&Te(s,o),r?{context:a,name:t,value:s}:s}},computedMember:function(t,e,n,r,i){return function(o,a,s,u){var c,l,f=t(o,a,s,u);return null!=f&&(c=e(o,a,s,u),c=Me(c),Oe(c,i),r&&1!==r&&(Ve(f),f&&!f[c]&&(f[c]={})),l=f[c],Te(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(t,e,r,i,o,a){return function(s,u,c,l){return s=t(s,u,c,l),o&&1!==o&&(Ve(s),s&&!s[e]&&(s[e]={})),u=null!=s?s[e]:n,(r||Be(e))&&Te(u,a),i?{context:s,name:e,value:u}:u}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}};var vi=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n,this.ast=new mi(this.lexer),this.astCompiler=n.csp?new Ue(this.ast,e):new qe(this.ast,e)};vi.prototype={constructor:vi,parse:function(t){return this.astCompiler.compile(t,this.options.expensiveChecks)}};var gi=Object.prototype.valueOf,yi=r("$sce"),bi={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Wr=r("$compile"),wi=e.createElement("a"),xi=an(t.location.href);cn.$inject=["$document"],fn.$inject=["$provide"];var Si=22,Ci=".",Ei="0";mn.$inject=["$locale"],vn.$inject=["$locale"];var ki={yyyy:xn("FullYear",4),yy:xn("FullYear",2,0,!0),y:xn("FullYear",1),MMMM:Sn("Month"),MMM:Sn("Month",!0),MM:xn("Month",2,1),M:xn("Month",1,1),dd:xn("Date",2),d:xn("Date",1),HH:xn("Hours",2),H:xn("Hours",1),hh:xn("Hours",2,-12),h:xn("Hours",1,-12),mm:xn("Minutes",2),m:xn("Minutes",1),ss:xn("Seconds",2),s:xn("Seconds",1),sss:xn("Milliseconds",3),EEEE:Sn("Day"),EEE:Sn("Day",!0),a:function(t,e){return 12>t.getHours()?e.AMPMS[0]:e.AMPMS[1]},Z:function(t,e,n){return t=-1*n,t=(t>=0?"+":"")+(wn(Math[t>0?"floor":"ceil"](t/60),2)+wn(Math.abs(t%60),2))},ww:En(2),w:En(1),G:kn,GG:kn,GGG:kn,GGGG:function(t,e){return 0>=t.getFullYear()?e.ERANAMES[0]:e.ERANAMES[1]}},Ai=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Oi=/^\-?\d+$/;An.$inject=["$locale"];var Mi=m(Gn),Ti=m(Kn);Tn.$inject=["$parse"];var Ni=m({restrict:"E",compile:function(t,e){return e.href||e.xlinkHref?void 0:function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Qn.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),Vi={};o(Tr,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!=t){var r=Yt("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),Vi[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Vr,function(t,e){Vi[e]=function(){return{priority:100,link:function(t,n,r){return"ngPattern"===e&&"/"==r.ngPattern.charAt(0)&&(n=r.ngPattern.match(Wn))?void r.$set("ngPattern",new RegExp(n[1],n[2])):void t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=Yt("ng-"+t);Vi[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===Qn.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){e?(i.$set(a,e),Bn&&o&&r.prop(o,i[a])):"href"===t&&i.$set(a,null)})}}}});var ji={$addControl:$,$$renameControl:function(t,e){t.$name=e},$removeControl:$,$setValidity:$,$setDirty:$,$setPristine:$,$setSubmitted:$};Vn.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Di=function(t){return["$timeout","$parse",function(e,r){function i(t){return""===t?r('this[""]').assign:r(t).assign||$}return{name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:Vn,compile:function(r,o){r.addClass(mo).addClass(po);var a=o.name?"name":t&&o.ngForm?"ngForm":!1;return{pre:function(t,r,o,s){var u=s[0];if(!("action"in o)){var c=function(e){t.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),e.preventDefault()};r[0].addEventListener("submit",c,!1),r.on("$destroy",function(){e(function(){r[0].removeEventListener("submit",c,!1)},0,!1)})}(s[1]||u.$$parentForm).$addControl(u);var f=a?i(u.$name):$;a&&(f(t,u),o.$observe(a,function(e){u.$name!==e&&(f(t,n),u.$$parentForm.$$renameControl(u,e),(f=i(u.$name))(t,u))})),r.on("$destroy",function(){u.$$parentForm.$removeControl(u),f(t,n),l(u,ji)})}}}}}]},Pi=Di(),Ii=Di(!0),Ri=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Fi=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,_i=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,qi=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Ui=/^(\d{4})-(\d{2})-(\d{2})$/,Bi=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Hi=/^(\d{4})-W(\d\d)$/,Li=/^(\d{4})-(\d\d)$/,zi=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Wi=ct();o(["date","datetime-local","month","time","week"],function(t){Wi[t]=!0});var Gi={text:function(t,e,n,r,i,o){Dn(t,e,n,r,i,o),jn(r)},date:In("date",Ui,Pn(Ui,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":In("datetimelocal",Bi,Pn(Bi,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:In("time",zi,Pn(zi,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:In("week",Hi,function(t,e){if(C(t))return t;if(x(t)){Hi.lastIndex=0;var n=Hi.exec(t);if(n){var r=+n[1],i=+n[2],o=n=0,a=0,s=0,u=Cn(r),i=7*(i-1);return e&&(n=e.getHours(),o=e.getMinutes(),a=e.getSeconds(),s=e.getMilliseconds()),new Date(r,0,u.getDate()+i,n,o,a,s)}}return NaN},"yyyy-Www"),month:In("month",Li,Pn(Li,["yyyy","MM"]),"yyyy-MM"),number:function(t,e,r,i,o,a){if(Rn(t,e,r,i),Dn(t,e,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(t){return i.$isEmpty(t)?null:qi.test(t)?parseFloat(t):n}),i.$formatters.push(function(t){if(!i.$isEmpty(t)){if(!S(t))throw yo("numfmt",t);t=t.toString()}return t}),y(r.min)||r.ngMin){var s;i.$validators.min=function(t){return i.$isEmpty(t)||g(s)||t>=s},r.$observe("min",function(t){y(t)&&!S(t)&&(t=parseFloat(t,10)),s=S(t)&&!isNaN(t)?t:n,i.$validate()})}if(y(r.max)||r.ngMax){var u;i.$validators.max=function(t){return i.$isEmpty(t)||g(u)||u>=t},r.$observe("max",function(t){y(t)&&!S(t)&&(t=parseFloat(t,10)),u=S(t)&&!isNaN(t)?t:n,i.$validate()})}},url:function(t,e,n,r,i,o){Dn(t,e,n,r,i,o),jn(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||Fi.test(n)}},email:function(t,e,n,r,i,o){Dn(t,e,n,r,i,o),jn(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||_i.test(n)}},radio:function(t,e,n,r){g(n.name)&&e.attr("name",++rr),e.on("click",function(t){e[0].checked&&r.$setViewValue(n.value,t&&t.type)}),r.$render=function(){e[0].checked=n.value==r.$viewValue},n.$observe("value",r.$render)},checkbox:function(t,e,n,r,i,o,a,s){var u=Fn(s,t,"ngTrueValue",n.ngTrueValue,!0),c=Fn(s,t,"ngFalseValue",n.ngFalseValue,!1);e.on("click",function(t){r.$setViewValue(e[0].checked,t&&t.type)}),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return!1===t},r.$formatters.push(function(t){return R(t,u)}),r.$parsers.push(function(t){return t?u:c})},hidden:$,button:$,submit:$,reset:$,file:$},Ji=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Gi[Gn(a.type)]||Gi.text)(i,o,a,s[0],e,t,n,r)}}}}],Ki=/^(true|false|\d+)$/,Yi=function(){return{restrict:"A",priority:100,compile:function(t,e){return Ki.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}},Zi=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=g(t)?"":t})}}}}],Xi=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){n=t(r.attr(i.$attr.ngBindTemplate)),e.$$addBindingInfo(r,n.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){
r.textContent=g(t)?"":t})}}}}],Qi=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(t){return(t||"").toString()});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){r.html(t.getTrustedHtml(o(e))||"")})}}}}],to=m({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),eo=_n("",!0),no=_n("Odd",0),ro=_n("Even",1),io=Nn({compile:function(t,e){e.$set("ngCloak",n),t.removeClass("ng-cloak")}}),oo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ao={},so={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=Yt("ng-"+t);ao[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e],null,!0);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};so[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var uo=["$animate",function(t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=ut(s.clone),t.leave(c).then(function(){c=null}),s=null))})}}}],co=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:nr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,$=0,d=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){h=null}),h=p,p=null)};r.$watch(o,function(o){var u=function(){!y(s)||s&&!r.$eval(s)||e()},h=++$;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&h===$){var e=r.$new();c.template=t,t=l(e,function(t){d(),n.enter(t,null,i).then(u)}),f=e,p=t,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h!==$||(d(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(d(),c.template=null)})}}}}],lo=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){/SVG/.test(r[0].toString())?(r.empty(),t($t(o.template,e).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),t(r.contents())(n))}}}],fo=Nn({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),ho=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,r,i){var a=e.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?sr(a):a;i.$parsers.push(function(t){if(!g(t)){var e=[];return t&&o(t.split(u),function(t){t&&e.push(s?sr(t):t)}),e}}),i.$formatters.push(function(t){return or(t)?t.join(a):n}),i.$isEmpty=function(t){return!t||!t.length}}}},po="ng-valid",$o="ng-invalid",mo="ng-pristine",vo="ng-dirty",go="ng-pending",yo=r("ngModel"),bo=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(t,e,r,i,a,s,u,c,l,f){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(t),this.$$parentForm=ji;var h,p=a(r.ngModel),d=p.assign,m=p,v=d,b=null,w=this;this.$$setOptions=function(t){if((w.$options=t)&&t.getterSetter){var e=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");m=function(t){var n=p(t);return E(n)&&(n=e(t)),n},v=function(t,e){E(p(t))?n(t,{$$$p:w.$modelValue}):d(t,w.$modelValue)}}else if(!p.assign)throw yo("nonassign",r.ngModel,z(i))},this.$render=$,this.$isEmpty=function(t){return g(t)||""===t||null===t||t!==t};var x=0;qn({ctrl:this,$element:i,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]},$animate:s}),this.$setPristine=function(){w.$dirty=!1,w.$pristine=!0,s.removeClass(i,vo),s.addClass(i,mo)},this.$setDirty=function(){w.$dirty=!0,w.$pristine=!1,s.removeClass(i,mo),s.addClass(i,vo),w.$$parentForm.$setDirty()},this.$setUntouched=function(){w.$touched=!1,w.$untouched=!0,s.setClass(i,"ng-untouched","ng-touched")},this.$setTouched=function(){w.$touched=!0,w.$untouched=!1,s.setClass(i,"ng-touched","ng-untouched")},this.$rollbackViewValue=function(){u.cancel(b),w.$viewValue=w.$$lastCommittedViewValue,w.$render()},this.$validate=function(){if(!S(w.$modelValue)||!isNaN(w.$modelValue)){var t=w.$$rawModelValue,e=w.$valid,r=w.$modelValue,i=w.$options&&w.$options.allowInvalid;w.$$runValidators(t,w.$$lastCommittedViewValue,function(o){i||e===o||(w.$modelValue=o?t:n,w.$modelValue!==r&&w.$$writeModelToScope())})}},this.$$runValidators=function(t,e,r){function i(){var n=!0;return o(w.$validators,function(r,i){var o=r(t,e);n=n&&o,s(i,o)}),n?!0:(o(w.$asyncValidators,function(t,e){s(e,null)}),!1)}function a(){var r=[],i=!0;o(w.$asyncValidators,function(o,a){var u=o(t,e);if(!u||!E(u.then))throw yo("nopromise",u);s(a,n),r.push(u.then(function(){s(a,!0)},function(t){i=!1,s(a,!1)}))}),r.length?l.all(r).then(function(){u(i)},$):u(!0)}function s(t,e){c===x&&w.$setValidity(t,e)}function u(t){c===x&&r(t)}x++;var c=x;(function(){var t=w.$$parserName||"parse";return g(h)?(s(t,null),!0):(h||(o(w.$validators,function(t,e){s(e,null)}),o(w.$asyncValidators,function(t,e){s(e,null)})),s(t,h),h)})()&&i()?a():u(!1)},this.$commitViewValue=function(){var t=w.$viewValue;u.cancel(b),(w.$$lastCommittedViewValue!==t||""===t&&w.$$hasNativeValidators)&&(w.$$lastCommittedViewValue=t,w.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){var e=w.$$lastCommittedViewValue;if(h=g(e)?n:!0)for(var r=0;r<w.$parsers.length;r++)if(e=w.$parsers[r](e),g(e)){h=!1;break}S(w.$modelValue)&&isNaN(w.$modelValue)&&(w.$modelValue=m(t));var i=w.$modelValue,o=w.$options&&w.$options.allowInvalid;w.$$rawModelValue=e,o&&(w.$modelValue=e,w.$modelValue!==i&&w.$$writeModelToScope()),w.$$runValidators(e,w.$$lastCommittedViewValue,function(t){o||(w.$modelValue=t?e:n,w.$modelValue!==i&&w.$$writeModelToScope())})},this.$$writeModelToScope=function(){v(t,w.$modelValue),o(w.$viewChangeListeners,function(t){try{t()}catch(n){e(n)}})},this.$setViewValue=function(t,e){w.$viewValue=t,w.$options&&!w.$options.updateOnDefault||w.$$debounceViewValueCommit(e)},this.$$debounceViewValueCommit=function(e){var n=0,r=w.$options;r&&y(r.debounce)&&(r=r.debounce,S(r)?n=r:S(r[e])?n=r[e]:S(r["default"])&&(n=r["default"])),u.cancel(b),n?b=u(function(){w.$commitViewValue()},n):c.$$phase?w.$commitViewValue():t.$apply(function(){w.$commitViewValue()})},t.$watch(function(){var e=m(t);if(e!==w.$modelValue&&(w.$modelValue===w.$modelValue||e===e)){w.$modelValue=w.$$rawModelValue=e,h=n;for(var r=w.$formatters,i=r.length,o=e;i--;)o=r[i](o);w.$viewValue!==o&&(w.$viewValue=w.$$lastCommittedViewValue=o,w.$render(),w.$$runValidators(e,o,$))}return e})}],wo=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:bo,priority:1,compile:function(e){return e.addClass(mo).addClass("ng-untouched").addClass(po),{pre:function(t,e,n,r){var i=r[0];e=r[1]||i.$$parentForm,i.$$setOptions(r[2]&&r[2].$options),e.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(t){o.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(n){o.$touched||(t.$$phase?e.$evalAsync(o.$setTouched):e.$apply(o.$setTouched))})}}}}}],xo=/(\s+|^)default(\s+|$)/,So=function(){return{restrict:"A",controller:["$scope","$attrs",function(t,e){var n=this;this.$options=P(t.$eval(e.ngModelOptions)),y(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=sr(this.$options.updateOn.replace(xo,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Co=Nn({terminal:!0,priority:1e3}),Eo=r("ngOptions"),ko=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Ao=["$compile","$parse",function(t,n){function r(t,e,r){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var s=t.match(ko);if(!s)throw Eo("iexp",t,z(e));var u=s[5]||s[7],c=s[6];t=/ as /.test(s[0])&&s[1];var l=s[9];e=n(s[2]?s[1]:u);var f=t&&n(t)||e,h=l&&n(l),p=l?function(t,e){return h(r,e)}:function(t){return Rt(t)},$=function(t,e){return p(t,b(t,e))},d=n(s[2]||s[1]),m=n(s[3]||""),v=n(s[4]||""),g=n(s[8]),y={},b=c?function(t,e){return y[c]=e,y[u]=t,y}:function(t){return y[u]=t,y};return{trackBy:l,getTrackByValue:$,getWatchables:n(g,function(t){var e=[];t=t||[];for(var n=a(t),i=n.length,o=0;i>o;o++){var u=t===n?o:n[o],c=b(t[u],u),u=p(t[u],c);e.push(u),(s[2]||s[1])&&(u=d(r,c),e.push(u)),s[4]&&(c=v(r,c),e.push(c))}return e}),getOptions:function(){for(var t=[],e={},n=g(r)||[],i=a(n),s=i.length,u=0;s>u;u++){var c=n===i?u:i[u],h=b(n[c],c),y=f(r,h),c=p(y,h),w=d(r,h),x=m(r,h),h=v(r,h),y=new o(c,y,w,x,h);t.push(y),e[c]=y}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[$(t)]},getViewValueFromOption:function(t){return l?nr.copy(t.viewValue):t.viewValue}}}}}var a=e.createElement("option"),s=e.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=$},post:function(e,n,i,u){function c(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),t.value!==e.value&&(e.value=t.selectValue)}function l(t,e,n,r){return e&&Gn(e.nodeName)===n?n=e:(n=r.cloneNode(!1),e?t.insertBefore(n,e):t.appendChild(n)),n}function f(t){for(var e;t;)e=t.nextSibling,Tt(t),t=e}function h(t){var e=d&&d[0],n=w&&w[0];if(e||n)for(;t&&(t===e||t===n||8===t.nodeType||"option"===j(t)&&""===t.value);)t=t.nextSibling;return t}function p(){var t=x&&m.readValue();x=S.getOptions();var e={},r=n[0].firstChild;if(b&&n.prepend(d),r=h(r),x.items.forEach(function(t){var i,o;t.group?(i=e[t.group],i||(i=l(n[0],r,"optgroup",s),r=i.nextSibling,i.label=t.group,i=e[t.group]={groupElement:i,currentOptionElement:i.firstChild}),o=l(i.groupElement,i.currentOptionElement,"option",a),c(t,o),i.currentOptionElement=o.nextSibling):(o=l(n[0],r,"option",a),c(t,o),r=o.nextSibling)}),Object.keys(e).forEach(function(t){f(e[t].currentOptionElement)}),f(r),$.$render(),!$.$isEmpty(t)){var i=m.readValue();(S.trackBy||v?R(t,i):t===i)||($.$setViewValue(i),$.$render())}}var $=u[1];if($){var d,m=u[0],v=i.multiple;u=0;for(var g=n.children(),y=g.length;y>u;u++)if(""===g[u].value){d=g.eq(u);break}var b=!!d,w=Hn(a.cloneNode(!1));w.val("?");var x,S=r(i.ngOptions,n,e);v?($.$isEmpty=function(t){return!t||0===t.length},m.writeValue=function(t){x.items.forEach(function(t){t.element.selected=!1}),t&&t.forEach(function(t){(t=x.getOptionFromViewValue(t))&&!t.disabled&&(t.element.selected=!0)})},m.readValue=function(){var t=n.val()||[],e=[];return o(t,function(t){(t=x.selectValueMap[t])&&!t.disabled&&e.push(x.getViewValueFromOption(t))}),e},S.trackBy&&e.$watchCollection(function(){return or($.$viewValue)?$.$viewValue.map(function(t){return S.getTrackByValue(t)}):void 0},function(){$.$render()})):(m.writeValue=function(t){var e=x.getOptionFromViewValue(t);e&&!e.disabled?(n[0].value!==e.selectValue&&(w.remove(),b||d.remove(),n[0].value=e.selectValue,e.element.selected=!0),e.element.setAttribute("selected","selected")):null===t||b?(w.remove(),b||n.prepend(d),n.val(""),d.prop("selected",!0),d.attr("selected",!0)):(b||d.remove(),n.prepend(w),n.val("?"),w.prop("selected",!0),w.attr("selected",!0))},m.readValue=function(){var t=x.selectValueMap[n.val()];return t&&!t.disabled?(b||d.remove(),w.remove(),x.getViewValueFromOption(t)):null},S.trackBy&&e.$watch(function(){return S.getTrackByValue($.$viewValue)},function(){$.$render()})),b?(d.remove(),t(d)(e),d.removeClass("ng-scope")):d=Hn(a.cloneNode(!1)),p(),e.$watchCollection(S.getWatchables,p)}}}}}],Oo=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},m={},v=e.startSymbol(),y=e.endSymbol(),b=v+f+"-"+p+y,w=nr.noop;o(u,function(t,e){var n=i.exec(e);n&&(n=(n[1]?"-":"")+Gn(n[2]),d[n]=s.attr(u.$attr[e]))}),o(d,function(t,n){m[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=isNaN(r);i||r in d||(r=t.pluralCat(r-p)),r===l||i&&S(l)&&isNaN(l)||(w(),i=m[r],g(i)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=$,c()):w=a.$watch(i,c),l=r)})}}}],Mo=["$parse","$animate",function(t,a){var s=r("ngRepeat"),u=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,c){var l=c.ngRepeat,f=e.createComment(" end ngRepeat: "+l+" "),h=l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw s("iexp",l);var p=h[1],$=h[2],d=h[3],m=h[4],h=p.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!h)throw s("iidexp",p);var v=h[3]||h[1],g=h[2];if(d&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(d)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(d)))throw s("badident",d);var y,b,w,x,S={$id:Rt};return m?y=t(m):(w=function(t,e){return Rt(e)},x=function(t){return t}),function(t,e,r,c,h){y&&(b=function(e,n,r){return g&&(S[g]=e),S[v]=n,S.$index=r,y(t,S)});var p=ct();t.$watchCollection($,function(r){var c,$,m,y,S,C,E,k,A,O,M=e[0],T=ct();if(d&&(t[d]=r),i(r))k=r,$=b||w;else for(O in $=b||x,k=[],r)Jn.call(r,O)&&"$"!==O.charAt(0)&&k.push(O);for(y=k.length,O=Array(y),c=0;y>c;c++)if(S=r===k?c:k[c],C=r[S],E=$(S,C,c),p[E])A=p[E],delete p[E],T[E]=A,O[c]=A;else{if(T[E])throw o(O,function(t){t&&t.scope&&(p[t.id]=t)}),s("dupes",l,E,C);O[c]={id:E,scope:n,clone:n},T[E]=!0}for(m in p){if(A=p[m],E=ut(A.clone),a.leave(E),E[0].parentNode)for(c=0,$=E.length;$>c;c++)E[c].$$NG_REMOVED=!0;A.scope.$destroy()}for(c=0;y>c;c++)if(S=r===k?c:k[c],C=r[S],A=O[c],A.scope){m=M;do m=m.nextSibling;while(m&&m.$$NG_REMOVED);A.clone[0]!=m&&a.move(ut(A.clone),null,M),M=A.clone[A.clone.length-1],u(A.scope,c,v,C,g,S,y)}else h(function(t,e){A.scope=e;var n=f.cloneNode(!1);t[t.length++]=n,a.enter(t,null,M),M=n,A.clone=t,T[A.id]=A,u(A.scope,c,v,C,g,S,y)});p=T})}}}}],To=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],No=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Vo=Nn(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),jo=["$animate",function(t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=[],u=[],c=[],l=[],f=function(t,e){return function(){t.splice(e,1)}};n.$watch(i.ngSwitch||i.on,function(n){var r,i;for(r=0,i=c.length;i>r;++r)t.cancel(c[r]);for(r=c.length=0,i=l.length;i>r;++r){var h=ut(u[r].clone);l[r].$destroy(),(c[r]=t.leave(h)).then(f(c,r))}u.length=0,l.length=0,(s=a.cases["!"+n]||a.cases["?"])&&o(s,function(n){n.transclude(function(r,i){l.push(i);var o=n.element;r[r.length++]=e.createComment(" end ngSwitchWhen: "),u.push({clone:r}),t.enter(r,o.parent(),o)})})})}}}],Do=Nn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),Po=Nn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Io=Nn({restrict:"EAC",link:function(t,e,n,i,o){if(!o)throw r("ngTransclude")("orphan",z(e));o(function(t){e.empty(),e.append(t)})}}),Ro=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){"text/ng-template"==n.type&&t.put(n.id,e[0].text)}}}],Fo={$setViewValue:$,$render:$},_o=["$element","$scope","$attrs",function(t,r,i){var o=this,a=new Ft;o.ngModelCtrl=Fo,o.unknownOption=Hn(e.createElement("option")),o.renderUnknownOption=function(e){e="? "+Rt(e)+" ?",o.unknownOption.val(e),t.prepend(o.unknownOption),t.val(e)},r.$on("$destroy",function(){o.renderUnknownOption=$}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),t.val()},o.writeValue=function(e){o.hasOption(e)?(o.removeUnknownOption(),t.val(e),""===e&&o.emptyOption.prop("selected",!0)):null==e&&o.emptyOption?(o.removeUnknownOption(),t.val("")):o.renderUnknownOption(e)},o.addOption=function(t,e){if(8!==e[0].nodeType){at(t,'"option value"'),""===t&&(o.emptyOption=e);var n=a.get(t)||0;a.put(t,n+1),o.ngModelCtrl.$render(),e[0].hasAttribute("selected")&&(e[0].selected=!0)}},o.removeOption=function(t){var e=a.get(t);e&&(1===e?(a.remove(t),""===t&&(o.emptyOption=n)):a.put(t,e-1))},o.hasOption=function(t){return!!a.get(t)},o.registerOption=function(t,e,n,r,i){if(r){var a;n.$observe("value",function(t){y(a)&&o.removeOption(a),a=t,o.addOption(t,e)})}else i?t.$watch(i,function(t,r){n.$set("value",t),r!==t&&o.removeOption(r),o.addOption(t,e)}):o.addOption(n.value,e);e.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],qo=function(){return{restrict:"E",require:["select","?ngModel"],controller:_o,priority:1,link:{pre:function(t,e,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,e.on("change",function(){t.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var t=[];return o(e.find("option"),function(e){e.selected&&t.push(e.value)}),t},a.writeValue=function(t){var n=new Ft(t);o(e.find("option"),function(t){t.selected=y(n.get(t.value))})};var s,u=NaN;t.$watch(function(){u!==i.$viewValue||R(s,i.$viewValue)||(s=I(i.$viewValue),i.$render()),u=i.$viewValue}),i.$isEmpty=function(t){return!t||0===t.length}}}},post:function(t,e,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}}},Uo=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){if(y(n.value))var r=t(n.value,!0);else{var i=t(e.text(),!0);i||n.$set("value",e.text())}return function(t,e,n){var o=e.parent();(o=o.data("$selectController")||o.parent().data("$selectController"))&&o.registerOption(t,e,n,r,i)}}}}],Bo=m({restrict:"E",terminal:!1}),Ho=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},Lo=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(t){if(x(t)&&0<t.length&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp",s,t,z(e));a=t||n,o.$validate()}),o.$validators.pattern=function(t,e){return o.$isEmpty(e)||g(a)||a.test(e)}}}}},zo=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){t=h(t),i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(t,e){return 0>i||r.$isEmpty(e)||e.length<=i}}}}},Wo=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=h(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};t.angular.bootstrap?t.console&&console.log("WARNING: Tried to load angular more than once."):(rt(),ft(nr),nr.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return-1==e?0:t.length-e-1}t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,r){var i=0|t,o=r;return n===o&&(o=Math.min(e(t),3)),Math.pow(10,o),1==i&&0==o?"one":"other"}})}]),Hn(e).ready(function(){X(e,Q)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
!function(e,r,t){"use strict";function n(e){return null!=e&&""!==e&&"hasOwnProperty"!==e&&i.test("."+e)}function a(e,a){if(!n(a))throw s("badmember",'Dotted member path "@{0}" is invalid.',a);for(var o=a.split("."),i=0,u=o.length;u>i&&r.isDefined(e);i++){var c=o[i];e=null!==e?e[c]:t}return e}function o(e,t){t=t||{},r.forEach(t,function(e,r){delete t[r]});for(var n in e)!e.hasOwnProperty(n)||"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t}var s=r.$$minErr("$resource"),i=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;r.module("ngResource",["ng"]).provider("$resource",function(){var e=/^https?:\/\/[^\/]*/,n=this;this.defaults={stripTrailingSlashes:!0,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}},this.$get=["$http","$log","$q",function(i,u,c){function l(e){return p(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function p(e,r){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,r?"%20":"+")}function f(e,r){this.template=e,this.defaults=g({},n.defaults,r),this.urlParams={}}function h(e,l,p,w){function y(e,r){var t={};return r=g({},l,r),m(r,function(r,n){v(r)&&(r=r()),t[n]=r&&r.charAt&&"@"==r.charAt(0)?a(e,r.substr(1)):r}),t}function b(e){return e.resource}function E(e){o(e||{},this)}var A=new f(e,w);return p=g({},n.defaults.actions,p),E.prototype.toJSON=function(){var e=g({},this);return delete e.$promise,delete e.$resolved,e},m(p,function(e,n){var a=/^(POST|PUT|PATCH)$/i.test(e.method);E[n]=function(l,p,f,h){var w,P,T,O={};switch(arguments.length){case 4:T=h,P=f;case 3:case 2:if(!v(p)){O=l,w=p,P=f;break}if(v(l)){P=l,T=p;break}P=p,T=f;case 1:v(l)?P=l:a?w=l:O=l;break;case 0:break;default:throw s("badargs","Expected up to 4 arguments [params, data, success, error], got {0} arguments",arguments.length)}var R=this instanceof E,x=R?w:e.isArray?[]:new E(w),k={},D=e.interceptor&&e.interceptor.response||b,S=e.interceptor&&e.interceptor.responseError||t;m(e,function(e,t){switch(t){default:k[t]=$(e);break;case"params":case"isArray":case"interceptor":break;case"timeout":e&&!r.isNumber(e)&&u.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests.\n  If you need support for cancellable $resource actions, you should upgrade to version 1.5 or higher.")}}),a&&(k.data=w),A.setUrlParams(k,g({},y(w,e.params||{}),O),e.url);var j=i(k).then(function(t){var a=t.data,i=x.$promise;if(a){if(r.isArray(a)!==!!e.isArray)throw s("badcfg","Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})",n,e.isArray?"array":"object",r.isArray(a)?"array":"object",k.method,k.url);e.isArray?(x.length=0,m(a,function(e){"object"==typeof e?x.push(new E(e)):x.push(e)})):(o(a,x),x.$promise=i)}return x.$resolved=!0,t.resource=x,t},function(e){return x.$resolved=!0,(T||d)(e),c.reject(e)});return j=j.then(function(e){var r=D(e);return(P||d)(r,e.headers),r},S),R?j:(x.$promise=j,x.$resolved=!1,x)},E.prototype["$"+n]=function(e,r,t){v(e)&&(t=r,r=e,e={});var a=E[n].call(this,e,this,r,t);return a.$promise||a}}),E.bind=function(r){return h(e,g({},l,r),p)},E}var d=r.noop,m=r.forEach,g=r.extend,$=r.copy,v=r.isFunction;return f.prototype={setUrlParams:function(t,n,a){var o,i,u=this,c=a||u.template,p="",f=u.urlParams={};m(c.split(/\W/),function(e){if("hasOwnProperty"===e)throw s("badname","hasOwnProperty is not a valid parameter name.");!new RegExp("^\\d+$").test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(c)&&(f[e]=!0)}),c=c.replace(/\\:/g,":"),c=c.replace(e,function(e){return p=e,""}),n=n||{},m(u.urlParams,function(e,t){o=n.hasOwnProperty(t)?n[t]:u.defaults[t],r.isDefined(o)&&null!==o?(i=l(o),c=c.replace(new RegExp(":"+t+"(\\W|$)","g"),function(e,r){return i+r})):c=c.replace(new RegExp("(/?):"+t+"(\\W|$)","g"),function(e,r,t){return"/"==t.charAt(0)?t:r+t})}),u.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/"),c=c.replace(/\/\.(?=\w+($|\?))/,"."),t.url=p+c.replace(/\/\\\./,"/."),m(n,function(e,r){u.urlParams[r]||(t.params=t.params||{},t.params[r]=e)})}},h}]})}(window,window.angular);
(function(){function n(n,t){if(n!==t){var r=null===n,e=n===b,u=n===n,i=null===t,o=t===b,f=t===t;if(n>t&&!i||!u||r&&!o&&f||e&&f)return 1;if(t>n&&!r||!f||i&&!e&&u||o&&u)return-1}return 0}function t(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function r(n,t,r){if(t!==t)return h(n,r);for(var e=r-1,u=n.length;++e<u;)if(n[e]===t)return e;return-1}function e(n){return"function"==typeof n||!1}function u(n){return null==n?"":n+""}function i(n,t){for(var r=-1,e=n.length;++r<e&&t.indexOf(n.charAt(r))>-1;);return r}function o(n,t){for(var r=n.length;r--&&t.indexOf(n.charAt(r))>-1;);return r}function f(t,r){return n(t.criteria,r.criteria)||t.index-r.index}function a(t,r,e){for(var u=-1,i=t.criteria,o=r.criteria,f=i.length,a=e.length;++u<f;){var c=n(i[u],o[u]);if(c){if(u>=a)return c;var l=e[u];return c*("asc"===l||l===!0?1:-1)}}return t.index-r.index}function c(n){return qn[n]}function l(n){return Mn[n]}function s(n,t,r){return t?n=Vn[n]:r&&(n=Yn[n]),"\\"+n}function p(n){return"\\"+Yn[n]}function h(n,t,r){for(var e=n.length,u=t+(r?0:-1);r?u--:++u<e;){var i=n[u];if(i!==i)return u}return-1}function v(n){return!!n&&"object"==typeof n}function _(n){return 160>=n&&n>=9&&13>=n||32==n||160==n||5760==n||6158==n||n>=8192&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n)}function g(n,t){for(var r=-1,e=n.length,u=-1,i=[];++r<e;)n[r]===t&&(n[r]=D,i[++u]=r);return i}function y(n,t){for(var r,e=-1,u=n.length,i=-1,o=[];++e<u;){var f=n[e],a=t?t(f,e,n):f;e&&r===a||(r=a,o[++i]=f)}return o}function d(n){for(var t=-1,r=n.length;++t<r&&_(n.charCodeAt(t)););return t}function w(n){for(var t=n.length;t--&&_(n.charCodeAt(t)););return t}function m(n){return Pn[n]}function x(_){function G(n){if(v(n)&&!Cf(n)&&!(n instanceof qn)){if(n instanceof nn)return n;if(no.call(n,"__chain__")&&no.call(n,"__wrapped__"))return he(n)}return new nn(n)}function H(){}function nn(n,t,r){this.__wrapped__=n,this.__actions__=r||[],this.__chain__=!!t}function qn(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Oo,this.__views__=[]}function Mn(){var n=new qn(this.__wrapped__);return n.__actions__=et(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=et(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=et(this.__views__),n}function Pn(){if(this.__filtered__){var n=new qn(this);n.__dir__=-1,n.__filtered__=!0}else n=this.clone(),n.__dir__*=-1;return n}function Kn(){var n=this.__wrapped__.value(),t=this.__dir__,r=Cf(n),e=0>t,u=r?n.length:0,i=Vr(0,u,this.__views__),o=i.start,f=i.end,a=f-o,c=e?f:o-1,l=this.__iteratees__,s=l.length,p=0,h=Ao(a,this.__takeCount__);if(!r||T>u||u==a&&h==a)return er(n,this.__actions__);var v=[];n:for(;a--&&h>p;){c+=t;for(var _=-1,g=n[c];++_<s;){var y=l[_],d=y.iteratee,w=y.type,m=d(g);if(w==B)g=m;else if(!m){if(w==L)continue n;break n}}v[p++]=g}return v}function Vn(){this.__data__={}}function Yn(n){return this.has(n)&&delete this.__data__[n]}function Gn(n){return"__proto__"==n?b:this.__data__[n]}function Jn(n){return"__proto__"!=n&&no.call(this.__data__,n)}function Xn(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this}function Zn(n){var t=n?n.length:0;for(this.data={hash:go(null),set:new lo};t--;)this.push(n[t])}function Hn(n,t){var r=n.data,e="string"==typeof t||Wu(t)?r.set.has(t):r.hash[t];return e?0:-1}function Qn(n){var t=this.data;"string"==typeof n||Wu(n)?t.set.add(n):t.hash[n]=!0}function rt(n,t){for(var r=-1,e=n.length,u=-1,i=t.length,o=zi(e+i);++r<e;)o[r]=n[r];for(;++u<i;)o[r++]=t[u];return o}function et(n,t){var r=-1,e=n.length;for(t||(t=zi(e));++r<e;)t[r]=n[r];return t}function ut(n,t){for(var r=-1,e=n.length;++r<e&&t(n[r],r,n)!==!1;);return n}function it(n,t){for(var r=n.length;r--&&t(n[r],r,n)!==!1;);return n}function ot(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return!1;return!0}function ft(n,t,r,e){for(var u=-1,i=n.length,o=e,f=o;++u<i;){var a=n[u],c=+t(a);r(c,o)&&(o=c,f=a)}return f}function at(n,t){for(var r=-1,e=n.length,u=-1,i=[];++r<e;){var o=n[r];t(o,r,n)&&(i[++u]=o)}return i}function ct(n,t){for(var r=-1,e=n.length,u=zi(e);++r<e;)u[r]=t(n[r],r,n);return u}function lt(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];return n}function st(n,t,r,e){var u=-1,i=n.length;for(e&&i&&(r=n[++u]);++u<i;)r=t(r,n[u],u,n);return r}function pt(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r}function ht(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return!0;return!1}function vt(n,t){for(var r=n.length,e=0;r--;)e+=+t(n[r])||0;return e}function _t(n,t){return n===b?t:n}function gt(n,t,r,e){return n!==b&&no.call(e,r)?n:t}function yt(n,t,r){for(var e=-1,u=Df(t),i=u.length;++e<i;){var o=u[e],f=n[o],a=r(f,t[o],o,n,t);(a===a?a===f:f!==f)&&(f!==b||o in n)||(n[o]=a)}return n}function dt(n,t){return null==t?n:mt(t,Df(t),n)}function wt(n,t){for(var r=-1,e=null==n,u=!e&&Zr(n),i=u?n.length:0,o=t.length,f=zi(o);++r<o;){var a=t[r];u?f[r]=Hr(a,i)?n[a]:b:f[r]=e?b:n[a]}return f}function mt(n,t,r){r||(r={});for(var e=-1,u=t.length;++e<u;){var i=t[e];r[i]=n[i]}return r}function xt(n,t,r){var e=typeof n;return"function"==e?t===b?n:or(n,t,r):null==n?Ri:"object"==e?zt(n):t===b?Si(n):Dt(n,t)}function bt(n,t,r,e,u,i,o){var f;if(r&&(f=u?r(n,e,u):r(n)),f!==b)return f;if(!Wu(n))return n;var a=Cf(n);if(a){if(f=Yr(n),!t)return et(n,f)}else{var c=ro.call(n),l=c==Y;if(c!=X&&c!=q&&(!l||u))return Dn[c]?Jr(n,c,t):u?n:{};if(f=Gr(l?{}:n),!t)return dt(f,n)}i||(i=[]),o||(o=[]);for(var s=i.length;s--;)if(i[s]==n)return o[s];return i.push(n),o.push(f),(a?ut:$t)(n,function(e,u){f[u]=bt(e,t,r,u,n,i,o)}),f}function At(n,t,r){if("function"!=typeof n)throw new Ji(z);return so(function(){n.apply(b,r)},t)}function jt(n,t){var e=n?n.length:0,u=[];if(!e)return u;var i=-1,o=Mr(),f=o===r,a=f&&t.length>=T?_r(t):null,c=t.length;a&&(o=Hn,f=!1,t=a);n:for(;++i<e;){var l=n[i];if(f&&l===l){for(var s=c;s--;)if(t[s]===l)continue n;u.push(l)}else o(t,l,0)<0&&u.push(l)}return u}function kt(n,t){var r=!0;return No(n,function(n,e,u){return r=!!t(n,e,u)}),r}function It(n,t,r,e){var u=e,i=u;return No(n,function(n,o,f){var a=+t(n,o,f);(r(a,u)||a===e&&a===i)&&(u=a,i=n)}),i}function Rt(n,t,r,e){var u=n.length;for(r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=e===b||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;u>r;)n[r++]=t;return n}function Ot(n,t){var r=[];return No(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function Et(n,t,r,e){var u;return r(n,function(n,r,i){return t(n,r,i)?(u=e?r:n,!1):void 0}),u}function Ct(n,t,r,e){e||(e=[]);for(var u=-1,i=n.length;++u<i;){var o=n[u];v(o)&&Zr(o)&&(r||Cf(o)||ku(o))?t?Ct(o,t,r,e):lt(e,o):r||(e[e.length]=o)}return e}function Ut(n,t){return Lo(n,t,ni)}function $t(n,t){return Lo(n,t,Df)}function St(n,t){return Bo(n,t,Df)}function Wt(n,t){for(var r=-1,e=t.length,u=-1,i=[];++r<e;){var o=t[r];Su(n[o])&&(i[++u]=o)}return i}function Ft(n,t,r){if(null!=n){r!==b&&r in se(n)&&(t=[r]);for(var e=0,u=t.length;null!=n&&u>e;)n=n[t[e++]];return e&&e==u?n:b}}function Nt(n,t,r,e,u,i){return n===t?!0:null==n||null==t||!Wu(n)&&!v(t)?n!==n&&t!==t:Tt(n,t,Nt,r,e,u,i)}function Tt(n,t,r,e,u,i,o){var f=Cf(n),a=Cf(t),c=M,l=M;f||(c=ro.call(n),c==q?c=X:c!=X&&(f=Mu(n))),a||(l=ro.call(t),l==q?l=X:l!=X&&(a=Mu(t)));var s=c==X,p=l==X,h=c==l;if(h&&!f&&!s)return Br(n,t,c);if(!u){var v=s&&no.call(n,"__wrapped__"),_=p&&no.call(t,"__wrapped__");if(v||_)return r(v?n.value():n,_?t.value():t,e,u,i,o)}if(!h)return!1;i||(i=[]),o||(o=[]);for(var g=i.length;g--;)if(i[g]==n)return o[g]==t;i.push(n),o.push(t);var y=(f?Lr:zr)(n,t,r,e,u,i,o);return i.pop(),o.pop(),y}function Lt(n,t,r){var e=t.length,u=e,i=!r;if(null==n)return!u;for(n=se(n);e--;){var o=t[e];if(i&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return!1}for(;++e<u;){o=t[e];var f=o[0],a=n[f],c=o[1];if(i&&o[2]){if(a===b&&!(f in n))return!1}else{var l=r?r(a,c,f):b;if(!(l===b?Nt(c,a,r,!0):l))return!1}}return!0}function Bt(n,t){var r=-1,e=Zr(n)?zi(n.length):[];return No(n,function(n,u,i){e[++r]=t(n,u,i)}),e}function zt(n){var t=Pr(n);if(1==t.length&&t[0][2]){var r=t[0][0],e=t[0][1];return function(n){return null==n?!1:n[r]===e&&(e!==b||r in se(n))}}return function(n){return Lt(n,t)}}function Dt(n,t){var r=Cf(n),e=ne(n)&&ee(t),u=n+"";return n=pe(n),function(i){if(null==i)return!1;var o=u;if(i=se(i),(r||!e)&&!(o in i)){if(i=1==n.length?i:Ft(i,Jt(n,0,-1)),null==i)return!1;o=Ie(n),i=se(i)}return i[o]===t?t!==b||o in i:Nt(t,i[o],b,!0)}}function qt(n,t,r,e,u){if(!Wu(n))return n;var i=Zr(t)&&(Cf(t)||Mu(t)),o=i?b:Df(t);return ut(o||t,function(f,a){if(o&&(a=f,f=t[a]),v(f))e||(e=[]),u||(u=[]),Mt(n,t,a,qt,r,e,u);else{var c=n[a],l=r?r(c,f,a,n,t):b,s=l===b;s&&(l=f),l===b&&(!i||a in n)||!s&&(l===l?l===c:c!==c)||(n[a]=l)}}),n}function Mt(n,t,r,e,u,i,o){for(var f=i.length,a=t[r];f--;)if(i[f]==a)return void(n[r]=o[f]);var c=n[r],l=u?u(c,a,r,n,t):b,s=l===b;s&&(l=a,Zr(a)&&(Cf(a)||Mu(a))?l=Cf(c)?c:Zr(c)?et(c):[]:zu(a)||ku(a)?l=ku(c)?Gu(c):zu(c)?c:{}:s=!1),i.push(a),o.push(l),s?n[r]=e(l,a,u,i,o):(l===l?l!==c:c===c)&&(n[r]=l)}function Pt(n){return function(t){return null==t?b:t[n]}}function Kt(n){var t=n+"";return n=pe(n),function(r){return Ft(r,n,t)}}function Vt(n,t){for(var r=n?t.length:0;r--;){var e=t[r];if(e!=u&&Hr(e)){var u=e;po.call(n,e,1)}}return n}function Yt(n,t){return n+yo(Io()*(t-n+1))}function Gt(n,t,r,e,u){return u(n,function(n,u,i){r=e?(e=!1,n):t(r,n,u,i)}),r}function Jt(n,t,r){var e=-1,u=n.length;t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=r===b||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0;for(var i=zi(u);++e<u;)i[e]=n[e+t];return i}function Xt(n,t){var r;return No(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Zt(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].value;return n}function Ht(n,t,r){var e=Dr(),u=-1;t=ct(t,function(n){return e(n)});var i=Bt(n,function(n){var r=ct(t,function(t){return t(n)});return{criteria:r,index:++u,value:n}});return Zt(i,function(n,t){return a(n,t,r)})}function Qt(n,t){var r=0;return No(n,function(n,e,u){r+=+t(n,e,u)||0}),r}function nr(n,t){var e=-1,u=Mr(),i=n.length,o=u===r,f=o&&i>=T,a=f?_r():null,c=[];a?(u=Hn,o=!1):(f=!1,a=t?[]:c);n:for(;++e<i;){var l=n[e],s=t?t(l,e,n):l;if(o&&l===l){for(var p=a.length;p--;)if(a[p]===s)continue n;t&&a.push(s),c.push(l)}else u(a,s,0)<0&&((t||f)&&a.push(s),c.push(l))}return c}function tr(n,t){for(var r=-1,e=t.length,u=zi(e);++r<e;)u[r]=n[t[r]];return u}function rr(n,t,r,e){for(var u=n.length,i=e?u:-1;(e?i--:++i<u)&&t(n[i],i,n););return r?Jt(n,e?0:i,e?i+1:u):Jt(n,e?i+1:0,e?u:i)}function er(n,t){var r=n;r instanceof qn&&(r=r.value());for(var e=-1,u=t.length;++e<u;){var i=t[e];r=i.func.apply(i.thisArg,lt([r],i.args))}return r}function ur(n,t,r){var e=0,u=n?n.length:e;if("number"==typeof t&&t===t&&Uo>=u){for(;u>e;){var i=e+u>>>1,o=n[i];(r?t>=o:t>o)&&null!==o?e=i+1:u=i}return u}return ir(n,t,Ri,r)}function ir(n,t,r,e){t=r(t);for(var u=0,i=n?n.length:0,o=t!==t,f=null===t,a=t===b;i>u;){var c=yo((u+i)/2),l=r(n[c]),s=l!==b,p=l===l;if(o)var h=p||e;else h=f?p&&s&&(e||null!=l):a?p&&(e||s):null==l?!1:e?t>=l:t>l;h?u=c+1:i=c}return Ao(i,Co)}function or(n,t,r){if("function"!=typeof n)return Ri;if(t===b)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)};case 5:return function(r,e,u,i,o){return n.call(t,r,e,u,i,o)}}return function(){return n.apply(t,arguments)}}function fr(n){var t=new io(n.byteLength),r=new ho(t);return r.set(new ho(n)),t}function ar(n,t,r){for(var e=r.length,u=-1,i=bo(n.length-e,0),o=-1,f=t.length,a=zi(f+i);++o<f;)a[o]=t[o];for(;++u<e;)a[r[u]]=n[u];for(;i--;)a[o++]=n[u++];return a}function cr(n,t,r){for(var e=-1,u=r.length,i=-1,o=bo(n.length-u,0),f=-1,a=t.length,c=zi(o+a);++i<o;)c[i]=n[i];for(var l=i;++f<a;)c[l+f]=t[f];for(;++e<u;)c[l+r[e]]=n[i++];return c}function lr(n,t){return function(r,e,u){var i=t?t():{};if(e=Dr(e,u,3),Cf(r))for(var o=-1,f=r.length;++o<f;){var a=r[o];n(i,a,e(a,o,r),r)}else No(r,function(t,r,u){n(i,t,e(t,r,u),u)});return i}}function sr(n){return yu(function(t,r){var e=-1,u=null==t?0:r.length,i=u>2?r[u-2]:b,o=u>2?r[2]:b,f=u>1?r[u-1]:b;for("function"==typeof i?(i=or(i,f,5),u-=2):(i="function"==typeof f?f:b,u-=i?1:0),o&&Qr(r[0],r[1],o)&&(i=3>u?b:i,u=1);++e<u;){var a=r[e];a&&n(t,a,i)}return t})}function pr(n,t){return function(r,e){var u=r?qo(r):0;if(!re(u))return n(r,e);for(var i=t?u:-1,o=se(r);(t?i--:++i<u)&&e(o[i],i,o)!==!1;);return r}}function hr(n){return function(t,r,e){for(var u=se(t),i=e(t),o=i.length,f=n?o:-1;n?f--:++f<o;){var a=i[f];if(r(u[a],a,u)===!1)break}return t}}function vr(n,t){function r(){var u=this&&this!==nt&&this instanceof r?e:n;return u.apply(t,arguments)}var e=yr(n);return r}function _r(n){return go&&lo?new Zn(n):null}function gr(n){return function(t){for(var r=-1,e=ji(li(t)),u=e.length,i="";++r<u;)i=n(i,e[r],r);return i}}function yr(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=Fo(n.prototype),e=n.apply(r,t);return Wu(e)?e:r}}function dr(n){function t(r,e,u){u&&Qr(r,e,u)&&(e=b);var i=Tr(r,n,b,b,b,b,b,e);return i.placeholder=t.placeholder,i}return t}function wr(n,t){return yu(function(r){var e=r[0];return null==e?e:(r.push(t),n.apply(b,r))})}function mr(n,t){return function(r,e,u){if(u&&Qr(r,e,u)&&(e=b),e=Dr(e,u,3),1==e.length){r=Cf(r)?r:le(r);var i=ft(r,e,n,t);if(!r.length||i!==t)return i}return It(r,e,n,t)}}function xr(n,r){return function(e,u,i){if(u=Dr(u,i,3),Cf(e)){var o=t(e,u,r);return o>-1?e[o]:b}return Et(e,u,n)}}function br(n){return function(r,e,u){return r&&r.length?(e=Dr(e,u,3),t(r,e,n)):-1}}function Ar(n){return function(t,r,e){return r=Dr(r,e,3),Et(t,r,n,!0)}}function jr(n){return function(){for(var t,r=arguments.length,e=n?r:-1,u=0,i=zi(r);n?e--:++e<r;){var o=i[u++]=arguments[e];if("function"!=typeof o)throw new Ji(z);!t&&nn.prototype.thru&&"wrapper"==qr(o)&&(t=new nn([],!0))}for(e=t?-1:r;++e<r;){o=i[e];var f=qr(o),a="wrapper"==f?Do(o):b;t=a&&te(a[0])&&a[1]==(U|R|E|$)&&!a[4].length&&1==a[9]?t[qr(a[0])].apply(t,a[3]):1==o.length&&te(o)?t[f]():t.thru(o)}return function(){var n=arguments,e=n[0];if(t&&1==n.length&&Cf(e)&&e.length>=T)return t.plant(e).value();for(var u=0,o=r?i[u].apply(this,n):e;++u<r;)o=i[u].call(this,o);return o}}}function kr(n,t){return function(r,e,u){return"function"==typeof e&&u===b&&Cf(r)?n(r,e):t(r,or(e,u,3))}}function Ir(n){return function(t,r,e){return"function"==typeof r&&e===b||(r=or(r,e,3)),n(t,r,ni)}}function Rr(n){return function(t,r,e){return"function"==typeof r&&e===b||(r=or(r,e,3)),n(t,r)}}function Or(n){return function(t,r,e){var u={};return r=Dr(r,e,3),$t(t,function(t,e,i){var o=r(t,e,i);e=n?o:e,t=n?t:o,u[e]=t}),u}}function Er(n){return function(t,r,e){return t=u(t),(n?t:"")+Sr(t,r,e)+(n?"":t)}}function Cr(n){var t=yu(function(r,e){var u=g(e,t.placeholder);return Tr(r,n,b,e,u)});return t}function Ur(n,t){return function(r,e,u,i){var o=arguments.length<3;return"function"==typeof e&&i===b&&Cf(r)?n(r,e,u,o):Gt(r,Dr(e,i,4),u,o,t)}}function $r(n,t,r,e,u,i,o,f,a,c){function l(){for(var w=arguments.length,m=w,x=zi(w);m--;)x[m]=arguments[m];if(e&&(x=ar(x,e,u)),i&&(x=cr(x,i,o)),v||y){var A=l.placeholder,I=g(x,A);if(w-=I.length,c>w){var R=f?et(f):b,O=bo(c-w,0),U=v?I:b,$=v?b:I,S=v?x:b,W=v?b:x;t|=v?E:C,t&=~(v?C:E),_||(t&=~(j|k));var F=[n,t,r,S,U,W,$,R,a,O],N=$r.apply(b,F);return te(n)&&Mo(N,F),N.placeholder=A,N}}var T=p?r:this,L=h?T[n]:n;return f&&(x=ae(x,f)),s&&a<x.length&&(x.length=a),this&&this!==nt&&this instanceof l&&(L=d||yr(n)),L.apply(T,x)}var s=t&U,p=t&j,h=t&k,v=t&R,_=t&I,y=t&O,d=h?b:yr(n);return l}function Sr(n,t,r){var e=n.length;if(t=+t,e>=t||!mo(t))return"";var u=t-e;return r=null==r?" ":r+"",gi(r,_o(u/r.length)).slice(0,u)}function Wr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,a=-1,c=e.length,l=zi(c+f);++a<c;)l[a]=e[a];for(;f--;)l[a++]=arguments[++t];var s=this&&this!==nt&&this instanceof u?o:n;return s.apply(i?r:this,l)}var i=t&j,o=yr(n);return u}function Fr(n){var t=Pi[n];return function(n,r){return r=r===b?0:+r||0,r?(r=ao(10,r),t(n*r)/r):t(n)}}function Nr(n){return function(t,r,e,u){var i=Dr(e);return null==e&&i===xt?ur(t,r,n):ir(t,r,i(e,u,1),n)}}function Tr(n,t,r,e,u,i,o,f){var a=t&k;if(!a&&"function"!=typeof n)throw new Ji(z);var c=e?e.length:0;if(c||(t&=~(E|C),e=u=b),c-=u?u.length:0,t&C){var l=e,s=u;e=u=b}var p=a?b:Do(n),h=[n,t,r,e,u,l,s,i,o,f];if(p&&(ue(h,p),t=h[1],f=h[9]),h[9]=null==f?a?0:n.length:bo(f-c,0)||0,t==j)var v=vr(h[0],h[2]);else v=t!=E&&t!=(j|E)||h[4].length?$r.apply(b,h):Wr.apply(b,h);var _=p?zo:Mo;return _(v,h)}function Lr(n,t,r,e,u,i,o){var f=-1,a=n.length,c=t.length;if(a!=c&&!(u&&c>a))return!1;for(;++f<a;){var l=n[f],s=t[f],p=e?e(u?s:l,u?l:s,f):b;if(p!==b){if(p)continue;return!1}if(u){if(!ht(t,function(n){return l===n||r(l,n,e,u,i,o)}))return!1}else if(l!==s&&!r(l,s,e,u,i,o))return!1}return!0}function Br(n,t,r){switch(r){case P:case K:return+n==+t;case V:return n.name==t.name&&n.message==t.message;case J:return n!=+n?t!=+t:n==+t;case Z:case Q:return n==t+""}return!1}function zr(n,t,r,e,u,i,o){var f=Df(n),a=f.length,c=Df(t),l=c.length;if(a!=l&&!u)return!1;for(var s=a;s--;){var p=f[s];if(!(u?p in t:no.call(t,p)))return!1}for(var h=u;++s<a;){p=f[s];var v=n[p],_=t[p],g=e?e(u?_:v,u?v:_,p):b;if(!(g===b?r(v,_,e,u,i,o):g))return!1;h||(h="constructor"==p)}if(!h){var y=n.constructor,d=t.constructor;if(y!=d&&"constructor"in n&&"constructor"in t&&!("function"==typeof y&&y instanceof y&&"function"==typeof d&&d instanceof d))return!1}return!0}function Dr(n,t,r){var e=G.callback||ki;return e=e===ki?xt:e,r?e(n,t,r):e}function qr(n){for(var t=n.name+"",r=Wo[t],e=r?r.length:0;e--;){var u=r[e],i=u.func;if(null==i||i==n)return u.name}return t}function Mr(n,t,e){var u=G.indexOf||je;return u=u===je?r:u,n?u(n,t,e):u}function Pr(n){for(var t=ti(n),r=t.length;r--;)t[r][2]=ee(t[r][1]);return t}function Kr(n,t){var r=null==n?b:n[t];return Tu(r)?r:b}function Vr(n,t,r){for(var e=-1,u=r.length;++e<u;){var i=r[e],o=i.size;switch(i.type){case"drop":n+=o;break;case"dropRight":t-=o;break;case"take":t=Ao(t,n+o);break;case"takeRight":n=bo(n,t-o)}}return{start:n,end:t}}function Yr(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&no.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function Gr(n){var t=n.constructor;return"function"==typeof t&&t instanceof t||(t=Vi),new t}function Jr(n,t,r){var e=n.constructor;switch(t){case tn:return fr(n);case P:case K:return new e(+n);case rn:case en:case un:case on:case fn:case an:case cn:case ln:case sn:var u=n.buffer;return new e(r?fr(u):u,n.byteOffset,n.length);case J:case Q:return new e(n);case Z:var i=new e(n.source,Cn.exec(n));i.lastIndex=n.lastIndex}return i}function Xr(n,t,r){null==n||ne(t,n)||(t=pe(t),n=1==t.length?n:Ft(n,Jt(t,0,-1)),t=Ie(t));var e=null==n?n:n[t];return null==e?b:e.apply(n,r)}function Zr(n){return null!=n&&re(qo(n))}function Hr(n,t){return n="number"==typeof n||Sn.test(n)?+n:-1,t=null==t?$o:t,n>-1&&n%1==0&&t>n}function Qr(n,t,r){if(!Wu(r))return!1;var e=typeof t;if("number"==e?Zr(r)&&Hr(t,r.length):"string"==e&&t in r){var u=r[t];return n===n?n===u:u!==u}return!1}function ne(n,t){var r=typeof n;if("string"==r&&An.test(n)||"number"==r)return!0;if(Cf(n))return!1;var e=!bn.test(n);return e||null!=t&&n in se(t)}function te(n){var t=qr(n),r=G[t];if("function"!=typeof r||!(t in qn.prototype))return!1;if(n===r)return!0;var e=Do(r);return!!e&&n===e[0]}function re(n){return"number"==typeof n&&n>-1&&n%1==0&&$o>=n}function ee(n){return n===n&&!Wu(n)}function ue(n,t){var r=n[1],e=t[1],u=r|e,i=U>u,o=e==U&&r==R||e==U&&r==$&&n[7].length<=t[8]||e==(U|$)&&r==R;if(!i&&!o)return n;e&j&&(n[2]=t[2],u|=r&j?0:I);var f=t[3];if(f){var a=n[3];n[3]=a?ar(a,f,t[4]):et(f),n[4]=a?g(n[3],D):et(t[4])}return f=t[5],f&&(a=n[5],n[5]=a?cr(a,f,t[6]):et(f),n[6]=a?g(n[5],D):et(t[6])),f=t[7],f&&(n[7]=et(f)),e&U&&(n[8]=null==n[8]?t[8]:Ao(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=u,n}function ie(n,t){return n===b?t:Uf(n,t,ie)}function oe(n,t){n=se(n);for(var r=-1,e=t.length,u={};++r<e;){var i=t[r];i in n&&(u[i]=n[i])}return u}function fe(n,t){var r={};return Ut(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function ae(n,t){for(var r=n.length,e=Ao(t.length,r),u=et(n);e--;){var i=t[e];n[e]=Hr(i,r)?u[i]:b}return n}function ce(n){for(var t=ni(n),r=t.length,e=r&&n.length,u=!!e&&re(e)&&(Cf(n)||ku(n)),i=-1,o=[];++i<r;){var f=t[i];(u&&Hr(f,e)||no.call(n,f))&&o.push(f)}return o}function le(n){return null==n?[]:Zr(n)?Wu(n)?n:Vi(n):ii(n)}function se(n){return Wu(n)?n:Vi(n)}function pe(n){if(Cf(n))return n;var t=[];return u(n).replace(jn,function(n,r,e,u){t.push(e?u.replace(On,"$1"):r||n)}),t}function he(n){return n instanceof qn?n.clone():new nn(n.__wrapped__,n.__chain__,et(n.__actions__))}function ve(n,t,r){t=(r?Qr(n,t,r):null==t)?1:bo(yo(t)||1,1);for(var e=0,u=n?n.length:0,i=-1,o=zi(_o(u/t));u>e;)o[++i]=Jt(n,e,e+=t);return o}function _e(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var i=n[t];i&&(u[++e]=i)}return u}function ge(n,t,r){var e=n?n.length:0;return e?((r?Qr(n,t,r):null==t)&&(t=1),Jt(n,0>t?0:t)):[]}function ye(n,t,r){var e=n?n.length:0;return e?((r?Qr(n,t,r):null==t)&&(t=1),t=e-(+t||0),Jt(n,0,0>t?0:t)):[]}function de(n,t,r){return n&&n.length?rr(n,Dr(t,r,3),!0,!0):[]}function we(n,t,r){return n&&n.length?rr(n,Dr(t,r,3),!0):[]}function me(n,t,r,e){var u=n?n.length:0;return u?(r&&"number"!=typeof r&&Qr(n,t,r)&&(r=0,e=u),Rt(n,t,r,e)):[]}function xe(n){return n?n[0]:b}function be(n,t,r){var e=n?n.length:0;return r&&Qr(n,t,r)&&(t=!1),e?Ct(n,t):[]}function Ae(n){var t=n?n.length:0;return t?Ct(n,!0):[]}function je(n,t,e){var u=n?n.length:0;if(!u)return-1;if("number"==typeof e)e=0>e?bo(u+e,0):e;else if(e){var i=ur(n,t);return u>i&&(t===t?t===n[i]:n[i]!==n[i])?i:-1}return r(n,t,e||0)}function ke(n){return ye(n,1)}function Ie(n){var t=n?n.length:0;return t?n[t-1]:b}function Re(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if("number"==typeof r)u=(0>r?bo(e+r,0):Ao(r||0,e-1))+1;else if(r){u=ur(n,t,!0)-1;var i=n[u];return(t===t?t===i:i!==i)?u:-1}if(t!==t)return h(n,u,!0);for(;u--;)if(n[u]===t)return u;return-1}function Oe(){var n=arguments,t=n[0];if(!t||!t.length)return t;for(var r=0,e=Mr(),u=n.length;++r<u;)for(var i=0,o=n[r];(i=e(t,o,i))>-1;)po.call(t,i,1);return t}function Ee(n,t,r){var e=[];if(!n||!n.length)return e;var u=-1,i=[],o=n.length;for(t=Dr(t,r,3);++u<o;){var f=n[u];t(f,u,n)&&(e.push(f),i.push(u))}return Vt(n,i),e}function Ce(n){return ge(n,1)}function Ue(n,t,r){var e=n?n.length:0;return e?(r&&"number"!=typeof r&&Qr(n,t,r)&&(t=0,r=e),Jt(n,t,r)):[]}function $e(n,t,r){var e=n?n.length:0;return e?((r?Qr(n,t,r):null==t)&&(t=1),Jt(n,0,0>t?0:t)):[]}function Se(n,t,r){var e=n?n.length:0;return e?((r?Qr(n,t,r):null==t)&&(t=1),t=e-(+t||0),Jt(n,0>t?0:t)):[]}function We(n,t,r){return n&&n.length?rr(n,Dr(t,r,3),!1,!0):[]}function Fe(n,t,r){return n&&n.length?rr(n,Dr(t,r,3)):[]}function Ne(n,t,e,u){var i=n?n.length:0;if(!i)return[];null!=t&&"boolean"!=typeof t&&(u=e,e=Qr(n,t,u)?b:t,t=!1);var o=Dr();return null==e&&o===xt||(e=o(e,u,3)),t&&Mr()===r?y(n,e):nr(n,e)}function Te(n){if(!n||!n.length)return[];var t=-1,r=0;n=at(n,function(n){return Zr(n)?(r=bo(n.length,r),!0):void 0});for(var e=zi(r);++t<r;)e[t]=ct(n,Pt(t));return e}function Le(n,t,r){var e=n?n.length:0;if(!e)return[];var u=Te(n);return null==t?u:(t=or(t,r,4),ct(u,function(n){return st(n,t,b,!0)}))}function Be(){for(var n=-1,t=arguments.length;++n<t;){var r=arguments[n];if(Zr(r))var e=e?lt(jt(e,r),jt(r,e)):r}return e?nr(e):[]}function ze(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||Cf(n[0])||(t=[]);++r<e;){var i=n[r];t?u[i]=t[r]:i&&(u[i[0]]=i[1])}return u}function De(n){var t=G(n);return t.__chain__=!0,t}function qe(n,t,r){return t.call(r,n),n}function Me(n,t,r){return t.call(r,n)}function Pe(){return De(this)}function Ke(){return new nn(this.value(),this.__chain__)}function Ve(n){for(var t,r=this;r instanceof H;){var e=he(r);t?u.__wrapped__=e:t=e;var u=e;r=r.__wrapped__}return u.__wrapped__=n,t}function Ye(){var n=this.__wrapped__,t=function(n){return n.reverse()};if(n instanceof qn){var r=n;return this.__actions__.length&&(r=new qn(this)),r=r.reverse(),r.__actions__.push({func:Me,args:[t],thisArg:b}),new nn(r,this.__chain__)}return this.thru(t)}function Ge(){return this.value()+""}function Je(){return er(this.__wrapped__,this.__actions__)}function Xe(n,t,r){var e=Cf(n)?ot:kt;return r&&Qr(n,t,r)&&(t=b),"function"==typeof t&&r===b||(t=Dr(t,r,3)),e(n,t)}function Ze(n,t,r){var e=Cf(n)?at:Ot;return t=Dr(t,r,3),e(n,t)}function He(n,t){return uf(n,zt(t))}function Qe(n,t,r,e){var u=n?qo(n):0;return re(u)||(n=ii(n),u=n.length),r="number"!=typeof r||e&&Qr(t,r,e)?0:0>r?bo(u+r,0):r||0,"string"==typeof n||!Cf(n)&&qu(n)?u>=r&&n.indexOf(t,r)>-1:!!u&&Mr(n,t,r)>-1}function nu(n,t,r){var e=Cf(n)?ct:Bt;return t=Dr(t,r,3),e(n,t)}function tu(n,t){return nu(n,Si(t))}function ru(n,t,r){var e=Cf(n)?at:Ot;return t=Dr(t,r,3),e(n,function(n,r,e){return!t(n,r,e)})}function eu(n,t,r){if(r?Qr(n,t,r):null==t){n=le(n);var e=n.length;return e>0?n[Yt(0,e-1)]:b}var u=-1,i=Yu(n),e=i.length,o=e-1;for(t=Ao(0>t?0:+t||0,e);++u<t;){var f=Yt(u,o),a=i[f];i[f]=i[u],i[u]=a}return i.length=t,i}function uu(n){return eu(n,Oo)}function iu(n){var t=n?qo(n):0;return re(t)?t:Df(n).length}function ou(n,t,r){var e=Cf(n)?ht:Xt;return r&&Qr(n,t,r)&&(t=b),"function"==typeof t&&r===b||(t=Dr(t,r,3)),e(n,t)}function fu(n,t,r){if(null==n)return[];r&&Qr(n,t,r)&&(t=b);var e=-1;t=Dr(t,r,3);var u=Bt(n,function(n,r,u){return{criteria:t(n,r,u),index:++e,value:n}});return Zt(u,f)}function au(n,t,r,e){return null==n?[]:(e&&Qr(t,r,e)&&(r=b),Cf(t)||(t=null==t?[]:[t]),Cf(r)||(r=null==r?[]:[r]),Ht(n,t,r))}function cu(n,t){return Ze(n,zt(t))}function lu(n,t){if("function"!=typeof t){if("function"!=typeof n)throw new Ji(z);var r=n;n=t,t=r}return n=mo(n=+n)?n:0,function(){return--n<1?t.apply(this,arguments):void 0}}function su(n,t,r){return r&&Qr(n,t,r)&&(t=b),t=n&&null==t?n.length:bo(+t||0,0),Tr(n,U,b,b,b,b,t)}function pu(n,t){var r;if("function"!=typeof t){if("function"!=typeof n)throw new Ji(z);var e=n;n=t,t=e}return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=b),r}}function hu(n,t,r){function e(){h&&oo(h),c&&oo(c),_=0,c=h=v=b}function u(t,r){r&&oo(r),c=h=v=b,t&&(_=gf(),l=n.apply(p,a),h||c||(a=p=b))}function i(){var n=t-(gf()-s);0>=n||n>t?u(v,c):h=so(i,n)}function o(){u(y,h)}function f(){if(a=arguments,s=gf(),p=this,v=y&&(h||!d),g===!1)var r=d&&!h;else{c||d||(_=s);var e=g-(s-_),u=0>=e||e>g;u?(c&&(c=oo(c)),_=s,l=n.apply(p,a)):c||(c=so(o,e))}return u&&h?h=oo(h):h||t===g||(h=so(i,t)),r&&(u=!0,l=n.apply(p,a)),!u||h||c||(a=p=b),l}var a,c,l,s,p,h,v,_=0,g=!1,y=!0;if("function"!=typeof n)throw new Ji(z);if(t=0>t?0:+t||0,r===!0){var d=!0;y=!1}else Wu(r)&&(d=!!r.leading,g="maxWait"in r&&bo(+r.maxWait||0,t),y="trailing"in r?!!r.trailing:y);return f.cancel=e,f}function vu(n,t){if("function"!=typeof n||t&&"function"!=typeof t)throw new Ji(z);var r=function(){var e=arguments,u=t?t.apply(this,e):e[0],i=r.cache;if(i.has(u))return i.get(u);var o=n.apply(this,e);return r.cache=i.set(u,o),o};return r.cache=new vu.Cache,r}function _u(n){if("function"!=typeof n)throw new Ji(z);return function(){return!n.apply(this,arguments)}}function gu(n){return pu(2,n)}function yu(n,t){if("function"!=typeof n)throw new Ji(z);return t=bo(t===b?n.length-1:+t||0,0),function(){for(var r=arguments,e=-1,u=bo(r.length-t,0),i=zi(u);++e<u;)i[e]=r[t+e];switch(t){case 0:return n.call(this,i);case 1:return n.call(this,r[0],i);case 2:return n.call(this,r[0],r[1],i)}var o=zi(t+1);for(e=-1;++e<t;)o[e]=r[e];return o[t]=i,n.apply(this,o)}}function du(n){if("function"!=typeof n)throw new Ji(z);return function(t){return n.apply(this,t)}}function wu(n,t,r){var e=!0,u=!0;if("function"!=typeof n)throw new Ji(z);return r===!1?e=!1:Wu(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),hu(n,t,{leading:e,maxWait:+t,trailing:u})}function mu(n,t){return t=null==t?Ri:t,Tr(t,E,b,[n],[])}function xu(n,t,r,e){return t&&"boolean"!=typeof t&&Qr(n,t,r)?t=!1:"function"==typeof t&&(e=r,r=t,t=!1),"function"==typeof r?bt(n,t,or(r,e,3)):bt(n,t)}function bu(n,t,r){return"function"==typeof t?bt(n,!0,or(t,r,3)):bt(n,!0)}function Au(n,t){return n>t}function ju(n,t){return n>=t}function ku(n){return v(n)&&Zr(n)&&no.call(n,"callee")&&!co.call(n,"callee")}function Iu(n){return n===!0||n===!1||v(n)&&ro.call(n)==P}function Ru(n){return v(n)&&ro.call(n)==K}function Ou(n){return!!n&&1===n.nodeType&&v(n)&&!zu(n)}function Eu(n){return null==n?!0:Zr(n)&&(Cf(n)||qu(n)||ku(n)||v(n)&&Su(n.splice))?!n.length:!Df(n).length}function Cu(n,t,r,e){r="function"==typeof r?or(r,e,3):b;var u=r?r(n,t):b;return u===b?Nt(n,t,r):!!u}function Uu(n){return v(n)&&"string"==typeof n.message&&ro.call(n)==V}function $u(n){return"number"==typeof n&&mo(n)}function Su(n){return Wu(n)&&ro.call(n)==Y}function Wu(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function Fu(n,t,r,e){return r="function"==typeof r?or(r,e,3):b,Lt(n,Pr(t),r)}function Nu(n){return Bu(n)&&n!=+n}function Tu(n){return null==n?!1:Su(n)?uo.test(Qi.call(n)):v(n)&&$n.test(n)}function Lu(n){return null===n}function Bu(n){return"number"==typeof n||v(n)&&ro.call(n)==J}function zu(n){var t;if(!v(n)||ro.call(n)!=X||ku(n)||!no.call(n,"constructor")&&(t=n.constructor,"function"==typeof t&&!(t instanceof t)))return!1;var r;return Ut(n,function(n,t){r=t}),r===b||no.call(n,r)}function Du(n){return Wu(n)&&ro.call(n)==Z}function qu(n){return"string"==typeof n||v(n)&&ro.call(n)==Q}function Mu(n){return v(n)&&re(n.length)&&!!zn[ro.call(n)]}function Pu(n){return n===b}function Ku(n,t){return t>n}function Vu(n,t){return t>=n}function Yu(n){var t=n?qo(n):0;return re(t)?t?et(n):[]:ii(n)}function Gu(n){return mt(n,ni(n))}function Ju(n,t,r){var e=Fo(n);return r&&Qr(n,t,r)&&(t=b),t?dt(e,t):e}function Xu(n){return Wt(n,ni(n))}function Zu(n,t,r){var e=null==n?b:Ft(n,pe(t),t+"");return e===b?r:e}function Hu(n,t){if(null==n)return!1;var r=no.call(n,t);if(!r&&!ne(t)){if(t=pe(t),n=1==t.length?n:Ft(n,Jt(t,0,-1)),null==n)return!1;t=Ie(t),r=no.call(n,t)}return r||re(n.length)&&Hr(t,n.length)&&(Cf(n)||ku(n))}function Qu(n,t,r){r&&Qr(n,t,r)&&(t=b);for(var e=-1,u=Df(n),i=u.length,o={};++e<i;){var f=u[e],a=n[f];t?no.call(o,a)?o[a].push(f):o[a]=[f]:o[a]=f}return o}function ni(n){if(null==n)return[];Wu(n)||(n=Vi(n));var t=n.length;t=t&&re(t)&&(Cf(n)||ku(n))&&t||0;for(var r=n.constructor,e=-1,u="function"==typeof r&&r.prototype===n,i=zi(t),o=t>0;++e<t;)i[e]=e+"";for(var f in n)o&&Hr(f,t)||"constructor"==f&&(u||!no.call(n,f))||i.push(f);return i}function ti(n){n=se(n);for(var t=-1,r=Df(n),e=r.length,u=zi(e);++t<e;){var i=r[t];u[t]=[i,n[i]]}return u}function ri(n,t,r){var e=null==n?b:n[t];return e===b&&(null==n||ne(t,n)||(t=pe(t),n=1==t.length?n:Ft(n,Jt(t,0,-1)),e=null==n?b:n[Ie(t)]),e=e===b?r:e),Su(e)?e.call(n):e}function ei(n,t,r){if(null==n)return n;var e=t+"";t=null!=n[e]||ne(t,n)?[e]:pe(t);for(var u=-1,i=t.length,o=i-1,f=n;null!=f&&++u<i;){var a=t[u];Wu(f)&&(u==o?f[a]=r:null==f[a]&&(f[a]=Hr(t[u+1])?[]:{})),f=f[a]}return n}function ui(n,t,r,e){var u=Cf(n)||Mu(n);if(t=Dr(t,e,4),null==r)if(u||Wu(n)){var i=n.constructor;r=u?Cf(n)?new i:[]:Fo(Su(i)?i.prototype:b)}else r={};return(u?ut:$t)(n,function(n,e,u){return t(r,n,e,u)}),r}function ii(n){return tr(n,Df(n))}function oi(n){return tr(n,ni(n))}function fi(n,t,r){return t=+t||0,r===b?(r=t,t=0):r=+r||0,n>=Ao(t,r)&&n<bo(t,r)}function ai(n,t,r){r&&Qr(n,t,r)&&(t=r=b);var e=null==n,u=null==t;if(null==r&&(u&&"boolean"==typeof n?(r=n,n=1):"boolean"==typeof t&&(r=t,u=!0)),e&&u&&(t=1,u=!1),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1){var i=Io();return Ao(n+i*(t-n+fo("1e-"+((i+"").length-1))),t)}return Yt(n,t)}function ci(n){return n=u(n),n&&n.charAt(0).toUpperCase()+n.slice(1)}function li(n){return n=u(n),n&&n.replace(Wn,c).replace(Rn,"");
}function si(n,t,r){n=u(n),t+="";var e=n.length;return r=r===b?e:Ao(0>r?0:+r||0,e),r-=t.length,r>=0&&n.indexOf(t,r)==r}function pi(n){return n=u(n),n&&dn.test(n)?n.replace(gn,l):n}function hi(n){return n=u(n),n&&In.test(n)?n.replace(kn,s):n||"(?:)"}function vi(n,t,r){n=u(n),t=+t;var e=n.length;if(e>=t||!mo(t))return n;var i=(t-e)/2,o=yo(i),f=_o(i);return r=Sr("",f,r),r.slice(0,o)+n+r}function _i(n,t,r){return(r?Qr(n,t,r):null==t)?t=0:t&&(t=+t),n=wi(n),ko(n,t||(Un.test(n)?16:10))}function gi(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!mo(t))return r;do t%2&&(r+=n),t=yo(t/2),n+=n;while(t);return r}function yi(n,t,r){return n=u(n),r=null==r?0:Ao(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r}function di(n,t,r){var e=G.templateSettings;r&&Qr(n,t,r)&&(t=r=b),n=u(n),t=yt(dt({},r||t),e,gt);var i,o,f=yt(dt({},t.imports),e.imports,gt),a=Df(f),c=tr(f,a),l=0,s=t.interpolate||Fn,h="__p += '",v=Yi((t.escape||Fn).source+"|"+s.source+"|"+(s===xn?En:Fn).source+"|"+(t.evaluate||Fn).source+"|$","g"),_="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++Bn+"]")+"\n";n.replace(v,function(t,r,e,u,f,a){return e||(e=u),h+=n.slice(l,a).replace(Nn,p),r&&(i=!0,h+="' +\n__e("+r+") +\n'"),f&&(o=!0,h+="';\n"+f+";\n__p += '"),e&&(h+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),l=a+t.length,t}),h+="';\n";var g=t.variable;g||(h="with (obj) {\n"+h+"\n}\n"),h=(o?h.replace(pn,""):h).replace(hn,"$1").replace(vn,"$1;"),h="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var y=Hf(function(){return Mi(a,_+"return "+h).apply(b,c)});if(y.source=h,Uu(y))throw y;return y}function wi(n,t,r){var e=n;return(n=u(n))?(r?Qr(e,t,r):null==t)?n.slice(d(n),w(n)+1):(t+="",n.slice(i(n,t),o(n,t)+1)):n}function mi(n,t,r){var e=n;return n=u(n),n?(r?Qr(e,t,r):null==t)?n.slice(d(n)):n.slice(i(n,t+"")):n}function xi(n,t,r){var e=n;return n=u(n),n?(r?Qr(e,t,r):null==t)?n.slice(0,w(n)+1):n.slice(0,o(n,t+"")+1):n}function bi(n,t,r){r&&Qr(n,t,r)&&(t=b);var e=S,i=W;if(null!=t)if(Wu(t)){var o="separator"in t?t.separator:o;e="length"in t?+t.length||0:e,i="omission"in t?u(t.omission):i}else e=+t||0;if(n=u(n),e>=n.length)return n;var f=e-i.length;if(1>f)return i;var a=n.slice(0,f);if(null==o)return a+i;if(Du(o)){if(n.slice(f).search(o)){var c,l,s=n.slice(0,f);for(o.global||(o=Yi(o.source,(Cn.exec(o)||"")+"g")),o.lastIndex=0;c=o.exec(s);)l=c.index;a=a.slice(0,null==l?f:l)}}else if(n.indexOf(o,f)!=f){var p=a.lastIndexOf(o);p>-1&&(a=a.slice(0,p))}return a+i}function Ai(n){return n=u(n),n&&yn.test(n)?n.replace(_n,m):n}function ji(n,t,r){return r&&Qr(n,t,r)&&(t=b),n=u(n),n.match(t||Tn)||[]}function ki(n,t,r){return r&&Qr(n,t,r)&&(t=b),v(n)?Oi(n):xt(n,t)}function Ii(n){return function(){return n}}function Ri(n){return n}function Oi(n){return zt(bt(n,!0))}function Ei(n,t){return Dt(n,bt(t,!0))}function Ci(n,t,r){if(null==r){var e=Wu(t),u=e?Df(t):b,i=u&&u.length?Wt(t,u):b;(i?i.length:e)||(i=!1,r=t,t=n,n=this)}i||(i=Wt(t,Df(t)));var o=!0,f=-1,a=Su(n),c=i.length;r===!1?o=!1:Wu(r)&&"chain"in r&&(o=r.chain);for(;++f<c;){var l=i[f],s=t[l];n[l]=s,a&&(n.prototype[l]=function(t){return function(){var r=this.__chain__;if(o||r){var e=n(this.__wrapped__),u=e.__actions__=et(this.__actions__);return u.push({func:t,args:arguments,thisArg:n}),e.__chain__=r,e}return t.apply(n,lt([this.value()],arguments))}}(s))}return n}function Ui(){return nt._=eo,this}function $i(){}function Si(n){return ne(n)?Pt(n):Kt(n)}function Wi(n){return function(t){return Ft(n,pe(t),t+"")}}function Fi(n,t,r){r&&Qr(n,t,r)&&(t=r=b),n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;for(var e=-1,u=bo(_o((t-n)/(r||1)),0),i=zi(u);++e<u;)i[e]=n,n+=r;return i}function Ni(n,t,r){if(n=yo(n),1>n||!mo(n))return[];var e=-1,u=zi(Ao(n,Eo));for(t=or(t,r,1);++e<n;)Eo>e?u[e]=t(e):t(e);return u}function Ti(n){var t=++to;return u(n)+t}function Li(n,t){return(+n||0)+(+t||0)}function Bi(n,t,r){return r&&Qr(n,t,r)&&(t=b),t=Dr(t,r,3),1==t.length?vt(Cf(n)?n:le(n),t):Qt(n,t)}_=_?tt.defaults(nt.Object(),_,tt.pick(nt,Ln)):nt;var zi=_.Array,Di=_.Date,qi=_.Error,Mi=_.Function,Pi=_.Math,Ki=_.Number,Vi=_.Object,Yi=_.RegExp,Gi=_.String,Ji=_.TypeError,Xi=zi.prototype,Zi=Vi.prototype,Hi=Gi.prototype,Qi=Mi.prototype.toString,no=Zi.hasOwnProperty,to=0,ro=Zi.toString,eo=nt._,uo=Yi("^"+Qi.call(no).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),io=_.ArrayBuffer,oo=_.clearTimeout,fo=_.parseFloat,ao=Pi.pow,co=Zi.propertyIsEnumerable,lo=Kr(_,"Set"),so=_.setTimeout,po=Xi.splice,ho=_.Uint8Array,vo=Kr(_,"WeakMap"),_o=Pi.ceil,go=Kr(Vi,"create"),yo=Pi.floor,wo=Kr(zi,"isArray"),mo=_.isFinite,xo=Kr(Vi,"keys"),bo=Pi.max,Ao=Pi.min,jo=Kr(Di,"now"),ko=_.parseInt,Io=Pi.random,Ro=Ki.NEGATIVE_INFINITY,Oo=Ki.POSITIVE_INFINITY,Eo=4294967295,Co=Eo-1,Uo=Eo>>>1,$o=9007199254740991,So=vo&&new vo,Wo={};G.support={};G.templateSettings={escape:wn,evaluate:mn,interpolate:xn,variable:"",imports:{_:G}};var Fo=function(){function n(){}return function(t){if(Wu(t)){n.prototype=t;var r=new n;n.prototype=b}return r||{}}}(),No=pr($t),To=pr(St,!0),Lo=hr(),Bo=hr(!0),zo=So?function(n,t){return So.set(n,t),n}:Ri,Do=So?function(n){return So.get(n)}:$i,qo=Pt("length"),Mo=function(){var n=0,t=0;return function(r,e){var u=gf(),i=N-(u-t);if(t=u,i>0){if(++n>=F)return r}else n=0;return zo(r,e)}}(),Po=yu(function(n,t){return v(n)&&Zr(n)?jt(n,Ct(t,!1,!0)):[]}),Ko=br(),Vo=br(!0),Yo=yu(function(n){for(var t=n.length,e=t,u=zi(s),i=Mr(),o=i===r,f=[];e--;){var a=n[e]=Zr(a=n[e])?a:[];u[e]=o&&a.length>=120?_r(e&&a):null}var c=n[0],l=-1,s=c?c.length:0,p=u[0];n:for(;++l<s;)if(a=c[l],(p?Hn(p,a):i(f,a,0))<0){for(var e=t;--e;){var h=u[e];if((h?Hn(h,a):i(n[e],a,0))<0)continue n}p&&p.push(a),f.push(a)}return f}),Go=yu(function(t,r){r=Ct(r);var e=wt(t,r);return Vt(t,r.sort(n)),e}),Jo=Nr(),Xo=Nr(!0),Zo=yu(function(n){return nr(Ct(n,!1,!0))}),Ho=yu(function(n,t){return Zr(n)?jt(n,t):[]}),Qo=yu(Te),nf=yu(function(n){var t=n.length,r=t>2?n[t-2]:b,e=t>1?n[t-1]:b;return t>2&&"function"==typeof r?t-=2:(r=t>1&&"function"==typeof e?(--t,e):b,e=b),n.length=t,Le(n,r,e)}),tf=yu(function(n){return n=Ct(n),this.thru(function(t){return rt(Cf(t)?t:[se(t)],n)})}),rf=yu(function(n,t){return wt(n,Ct(t))}),ef=lr(function(n,t,r){no.call(n,r)?++n[r]:n[r]=1}),uf=xr(No),of=xr(To,!0),ff=kr(ut,No),af=kr(it,To),cf=lr(function(n,t,r){no.call(n,r)?n[r].push(t):n[r]=[t]}),lf=lr(function(n,t,r){n[r]=t}),sf=yu(function(n,t,r){var e=-1,u="function"==typeof t,i=ne(t),o=Zr(n)?zi(n.length):[];return No(n,function(n){var f=u?t:i&&null!=n?n[t]:b;o[++e]=f?f.apply(n,r):Xr(n,t,r)}),o}),pf=lr(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),hf=Ur(st,No),vf=Ur(pt,To),_f=yu(function(n,t){if(null==n)return[];var r=t[2];return r&&Qr(t[0],t[1],r)&&(t.length=1),Ht(n,Ct(t),[])}),gf=jo||function(){return(new Di).getTime()},yf=yu(function(n,t,r){var e=j;if(r.length){var u=g(r,yf.placeholder);e|=E}return Tr(n,e,t,r,u)}),df=yu(function(n,t){t=t.length?Ct(t):Xu(n);for(var r=-1,e=t.length;++r<e;){var u=t[r];n[u]=Tr(n[u],j,n)}return n}),wf=yu(function(n,t,r){var e=j|k;if(r.length){var u=g(r,wf.placeholder);e|=E}return Tr(t,e,n,r,u)}),mf=dr(R),xf=dr(O),bf=yu(function(n,t){return At(n,1,t)}),Af=yu(function(n,t,r){return At(n,t,r)}),jf=jr(),kf=jr(!0),If=yu(function(n,t){if(t=Ct(t),"function"!=typeof n||!ot(t,e))throw new Ji(z);var r=t.length;return yu(function(e){for(var u=Ao(e.length,r);u--;)e[u]=t[u](e[u]);return n.apply(this,e)})}),Rf=Cr(E),Of=Cr(C),Ef=yu(function(n,t){return Tr(n,$,b,b,b,Ct(t))}),Cf=wo||function(n){return v(n)&&re(n.length)&&ro.call(n)==M},Uf=sr(qt),$f=sr(function(n,t,r){return r?yt(n,t,r):dt(n,t)}),Sf=wr($f,_t),Wf=wr(Uf,ie),Ff=Ar($t),Nf=Ar(St),Tf=Ir(Lo),Lf=Ir(Bo),Bf=Rr($t),zf=Rr(St),Df=xo?function(n){var t=null==n?b:n.constructor;return"function"==typeof t&&t.prototype===n||"function"!=typeof n&&Zr(n)?ce(n):Wu(n)?xo(n):[]}:ce,qf=Or(!0),Mf=Or(),Pf=yu(function(n,t){if(null==n)return{};if("function"!=typeof t[0]){var t=ct(Ct(t),Gi);return oe(n,jt(ni(n),t))}var r=or(t[0],t[1],3);return fe(n,function(n,t,e){return!r(n,t,e)})}),Kf=yu(function(n,t){return null==n?{}:"function"==typeof t[0]?fe(n,or(t[0],t[1],3)):oe(n,Ct(t))}),Vf=gr(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t)}),Yf=gr(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Gf=Er(),Jf=Er(!0),Xf=gr(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),Zf=gr(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Hf=yu(function(n,t){try{return n.apply(b,t)}catch(r){return Uu(r)?r:new qi(r)}}),Qf=yu(function(n,t){return function(r){return Xr(r,n,t)}}),na=yu(function(n,t){return function(r){return Xr(n,r,t)}}),ta=Fr("ceil"),ra=Fr("floor"),ea=mr(Au,Ro),ua=mr(Ku,Oo),ia=Fr("round");return G.prototype=H.prototype,nn.prototype=Fo(H.prototype),nn.prototype.constructor=nn,qn.prototype=Fo(H.prototype),qn.prototype.constructor=qn,Vn.prototype["delete"]=Yn,Vn.prototype.get=Gn,Vn.prototype.has=Jn,Vn.prototype.set=Xn,Zn.prototype.push=Qn,vu.Cache=Vn,G.after=lu,G.ary=su,G.assign=$f,G.at=rf,G.before=pu,G.bind=yf,G.bindAll=df,G.bindKey=wf,G.callback=ki,G.chain=De,G.chunk=ve,G.compact=_e,G.constant=Ii,G.countBy=ef,G.create=Ju,G.curry=mf,G.curryRight=xf,G.debounce=hu,G.defaults=Sf,G.defaultsDeep=Wf,G.defer=bf,G.delay=Af,G.difference=Po,G.drop=ge,G.dropRight=ye,G.dropRightWhile=de,G.dropWhile=we,G.fill=me,G.filter=Ze,G.flatten=be,G.flattenDeep=Ae,G.flow=jf,G.flowRight=kf,G.forEach=ff,G.forEachRight=af,G.forIn=Tf,G.forInRight=Lf,G.forOwn=Bf,G.forOwnRight=zf,G.functions=Xu,G.groupBy=cf,G.indexBy=lf,G.initial=ke,G.intersection=Yo,G.invert=Qu,G.invoke=sf,G.keys=Df,G.keysIn=ni,G.map=nu,G.mapKeys=qf,G.mapValues=Mf,G.matches=Oi,G.matchesProperty=Ei,G.memoize=vu,G.merge=Uf,G.method=Qf,G.methodOf=na,G.mixin=Ci,G.modArgs=If,G.negate=_u,G.omit=Pf,G.once=gu,G.pairs=ti,G.partial=Rf,G.partialRight=Of,G.partition=pf,G.pick=Kf,G.pluck=tu,G.property=Si,G.propertyOf=Wi,G.pull=Oe,G.pullAt=Go,G.range=Fi,G.rearg=Ef,G.reject=ru,G.remove=Ee,G.rest=Ce,G.restParam=yu,G.set=ei,G.shuffle=uu,G.slice=Ue,G.sortBy=fu,G.sortByAll=_f,G.sortByOrder=au,G.spread=du,G.take=$e,G.takeRight=Se,G.takeRightWhile=We,G.takeWhile=Fe,G.tap=qe,G.throttle=wu,G.thru=Me,G.times=Ni,G.toArray=Yu,G.toPlainObject=Gu,G.transform=ui,G.union=Zo,G.uniq=Ne,G.unzip=Te,G.unzipWith=Le,G.values=ii,G.valuesIn=oi,G.where=cu,G.without=Ho,G.wrap=mu,G.xor=Be,G.zip=Qo,G.zipObject=ze,G.zipWith=nf,G.backflow=kf,G.collect=nu,G.compose=kf,G.each=ff,G.eachRight=af,G.extend=$f,G.iteratee=ki,G.methods=Xu,G.object=ze,G.select=Ze,G.tail=Ce,G.unique=Ne,Ci(G,G),G.add=Li,G.attempt=Hf,G.camelCase=Vf,G.capitalize=ci,G.ceil=ta,G.clone=xu,G.cloneDeep=bu,G.deburr=li,G.endsWith=si,G.escape=pi,G.escapeRegExp=hi,G.every=Xe,G.find=uf,G.findIndex=Ko,G.findKey=Ff,G.findLast=of,G.findLastIndex=Vo,G.findLastKey=Nf,G.findWhere=He,G.first=xe,G.floor=ra,G.get=Zu,G.gt=Au,G.gte=ju,G.has=Hu,G.identity=Ri,G.includes=Qe,G.indexOf=je,G.inRange=fi,G.isArguments=ku,G.isArray=Cf,G.isBoolean=Iu,G.isDate=Ru,G.isElement=Ou,G.isEmpty=Eu,G.isEqual=Cu,G.isError=Uu,G.isFinite=$u,G.isFunction=Su,G.isMatch=Fu,G.isNaN=Nu,G.isNative=Tu,G.isNull=Lu,G.isNumber=Bu,G.isObject=Wu,G.isPlainObject=zu,G.isRegExp=Du,G.isString=qu,G.isTypedArray=Mu,G.isUndefined=Pu,G.kebabCase=Yf,G.last=Ie,G.lastIndexOf=Re,G.lt=Ku,G.lte=Vu,G.max=ea,G.min=ua,G.noConflict=Ui,G.noop=$i,G.now=gf,G.pad=vi,G.padLeft=Gf,G.padRight=Jf,G.parseInt=_i,G.random=ai,G.reduce=hf,G.reduceRight=vf,G.repeat=gi,G.result=ri,G.round=ia,G.runInContext=x,G.size=iu,G.snakeCase=Xf,G.some=ou,G.sortedIndex=Jo,G.sortedLastIndex=Xo,G.startCase=Zf,G.startsWith=yi,G.sum=Bi,G.template=di,G.trim=wi,G.trimLeft=mi,G.trimRight=xi,G.trunc=bi,G.unescape=Ai,G.uniqueId=Ti,G.words=ji,G.all=Xe,G.any=ou,G.contains=Qe,G.eq=Cu,G.detect=uf,G.foldl=hf,G.foldr=vf,G.head=xe,G.include=Qe,G.inject=hf,Ci(G,function(){var n={};return $t(G,function(t,r){G.prototype[r]||(n[r]=t)}),n}(),!1),G.sample=eu,G.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return eu(t,n)}):eu(this.value())},G.VERSION=A,ut(["bind","bindKey","curry","curryRight","partial","partialRight"],function(n){G[n].placeholder=G}),ut(["drop","take"],function(n,t){qn.prototype[n]=function(r){var e=this.__filtered__;if(e&&!t)return new qn(this);r=null==r?1:bo(yo(r)||0,0);var u=this.clone();return e?u.__takeCount__=Ao(u.__takeCount__,r):u.__views__.push({size:r,type:n+(u.__dir__<0?"Right":"")}),u},qn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),ut(["filter","map","takeWhile"],function(n,t){var r=t+1,e=r!=B;qn.prototype[n]=function(n,t){var u=this.clone();return u.__iteratees__.push({iteratee:Dr(n,t,1),type:r}),u.__filtered__=u.__filtered__||e,u}}),ut(["first","last"],function(n,t){var r="take"+(t?"Right":"");qn.prototype[n]=function(){return this[r](1).value()[0]}}),ut(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");qn.prototype[n]=function(){return this.__filtered__?new qn(this):this[r](1)}}),ut(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?zt:Si;qn.prototype[n]=function(n){return this[r](e(n))}}),qn.prototype.compact=function(){return this.filter(Ri)},qn.prototype.reject=function(n,t){return n=Dr(n,t,1),this.filter(function(t){return!n(t)})},qn.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=this;return r.__filtered__&&(n>0||0>t)?new qn(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==b&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r)},qn.prototype.takeRightWhile=function(n,t){return this.reverse().takeWhile(n,t).reverse()},qn.prototype.toArray=function(){return this.take(Oo)},$t(qn.prototype,function(n,t){var r=/^(?:filter|map|reject)|While$/.test(t),e=/^(?:first|last)$/.test(t),u=G[e?"take"+("last"==t?"Right":""):t];u&&(G.prototype[t]=function(){var t=e?[1]:arguments,i=this.__chain__,o=this.__wrapped__,f=!!this.__actions__.length,a=o instanceof qn,c=t[0],l=a||Cf(o);l&&r&&"function"==typeof c&&1!=c.length&&(a=l=!1);var s=function(n){return e&&i?u(n,1)[0]:u.apply(b,lt([n],t))},p={func:Me,args:[s],thisArg:b},h=a&&!f;if(e&&!i)return h?(o=o.clone(),o.__actions__.push(p),n.call(o)):u.call(b,this.value())[0];if(!e&&l){o=h?o:new qn(this);var v=n.apply(o,t);return v.__actions__.push(p),new nn(v,i)}return this.thru(s)})}),ut(["join","pop","push","replace","shift","sort","splice","split","unshift"],function(n){var t=(/^(?:replace|split)$/.test(n)?Hi:Xi)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|replace|shift)$/.test(n);G.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),$t(qn.prototype,function(n,t){var r=G[t];if(r){var e=r.name+"",u=Wo[e]||(Wo[e]=[]);u.push({name:t,func:r})}}),Wo[$r(b,k).name]=[{name:"wrapper",func:b}],qn.prototype.clone=Mn,qn.prototype.reverse=Pn,qn.prototype.value=Kn,G.prototype.chain=Pe,G.prototype.commit=Ke,G.prototype.concat=tf,G.prototype.plant=Ve,G.prototype.reverse=Ye,G.prototype.toString=Ge,G.prototype.run=G.prototype.toJSON=G.prototype.valueOf=G.prototype.value=Je,G.prototype.collect=G.prototype.map,G.prototype.head=G.prototype.first,G.prototype.select=G.prototype.filter,G.prototype.tail=G.prototype.rest,G}var b,A="3.10.1",j=1,k=2,I=4,R=8,O=16,E=32,C=64,U=128,$=256,S=30,W="...",F=150,N=16,T=200,L=1,B=2,z="Expected a function",D="__lodash_placeholder__",q="[object Arguments]",M="[object Array]",P="[object Boolean]",K="[object Date]",V="[object Error]",Y="[object Function]",G="[object Map]",J="[object Number]",X="[object Object]",Z="[object RegExp]",H="[object Set]",Q="[object String]",nn="[object WeakMap]",tn="[object ArrayBuffer]",rn="[object Float32Array]",en="[object Float64Array]",un="[object Int8Array]",on="[object Int16Array]",fn="[object Int32Array]",an="[object Uint8Array]",cn="[object Uint8ClampedArray]",ln="[object Uint16Array]",sn="[object Uint32Array]",pn=/\b__p \+= '';/g,hn=/\b(__p \+=) '' \+/g,vn=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_n=/&(?:amp|lt|gt|quot|#39|#96);/g,gn=/[&<>"'`]/g,yn=RegExp(_n.source),dn=RegExp(gn.source),wn=/<%-([\s\S]+?)%>/g,mn=/<%([\s\S]+?)%>/g,xn=/<%=([\s\S]+?)%>/g,bn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,An=/^\w*$/,jn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,kn=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,In=RegExp(kn.source),Rn=/[\u0300-\u036f\ufe20-\ufe23]/g,On=/\\(\\)?/g,En=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Cn=/\w*$/,Un=/^0[xX]/,$n=/^\[object .+?Constructor\]$/,Sn=/^\d+$/,Wn=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Fn=/($^)/,Nn=/['\n\r\u2028\u2029\\]/g,Tn=function(){var n="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(n+"+(?="+n+t+")|"+n+"?"+t+"|"+n+"+|[0-9]+","g")}(),Ln=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","isFinite","parseFloat","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap"],Bn=-1,zn={};zn[rn]=zn[en]=zn[un]=zn[on]=zn[fn]=zn[an]=zn[cn]=zn[ln]=zn[sn]=!0,zn[q]=zn[M]=zn[tn]=zn[P]=zn[K]=zn[V]=zn[Y]=zn[G]=zn[J]=zn[X]=zn[Z]=zn[H]=zn[Q]=zn[nn]=!1;var Dn={};Dn[q]=Dn[M]=Dn[tn]=Dn[P]=Dn[K]=Dn[rn]=Dn[en]=Dn[un]=Dn[on]=Dn[fn]=Dn[J]=Dn[X]=Dn[Z]=Dn[Q]=Dn[an]=Dn[cn]=Dn[ln]=Dn[sn]=!0,Dn[V]=Dn[Y]=Dn[G]=Dn[H]=Dn[nn]=!1;var qn={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Mn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Pn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Kn={"function":!0,object:!0},Vn={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},Yn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Gn=Kn[typeof exports]&&exports&&!exports.nodeType&&exports,Jn=Kn[typeof module]&&module&&!module.nodeType&&module,Xn=Gn&&Jn&&"object"==typeof global&&global&&global.Object&&global,Zn=Kn[typeof self]&&self&&self.Object&&self,Hn=Kn[typeof window]&&window&&window.Object&&window,Qn=Jn&&Jn.exports===Gn&&Gn,nt=Xn||Hn!==(this&&this.window)&&Hn||Zn||this,tt=x();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(nt._=tt,define(function(){return tt})):Gn&&Jn?Qn?(Jn.exports=tt)._=tt:Gn._=tt:nt._=tt}).call(this);
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(e,t,r){"use strict";function n(e,t){return J(new(J(function(){},{prototype:e})),t)}function a(e){return B(arguments,function(t){t!==e&&B(t,function(t,r){e.hasOwnProperty(r)||(e[r]=t)})}),e}function i(e,t){var r=[];for(var n in e.path){if(e.path[n]!==t.path[n])break;r.push(e.path[n])}return r}function o(e){if(Object.keys)return Object.keys(e);var t=[];return B(e,function(e,r){t.push(r)}),t}function u(e,t){if(Array.prototype.indexOf)return e.indexOf(t,Number(arguments[2])||0);var r=e.length>>>0,n=Number(arguments[2])||0;for(n=0>n?Math.ceil(n):Math.floor(n),0>n&&(n+=r);r>n;n++)if(n in e&&e[n]===t)return n;return-1}function s(e,t,r,n){var a,s=i(r,n),l={},c=[];for(var f in s)if(s[f]&&s[f].params&&(a=o(s[f].params),a.length))for(var p in a)u(c,a[p])>=0||(c.push(a[p]),l[a[p]]=e[a[p]]);return J({},l,t)}function l(e,t,r){if(!r){r=[];for(var n in e)r.push(n)}for(var a=0;a<r.length;a++){var i=r[a];if(e[i]!=t[i])return!1}return!0}function c(e,t){var r={};return B(e,function(e){r[e]=t[e]}),r}function f(e){var t={},r=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return B(r,function(r){r in e&&(t[r]=e[r])}),t}function p(e){var t={},r=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var n in e)-1==u(r,n)&&(t[n]=e[n]);return t}function h(e,t){var r=z(e),n=r?[]:{};return B(e,function(e,a){t(e,a)&&(n[r?n.length:a]=e)}),n}function v(e,t){var r=z(e)?[]:{};return B(e,function(e,n){r[n]=t(e,n)}),r}function $(e,t){var n=1,i=2,s={},l=[],c=s,f=J(e.when(s),{$$promises:s,$$values:s});this.study=function(s){function h(e,r){if(g[r]!==i){if(m.push(r),g[r]===n)throw m.splice(0,u(m,r)),new Error("Cyclic dependency: "+m.join(" -> "));if(g[r]=n,U(e))d.push(r,[function(){return t.get(e)}],l);else{var a=t.annotate(e);B(a,function(e){e!==r&&s.hasOwnProperty(e)&&h(s[e],e)}),d.push(r,e,a)}m.pop(),g[r]=i}}function v(e){return T(e)&&e.then&&e.$$promises}if(!T(s))throw new Error("'invocables' must be an object");var $=o(s||{}),d=[],m=[],g={};return B(s,h),s=m=g=null,function(n,i,o){function u(){--w||(b||a(y,i.$$values),m.$$values=y,m.$$promises=m.$$promises||!0,delete m.$$inheritedValues,h.resolve(y))}function s(e){m.$$failure=e,h.reject(e)}function l(r,a,i){function l(e){f.reject(e),s(e)}function c(){if(!R(m.$$failure))try{f.resolve(t.invoke(a,o,y)),f.promise.then(function(e){y[r]=e,u()},l)}catch(e){l(e)}}var f=e.defer(),p=0;B(i,function(e){g.hasOwnProperty(e)&&!n.hasOwnProperty(e)&&(p++,g[e].then(function(t){y[e]=t,--p||c()},l))}),p||c(),g[r]=f.promise}if(v(n)&&o===r&&(o=i,i=n,n=null),n){if(!T(n))throw new Error("'locals' must be an object")}else n=c;if(i){if(!v(i))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else i=f;var h=e.defer(),m=h.promise,g=m.$$promises={},y=J({},n),w=1+d.length/3,b=!1;if(R(i.$$failure))return s(i.$$failure),m;i.$$inheritedValues&&a(y,p(i.$$inheritedValues,$)),J(g,i.$$promises),i.$$values?(b=a(y,p(i.$$values,$)),m.$$inheritedValues=p(i.$$values,$),u()):(i.$$inheritedValues&&(m.$$inheritedValues=p(i.$$inheritedValues,$)),i.then(u,s));for(var S=0,E=d.length;E>S;S+=3)n.hasOwnProperty(d[S])?u():l(d[S],d[S+1],d[S+2]);return m}},this.resolve=function(e,t,r,n){return this.study(e)(t,r,n)}}function d(e,t,r){this.fromConfig=function(e,t,r){return R(e.template)?this.fromString(e.template,t):R(e.templateUrl)?this.fromUrl(e.templateUrl,t):R(e.templateProvider)?this.fromProvider(e.templateProvider,t,r):null},this.fromString=function(e,t){return F(e)?e(t):e},this.fromUrl=function(r,n){return F(r)&&(r=r(n)),null==r?null:e.get(r,{cache:t,headers:{Accept:"text/html"}}).then(function(e){return e.data})},this.fromProvider=function(e,t,n){return r.invoke(e,null,n||{params:t})}}function m(e,t,a){function i(t,r,n,a){if(d.push(t),v[t])return v[t];if(!/^\w+([-.]+\w+)*(?:\[\])?$/.test(t))throw new Error("Invalid parameter name '"+t+"' in pattern '"+e+"'");if($[t])throw new Error("Duplicate parameter name '"+t+"' in pattern '"+e+"'");return $[t]=new _.Param(t,r,n,a),$[t]}function o(e,t,r,n){var a=["",""],i=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return i;switch(r){case!1:a=["(",")"+(n?"?":"")];break;case!0:i=i.replace(/\/$/,""),a=["(?:/(",")|/)?"];break;default:a=["("+r+"|",")?"]}return i+a[0]+t+a[1]}function u(a,i){var o,u,s,l,c;return o=a[2]||a[3],c=t.params[o],s=e.substring(p,a.index),u=i?a[4]:a[4]||("*"==a[1]?".*":null),u&&(l=_.type(u)||n(_.type("string"),{pattern:new RegExp(u,t.caseInsensitive?"i":r)})),{id:o,regexp:u,segment:s,type:l,cfg:c}}t=J({params:{}},T(t)?t:{});var s,l=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,c=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,f="^",p=0,h=this.segments=[],v=a?a.params:{},$=this.params=a?a.params.$$new():new _.ParamSet,d=[];this.source=e;for(var m,g,y;(s=l.exec(e))&&(m=u(s,!1),!(m.segment.indexOf("?")>=0));)g=i(m.id,m.type,m.cfg,"path"),f+=o(m.segment,g.type.pattern.source,g.squash,g.isOptional),h.push(m.segment),p=l.lastIndex;y=e.substring(p);var w=y.indexOf("?");if(w>=0){var b=this.sourceSearch=y.substring(w);if(y=y.substring(0,w),this.sourcePath=e.substring(0,p+w),b.length>0)for(p=0;s=c.exec(b);)m=u(s,!0),g=i(m.id,m.type,m.cfg,"search"),p=l.lastIndex}else this.sourcePath=e,this.sourceSearch="";f+=o(y)+(t.strict===!1?"/?":"")+"$",h.push(y),this.regexp=new RegExp(f,t.caseInsensitive?"i":r),this.prefix=h[0],this.$$paramNames=d}function g(e){J(this,e)}function y(){function e(e){return null!=e?e.toString().replace(/~/g,"~~").replace(/\//g,"~2F"):e}function a(e){return null!=e?e.toString().replace(/~2F/g,"/").replace(/~~/g,"~"):e}function i(){return{strict:$,caseInsensitive:p}}function s(e){return F(e)||z(e)&&F(e[e.length-1])}function l(){for(;S.length;){var e=S.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");t.extend(w[e.name],f.invoke(e.def))}}function c(e){J(this,e||{})}_=this;var f,p=!1,$=!0,d=!1,w={},b=!0,S=[],E={string:{encode:e,decode:a,is:function(e){return null==e||!R(e)||"string"==typeof e},pattern:/[^\/]*/},"int":{encode:e,decode:function(e){return parseInt(e,10)},is:function(e){return R(e)&&this.decode(e.toString())===e},pattern:/\d+/},bool:{encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:function(e){return e===!0||e===!1},pattern:/0|1/},date:{encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):r},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):r},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(e,t){return this.is(e)&&this.is(t)&&e.toISOString()===t.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:t.toJson,decode:t.fromJson,is:t.isObject,equals:t.equals,pattern:/[^\/]*/},any:{encode:t.identity,decode:t.identity,equals:t.equals,pattern:/.*/}};y.$$getDefaultValue=function(e){if(!s(e.value))return e.value;if(!f)throw new Error("Injectable functions cannot be called at configuration time");return f.invoke(e.value)},this.caseInsensitive=function(e){return R(e)&&(p=e),p},this.strictMode=function(e){return R(e)&&($=e),$},this.defaultSquashPolicy=function(e){if(!R(e))return d;if(e!==!0&&e!==!1&&!U(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return d=e,e},this.compile=function(e,t){return new m(e,J(i(),t))},this.isMatcher=function(e){if(!T(e))return!1;var t=!0;return B(m.prototype,function(r,n){F(r)&&(t=t&&R(e[n])&&F(e[n]))}),t},this.type=function(e,t,r){if(!R(t))return w[e];if(w.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return w[e]=new g(J({name:e},t)),r&&(S.push({name:e,def:r}),b||l()),this},B(E,function(e,t){w[t]=new g(J({name:t},e))}),w=n(w,{}),this.$get=["$injector",function(e){return f=e,b=!1,l(),B(E,function(e,t){w[t]||(w[t]=new g(e))}),this}],this.Param=function(e,n,a,i){function l(e){var t=T(e)?o(e):[],r=-1===u(t,"value")&&-1===u(t,"type")&&-1===u(t,"squash")&&-1===u(t,"array");return r&&(e={value:e}),e.$$fn=s(e.value)?e.value:function(){return e.value},e}function c(r,n,a){if(r.type&&n)throw new Error("Param '"+e+"' has two type configurations.");return n?n:r.type?t.isString(r.type)?w[r.type]:r.type instanceof g?r.type:new g(r.type):"config"===a?w.any:w.string}function p(){var t={array:"search"===i?"auto":!1},r=e.match(/\[\]$/)?{array:!0}:{};return J(t,r,a).array}function $(e,t){var r=e.squash;if(!t||r===!1)return!1;if(!R(r)||null==r)return d;if(r===!0||U(r))return r;throw new Error("Invalid squash policy: '"+r+"'. Valid policies: false, true, or arbitrary string")}function m(e,t,n,a){var i,o,s=[{from:"",to:n||t?r:""},{from:null,to:n||t?r:""}];return i=z(e.replace)?e.replace:[],U(a)&&i.push({from:a,to:r}),o=v(i,function(e){return e.from}),h(s,function(e){return-1===u(o,e.from)}).concat(i)}function y(){if(!f)throw new Error("Injectable functions cannot be called at configuration time");var e=f.invoke(a.$$fn);if(null!==e&&e!==r&&!E.type.is(e))throw new Error("Default value ("+e+") for parameter '"+E.id+"' is not an instance of Type ("+E.type.name+")");return e}function b(e){function t(e){return function(t){return t.from===e}}function r(e){var r=v(h(E.replace,t(e)),function(e){return e.to});return r.length?r[0]:e}return e=r(e),R(e)?E.type.$normalize(e):y()}function S(){return"{Param:"+e+" "+n+" squash: '"+j+"' optional: "+P+"}"}var E=this;a=l(a),n=c(a,n,i);var x=p();n=x?n.$asArray(x,"search"===i):n,"string"!==n.name||x||"path"!==i||a.value!==r||(a.value="");var P=a.value!==r,j=$(a,P),A=m(a,x,P,j);J(this,{id:e,type:n,location:i,array:x,squash:j,replace:A,isOptional:P,value:b,dynamic:r,config:a,toString:S})},c.prototype={$$new:function(){return n(this,J(new c,{$$parent:this}))},$$keys:function(){for(var e=[],t=[],r=this,n=o(c.prototype);r;)t.push(r),r=r.$$parent;return t.reverse(),B(t,function(t){B(o(t),function(t){-1===u(e,t)&&-1===u(n,t)&&e.push(t)})}),e},$$values:function(e){var t={},r=this;return B(r.$$keys(),function(n){t[n]=r[n].value(e&&e[n])}),t},$$equals:function(e,t){var r=!0,n=this;return B(n.$$keys(),function(a){var i=e&&e[a],o=t&&t[a];n[a].type.equals(i,o)||(r=!1)}),r},$$validates:function(e){var n,a,i,o,u,s=this.$$keys();for(n=0;n<s.length&&(a=this[s[n]],i=e[s[n]],i!==r&&null!==i||!a.isOptional);n++){if(o=a.type.$normalize(i),!a.type.is(o))return!1;if(u=a.type.encode(o),t.isString(u)&&!a.type.pattern.exec(u))return!1}return!0},$$parent:r},this.ParamSet=c}function w(e,n){function a(e){var t=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);return null!=t?t[1].replace(/\\(.)/g,"$1"):""}function i(e,t){return e.replace(/\$(\$|\d{1,2})/,function(e,r){return t["$"===r?0:Number(r)]})}function o(e,t,r){if(!r)return!1;var n=e.invoke(t,t,{$match:r});return R(n)?n:!0}function u(n,a,i,o,u){function p(e,t,r){return"/"===d?e:t?d.slice(0,-1)+e:r?d.slice(1)+e:e}function h(e){function t(e){var t=e(i,n);return t?(U(t)&&n.replace().url(t),!0):!1}if(!e||!e.defaultPrevented){$&&n.url()===$;$=r;var a,o=l.length;for(a=0;o>a;a++)if(t(l[a]))return;c&&t(c)}}function v(){return s=s||a.$on("$locationChangeSuccess",h)}var $,d=o.baseHref(),m=n.url();return f||v(),{sync:function(){h()},listen:function(){return v()},update:function(e){return e?void(m=n.url()):void(n.url()!==m&&(n.url(m),n.replace()))},push:function(e,t,a){var i=e.format(t||{});null!==i&&t&&t["#"]&&(i+="#"+t["#"]),n.url(i),$=a&&a.$$avoidResync?n.url():r,a&&a.replace&&n.replace()},href:function(r,a,i){if(!r.validates(a))return null;var o=e.html5Mode();t.isObject(o)&&(o=o.enabled),o=o&&u.history;var s=r.format(a);if(i=i||{},o||null===s||(s="#"+e.hashPrefix()+s),null!==s&&a&&a["#"]&&(s+="#"+a["#"]),s=p(s,o,i.absolute),!i.absolute||!s)return s;var l=!o&&s?"/":"",c=n.port();return c=80===c||443===c?"":":"+c,[n.protocol(),"://",n.host(),c,l,s].join("")}}}var s,l=[],c=null,f=!1;this.rule=function(e){if(!F(e))throw new Error("'rule' must be a function");return l.push(e),this},this.otherwise=function(e){if(U(e)){var t=e;e=function(){return t}}else if(!F(e))throw new Error("'rule' must be a function");return c=e,this},this.when=function(e,t){var r,u=U(t);if(U(e)&&(e=n.compile(e)),!u&&!F(t)&&!z(t))throw new Error("invalid 'handler' in when()");var s={matcher:function(e,t){return u&&(r=n.compile(t),t=["$match",function(e){return r.format(e)}]),J(function(r,n){return o(r,t,e.exec(n.path(),n.search()))},{prefix:U(e.prefix)?e.prefix:""})},regex:function(e,t){if(e.global||e.sticky)throw new Error("when() RegExp must not be global or sticky");return u&&(r=t,t=["$match",function(e){return i(r,e)}]),J(function(r,n){return o(r,t,e.exec(n.path()))},{prefix:a(e)})}},l={matcher:n.isMatcher(e),regex:e instanceof RegExp};for(var c in l)if(l[c])return this.rule(s[c](e,t));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(e){e===r&&(e=!0),f=e},this.$get=u,u.$inject=["$location","$rootScope","$injector","$browser","$sniffer"]}function b(e,a){function i(e){return 0===e.indexOf(".")||0===e.indexOf("^")}function p(e,t){if(!e)return r;var n=U(e),a=n?e:e.name,o=i(a);if(o){if(!t)throw new Error("No reference point given for path '"+a+"'");t=p(t);for(var u=a.split("."),s=0,l=u.length,c=t;l>s;s++)if(""!==u[s]||0!==s){if("^"!==u[s])break;if(!c.parent)throw new Error("Path '"+a+"' not valid for state '"+t.name+"'");c=c.parent}else c=t;u=u.slice(s).join("."),a=c.name+(c.name&&u?".":"")+u}var f=P[a];return!f||!n&&(n||f!==e&&f.self!==e)?r:f}function h(e,t){j[e]||(j[e]=[]),j[e].push(t)}function $(e){for(var t=j[e]||[];t.length;)d(t.shift())}function d(t){t=n(t,{self:t,resolve:t.resolve||{},toString:function(){return this.name}});var r=t.name;if(!U(r)||r.indexOf("@")>=0)throw new Error("State must have a valid name");if(P.hasOwnProperty(r))throw new Error("State '"+r+"' is already defined");var a=-1!==r.indexOf(".")?r.substring(0,r.lastIndexOf(".")):U(t.parent)?t.parent:T(t.parent)&&U(t.parent.name)?t.parent.name:"";if(a&&!P[a])return h(a,t.self);for(var i in O)F(O[i])&&(t[i]=O[i](t,O.$delegates[i]));return P[r]=t,!t[A]&&t.url&&e.when(t.url,["$match","$stateParams",function(e,r){x.$current.navigable==t&&l(e,r)||x.transitionTo(t,e,{inherit:!0,location:!1})}]),$(r),t}function m(e){return e.indexOf("*")>-1}function g(e){for(var t=e.split("."),r=x.$current.name.split("."),n=0,a=t.length;a>n;n++)"*"===t[n]&&(r[n]="*");return"**"===t[0]&&(r=r.slice(u(r,t[1])),r.unshift("**")),"**"===t[t.length-1]&&(r.splice(u(r,t[t.length-2])+1,Number.MAX_VALUE),r.push("**")),t.length!=r.length?!1:r.join("")===t.join("")}function y(e,t){return U(e)&&!R(t)?O[e]:F(t)&&U(e)?(O[e]&&!O.$delegates[e]&&(O.$delegates[e]=O[e]),O[e]=t,this):this}function w(e,t){return T(e)?t=e:t.name=e,d(t),this}function b(e,a,i,u,f,h,$,d,y){function w(t,r,n,i){var o=e.$broadcast("$stateNotFound",t,r,n);if(o.defaultPrevented)return $.update(),k;if(!o.retry)return null;if(i.$retry)return $.update(),q;var u=x.transition=a.when(o.retry);return u.then(function(){return u!==x.transition?j:(t.options.$retry=!0,x.transitionTo(t.to,t.toParams,t.options))},function(){return k}),$.update(),u}function b(e,r,n,o,s,l){function p(){var r=[];return B(e.views,function(n,a){var o=n.resolve&&n.resolve!==e.resolve?n.resolve:{};o.$template=[function(){return i.load(a,{view:n,locals:s.globals,params:h,notify:l.notify})||""}],r.push(f.resolve(o,s.globals,s.resolve,e).then(function(r){if(F(n.controllerProvider)||z(n.controllerProvider)){var i=t.extend({},o,s.globals);r.$$controller=u.invoke(n.controllerProvider,null,i)}else r.$$controller=n.controller;r.$$state=e,r.$$controllerAs=n.controllerAs,s[a]=r}))}),a.all(r).then(function(){return s.globals})}var h=n?r:c(e.params.$$keys(),r),v={$stateParams:h};s.resolve=f.resolve(e.resolve,v,s.resolve,e);var $=[s.resolve.then(function(e){s.globals=e})];return o&&$.push(o),a.all($).then(p).then(function(e){return s})}var j=a.reject(new Error("transition superseded")),O=a.reject(new Error("transition prevented")),k=a.reject(new Error("transition aborted")),q=a.reject(new Error("transition failed"));return E.locals={resolve:null,globals:{$stateParams:{}}},x={params:{},current:E.self,$current:E,transition:null},x.reload=function(e){return x.transitionTo(x.current,h,{reload:e||!0,inherit:!1,notify:!0})},x.go=function(e,t,r){return x.transitionTo(e,t,J({inherit:!0,relative:x.$current},r))},x.transitionTo=function(t,r,i){r=r||{},i=J({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},i||{});var o,l=x.$current,f=x.params,v=l.path,d=p(t,i.relative),m=r["#"];if(!R(d)){var g={to:t,toParams:r,options:i},y=w(g,l.self,f,i);if(y)return y;if(t=g.to,r=g.toParams,i=g.options,d=p(t,i.relative),!R(d)){if(!i.relative)throw new Error("No such state '"+t+"'");throw new Error("Could not resolve '"+t+"' from state '"+i.relative+"'")}}if(d[A])throw new Error("Cannot transition to abstract state '"+t+"'");if(i.inherit&&(r=s(h,r||{},x.$current,d)),!d.params.$$validates(r))return q;r=d.params.$$values(r),t=d;var P=t.path,k=0,C=P[k],I=E.locals,V=[];if(i.reload){if(U(i.reload)||T(i.reload)){if(T(i.reload)&&!i.reload.name)throw new Error("Invalid reload state object");var M=i.reload===!0?v[0]:p(i.reload);if(i.reload&&!M)throw new Error("No such reload state '"+(U(i.reload)?i.reload:i.reload.name)+"'");for(;C&&C===v[k]&&C!==M;)I=V[k]=C.locals,k++,C=P[k]}}else for(;C&&C===v[k]&&C.ownParams.$$equals(r,f);)I=V[k]=C.locals,k++,C=P[k];if(S(t,r,l,f,I,i))return m&&(r["#"]=m),x.params=r,K(x.params,h),K(c(t.params.$$keys(),h),t.locals.globals.$stateParams),i.location&&t.navigable&&t.navigable.url&&($.push(t.navigable.url,r,{$$avoidResync:!0,replace:"replace"===i.location}),$.update(!0)),x.transition=null,a.when(x.current);if(r=c(t.params.$$keys(),r||{}),m&&(r["#"]=m),i.notify&&e.$broadcast("$stateChangeStart",t.self,r,l.self,f,i).defaultPrevented)return e.$broadcast("$stateChangeCancel",t.self,r,l.self,f),null==x.transition&&$.update(),O;for(var D=a.when(I),N=k;N<P.length;N++,C=P[N])I=V[N]=n(I),D=b(C,r,C===t,D,I,i);var F=x.transition=D.then(function(){var n,a,o;if(x.transition!==F)return j;for(n=v.length-1;n>=k;n--)o=v[n],o.self.onExit&&u.invoke(o.self.onExit,o.self,o.locals.globals),o.locals=null;for(n=k;n<P.length;n++)a=P[n],a.locals=V[n],a.self.onEnter&&u.invoke(a.self.onEnter,a.self,a.locals.globals);return x.transition!==F?j:(x.$current=t,x.current=t.self,x.params=r,K(x.params,h),x.transition=null,i.location&&t.navigable&&$.push(t.navigable.url,t.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===i.location}),i.notify&&e.$broadcast("$stateChangeSuccess",t.self,r,l.self,f),$.update(!0),x.current)},function(n){return x.transition!==F?j:(x.transition=null,o=e.$broadcast("$stateChangeError",t.self,r,l.self,f,n),o.defaultPrevented||$.update(),a.reject(n))});return F},x.is=function(e,t,n){n=J({relative:x.$current},n||{});var a=p(e,n.relative);return R(a)?x.$current!==a?!1:t?l(a.params.$$values(t),h):!0:r},x.includes=function(e,t,n){if(n=J({relative:x.$current},n||{}),U(e)&&m(e)){if(!g(e))return!1;e=x.$current.name}var a=p(e,n.relative);return R(a)?R(x.$current.includes[a.name])?t?l(a.params.$$values(t),h,o(t)):!0:!1:r},x.href=function(e,t,n){n=J({lossy:!0,inherit:!0,absolute:!1,relative:x.$current},n||{});var a=p(e,n.relative);if(!R(a))return null;n.inherit&&(t=s(h,t||{},x.$current,a));var i=a&&n.lossy?a.navigable:a;return i&&i.url!==r&&null!==i.url?$.href(i.url,c(a.params.$$keys().concat("#"),t||{}),{absolute:n.absolute}):null},x.get=function(e,t){if(0===arguments.length)return v(o(P),function(e){return P[e].self});var r=p(e,t||x.$current);return r&&r.self?r.self:null},x}function S(e,t,r,n,a,i){function o(e,t,r){function n(t){return"search"!=e.params[t].location}var a=e.params.$$keys().filter(n),i=f.apply({},[e.params].concat(a)),o=new _.ParamSet(i);return o.$$equals(t,r)}return!i.reload&&e===r&&(a===r.locals||e.self.reloadOnSearch===!1&&o(r,n,t))?!0:void 0}var E,x,P={},j={},A="abstract",O={parent:function(e){if(R(e.parent)&&e.parent)return p(e.parent);var t=/^(.+)\.[^.]+$/.exec(e.name);return t?p(t[1]):E},data:function(e){return e.parent&&e.parent.data&&(e.data=e.self.data=n(e.parent.data,e.data)),e.data},url:function(e){var t=e.url,r={params:e.params||{}};if(U(t))return"^"==t.charAt(0)?a.compile(t.substring(1),r):(e.parent.navigable||E).url.concat(t,r);if(!t||a.isMatcher(t))return t;throw new Error("Invalid url '"+t+"' in state '"+e+"'")},navigable:function(e){return e.url?e:e.parent?e.parent.navigable:null},ownParams:function(e){var t=e.url&&e.url.params||new _.ParamSet;return B(e.params||{},function(e,r){t[r]||(t[r]=new _.Param(r,null,e,"config"))}),t},params:function(e){var t=f(e.ownParams,e.ownParams.$$keys());return e.parent&&e.parent.params?J(e.parent.params.$$new(),t):new _.ParamSet},views:function(e){var t={};return B(R(e.views)?e.views:{"":e},function(r,n){n.indexOf("@")<0&&(n+="@"+e.parent.name),t[n]=r}),t},path:function(e){return e.parent?e.parent.path.concat(e):[]},includes:function(e){var t=e.parent?J({},e.parent.includes):{};return t[e.name]=!0,t},$delegates:{}};E=d({name:"",url:"^",views:null,"abstract":!0}),E.navigable=null,this.decorator=y,this.state=w,this.$get=b,b.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function S(){function e(e,t){return{load:function(e,r){var n,a={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return r=J(a,r),r.view&&(n=t.fromConfig(r.view,r.params,r.locals)),n}}}this.$get=e,e.$inject=["$rootScope","$templateFactory"]}function E(){var e=!1;this.useAnchorScroll=function(){e=!0},this.$get=["$anchorScroll","$timeout",function(t,r){return e?t:function(e){return r(function(){e[0].scrollIntoView()},0,!1)}}]}function x(e,r,n,a){function i(){return r.has?function(e){return r.has(e)?r.get(e):null}:function(e){try{return r.get(e)}catch(t){return null}}}function o(e,r){function n(e){return 1===Y&&G>=4?!!l.enabled(e):1===Y&&G>=2?!!l.enabled():!!s}var a={enter:function(e,t,r){t.after(e),r()},leave:function(e,t){e.remove(),t()}};if(e.noanimation)return a;if(l)return{enter:function(e,r,i){n(e)?t.version.minor>2?l.enter(e,null,r).then(i):l.enter(e,null,r,i):a.enter(e,r,i)},leave:function(e,r){n(e)?t.version.minor>2?l.leave(e).then(r):l.leave(e,r):a.leave(e,r)}};if(s){var i=s&&s(r,e);return{enter:function(e,t,r){i.enter(e,null,t),r()},leave:function(e,t){i.leave(e),t()}}}return a}var u=i(),s=u("$animator"),l=u("$animate"),c={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(r,i,u){return function(r,i,s){function l(){function e(){t&&t.remove(),r&&r.$destroy()}var t=f,r=h;r&&(r._willBeDestroyed=!0),p?(m.leave(p,function(){e(),f=null}),f=p):(e(),f=null),p=null,h=null}function c(o){var c,f=j(r,s,i,a),g=f&&e.$current&&e.$current.locals[f];if((o||g!==v)&&!r._willBeDestroyed){c=r.$new(),v=e.$current.locals[f],c.$emit("$viewContentLoading",f);var y=u(c,function(e){m.enter(e,i,function(){h&&h.$emit("$viewContentAnimationEnded"),(t.isDefined(d)&&!d||r.$eval(d))&&n(e)}),l()});p=y,h=c,h.$emit("$viewContentLoaded",f),h.$eval($)}}var f,p,h,v,$=s.onload||"",d=s.autoscroll,m=o(s,r);r.$on("$stateChangeSuccess",function(){c(!1)}),c(!0)}}};return c}function P(e,t,r,n){return{restrict:"ECA",priority:-400,compile:function(a){var i=a.html();return function(a,o,u){var s=r.$current,l=j(a,u,o,n),c=s&&s.locals[l];if(c){o.data("$uiView",{name:l,state:c.$$state}),o.html(c.$template?c.$template:i);var f=e(o.contents());if(c.$$controller){c.$scope=a,c.$element=o;var p=t(c.$$controller,c);c.$$controllerAs&&(a[c.$$controllerAs]=p),o.data("$ngControllerController",p),o.children().data("$ngControllerController",p)}f(a)}}}}}function j(e,t,r,n){var a=n(t.uiView||t.name||"")(e),i=r.inheritedData("$uiView");return a.indexOf("@")>=0?a:a+"@"+(i?i.state.name:"")}function A(e,t){var r,n=e.match(/^\s*({[^}]*})\s*$/);if(n&&(e=t+"("+n[1]+")"),r=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!r||4!==r.length)throw new Error("Invalid state ref '"+e+"'");return{state:r[1],paramExpr:r[3]||null}}function O(e){var t=e.parent().inheritedData("$uiView");return t&&t.state&&t.state.name?t.state:void 0}function k(e){var t="[object SVGAnimatedString]"===Object.prototype.toString.call(e.prop("href")),r="FORM"===e[0].nodeName;return{attr:r?"action":t?"xlink:href":"href",isAnchor:"A"===e.prop("tagName").toUpperCase(),clickable:!r}}function q(e,t,r,n,a){return function(i){var o=i.which||i.button,u=a();if(!(o>1||i.ctrlKey||i.metaKey||i.shiftKey||e.attr("target"))){var s=r(function(){t.go(u.state,u.params,u.options)});i.preventDefault();var l=n.isAnchor&&!u.href?1:0;i.preventDefault=function(){l--<=0&&r.cancel(s)}}}}function C(e,t){return{relative:O(e)||t.$current,inherit:!0}}function I(e,r){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,a,i,o){var u=A(i.uiSref,e.current.name),s={state:u.state,href:null,params:null},l=k(a),c=o[1]||o[0];s.options=J(C(a,e),i.uiSrefOpts?n.$eval(i.uiSrefOpts):{});var f=function(r){r&&(s.params=t.copy(r)),s.href=e.href(u.state,s.params,s.options),c&&c.$$addStateInfo(u.state,s.params),null!==s.href&&i.$set(l.attr,s.href)};u.paramExpr&&(n.$watch(u.paramExpr,function(e){e!==s.params&&f(e)},!0),s.params=t.copy(n.$eval(u.paramExpr))),f(),l.clickable&&a.bind("click",q(a,e,r,l,function(){return s}))}}}function V(e,t){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(r,n,a,i){function o(t){f.state=t[0],f.params=t[1],f.options=t[2],f.href=e.href(f.state,f.params,f.options),s&&s.$$addStateInfo(f.state,f.params),f.href&&a.$set(u.attr,f.href)}var u=k(n),s=i[1]||i[0],l=[a.uiState,a.uiStateParams||null,a.uiStateOpts||null],c="["+l.map(function(e){return e||"null"}).join(", ")+"]",f={state:null,params:null,options:null,href:null};r.$watch(c,o,!0),o(r.$eval(c)),u.clickable&&n.bind("click",q(n,e,t,u,function(){return f}))}}}function M(e,t,r){return{restrict:"A",controller:["$scope","$element","$attrs","$timeout",function(t,n,a,i){function o(t,r,a){var i=e.get(t,O(n)),o=u(t,r);$.push({state:i||{name:t},params:r,hash:o}),d[o]=a}function u(e,r){if(!U(e))throw new Error("state should be a string");return T(r)?e+L(r):(r=t.$eval(r),T(r)?e+L(r):e)}function s(){for(var e=0;e<$.length;e++)f($[e].state,$[e].params)?l(n,d[$[e].hash]):c(n,d[$[e].hash]),p($[e].state,$[e].params)?l(n,h):c(n,h)}function l(e,t){i(function(){e.addClass(t)})}function c(e,t){e.removeClass(t)}function f(t,r){return e.includes(t.name,r)}function p(t,r){return e.is(t.name,r)}var h,v,$=[],d={};h=r(a.uiSrefActiveEq||"",!1)(t);try{v=t.$eval(a.uiSrefActive)}catch(m){}v=v||r(a.uiSrefActive||"",!1)(t),T(v)&&B(v,function(r,n){if(U(r)){var a=A(r,e.current.name);o(a.state,t.$eval(a.paramExpr),n)}}),this.$$addStateInfo=function(e,t){T(v)&&$.length>0||(o(e,t,v),s())},t.$on("$stateChangeSuccess",s),s()}]}}function D(e){var t=function(t,r){return e.is(t,r)};return t.$stateful=!0,t}function N(e){var t=function(t,r,n){return e.includes(t,r,n)};return t.$stateful=!0,t}var R=t.isDefined,F=t.isFunction,U=t.isString,T=t.isObject,z=t.isArray,B=t.forEach,J=t.extend,K=t.copy,L=t.toJson;t.module("ui.router.util",["ng"]),t.module("ui.router.router",["ui.router.util"]),t.module("ui.router.state",["ui.router.router","ui.router.util"]),t.module("ui.router",["ui.router.state"]),t.module("ui.router.compat",["ui.router"]),$.$inject=["$q","$injector"],t.module("ui.router.util").service("$resolve",$),d.$inject=["$http","$templateCache","$injector"],t.module("ui.router.util").service("$templateFactory",d);var _;m.prototype.concat=function(e,t){var r={caseInsensitive:_.caseInsensitive(),strict:_.strictMode(),squash:_.defaultSquashPolicy()};return new m(this.sourcePath+e+this.sourceSearch,J(r,t),this)},m.prototype.toString=function(){return this.source},m.prototype.exec=function(e,t){function r(e){function t(e){return e.split("").reverse().join("")}function r(e){return e.replace(/\\-/g,"-")}var n=t(e).split(/-(?!\\)/),a=v(n,t);return v(a,r).reverse()}var n=this.regexp.exec(e);if(!n)return null;t=t||{};var a,i,o,u=this.parameters(),s=u.length,l=this.segments.length-1,c={};if(l!==n.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");var f,p;for(a=0;l>a;a++){for(o=u[a],f=this.params[o],p=n[a+1],i=0;i<f.replace.length;i++)f.replace[i].from===p&&(p=f.replace[i].to);p&&f.array===!0&&(p=r(p)),R(p)&&(p=f.type.decode(p)),c[o]=f.value(p)}for(;s>a;a++){for(o=u[a],c[o]=this.params[o].value(t[o]),f=this.params[o],p=t[o],i=0;i<f.replace.length;i++)f.replace[i].from===p&&(p=f.replace[i].to);R(p)&&(p=f.type.decode(p)),c[o]=f.value(p)}return c},m.prototype.parameters=function(e){return R(e)?this.params[e]||null:this.$$paramNames},m.prototype.validates=function(e){return this.params.$$validates(e)},m.prototype.format=function(e){function t(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})}e=e||{};var r=this.segments,n=this.parameters(),a=this.params;if(!this.validates(e))return null;var i,o=!1,u=r.length-1,s=n.length,l=r[0];for(i=0;s>i;i++){var c=u>i,f=n[i],p=a[f],h=p.value(e[f]),$=p.isOptional&&p.type.equals(p.value(),h),d=$?p.squash:!1,m=p.type.encode(h);if(c){var g=r[i+1],y=i+1===u;if(d===!1)null!=m&&(l+=z(m)?v(m,t).join("-"):encodeURIComponent(m)),l+=g;else if(d===!0){var w=l.match(/\/$/)?/\/?(.*)/:/(.*)/;l+=g.match(w)[1]}else U(d)&&(l+=d+g);y&&p.squash===!0&&"/"===l.slice(-1)&&(l=l.slice(0,-1))}else{if(null==m||$&&d!==!1)continue;if(z(m)||(m=[m]),0===m.length)continue;m=v(m,encodeURIComponent).join("&"+f+"="),l+=(o?"&":"?")+(f+"="+m),o=!0}}return l},g.prototype.is=function(e,t){return!0},g.prototype.encode=function(e,t){return e},g.prototype.decode=function(e,t){return e},g.prototype.equals=function(e,t){return e==t},g.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},g.prototype.pattern=/.*/,g.prototype.toString=function(){return"{Type:"+this.name+"}"},g.prototype.$normalize=function(e){return this.is(e)?e:this.decode(e)},g.prototype.$asArray=function(e,t){function n(e,t){function n(e,t){return function(){return e[t].apply(e,arguments)}}function a(e){return z(e)?e:R(e)?[e]:[]}function i(e){switch(e.length){case 0:return r;case 1:return"auto"===t?e[0]:e;default:return e}}function o(e){return!e}function u(e,t){return function(r){if(z(r)&&0===r.length)return r;r=a(r);var n=v(r,e);return t===!0?0===h(n,o).length:i(n)}}function s(e){return function(t,r){var n=a(t),i=a(r);if(n.length!==i.length)return!1;for(var o=0;o<n.length;o++)if(!e(n[o],i[o]))return!1;return!0}}this.encode=u(n(e,"encode")),this.decode=u(n(e,"decode")),this.is=u(n(e,"is"),!0),this.equals=s(n(e,"equals")),this.pattern=e.pattern,this.$normalize=u(n(e,"$normalize")),this.name=e.name,this.$arrayMode=t}if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new n(this,e)},t.module("ui.router.util").provider("$urlMatcherFactory",y),t.module("ui.router.util").run(["$urlMatcherFactory",function(e){}]),w.$inject=["$locationProvider","$urlMatcherFactoryProvider"],t.module("ui.router.router").provider("$urlRouter",w),b.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],t.module("ui.router.state").factory("$stateParams",function(){return{}}).provider("$state",b),S.$inject=[],t.module("ui.router.state").provider("$view",S),t.module("ui.router.state").provider("$uiViewScroll",E);var Y=t.version.major,G=t.version.minor;x.$inject=["$state","$injector","$uiViewScroll","$interpolate"],P.$inject=["$compile","$controller","$state","$interpolate"],t.module("ui.router.state").directive("uiView",x),t.module("ui.router.state").directive("uiView",P),I.$inject=["$state","$timeout"],V.$inject=["$state","$timeout"],M.$inject=["$state","$stateParams","$interpolate"],t.module("ui.router.state").directive("uiSref",I).directive("uiSrefActive",M).directive("uiSrefActiveEq",M).directive("uiState",V),
D.$inject=["$state"],N.$inject=["$state"],t.module("ui.router.state").filter("isState",D).filter("includedByState",N)}(window,window.angular);
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("angular")):"function"==typeof define&&define.amd?define("angular-cache",["angular"],t):"object"==typeof exports?exports.angularCacheModuleName=t(require("angular")):e.angularCacheModuleName=t(e.angular)}(this,function(e){return function(e){function t(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return e[i].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";function i(){this.$get=function(){return o.BinaryHeap}}function n(){this.defaults=o.defaults,this.defaults.storagePrefix="angular-cache.caches.",this.$get=["$q",function(e){return o.utils.Promise=e,o}]}var s=r(1),o=r(2);o.utils.equals=s.equals,o.utils.isObject=s.isObject,o.utils.fromJson=s.fromJson,s.module("angular-cache",[]).provider("BinaryHeap",i).provider("CacheFactory",n),e.exports="angular-cache";try{e.exports.name="angular-cache"}catch(a){}},function(t,r){t.exports=e},function(e,t,r){!function(t,r){e.exports=r()}(this,function(){return function(e){function t(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return e[i].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";function i(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e}function n(e){var t=[],r=void 0;if(!p.isObject(e))return t;for(r in e)e.hasOwnProperty(r)&&t.push(r);return t}function s(e){return e&&"function"==typeof e.then}function o(e){return p.isNumber(e)?e.toString():e}function a(e){var t={},r=void 0;if(!p.isObject(e))return t;for(r in e)e.hasOwnProperty(r)&&(t[r]=r);return t}function c(e,t){if(e in $)throw new Error(e+" already exists!");if(!p.isString(e))throw new Error("cacheId must be a string!");var r={},c={},u=null,h=new l(function(e){return e.expires},p.equals),f=new l(function(e){return e.accessed},p.equals),d=$[e]={$$id:e,destroy:function(){clearInterval(this.$$cacheFlushIntervalId),clearInterval(this.$$recycleFreqId),this.removeAll(),u&&(u().removeItem(this.$$prefix+".keys"),u().removeItem(this.$$prefix)),u=null,r=null,f=null,h=null,this.$$prefix=null,delete $[this.$$id]},disable:function(){this.$$disabled=!0},enable:function(){delete this.$$disabled},get:function(e,t){var n=this;if(Array.isArray(e)){var s=function(){var r=e,i=[];return r.forEach(function(e){var r=n.get(e,t);null!==r&&void 0!==r&&i.push(r)}),{v:i}}();if("object"===("undefined"==typeof s?"undefined":i(s)))return s.v}else if(e=o(e),this.$$disabled)return;if(t=t||{},!p.isString(e))throw new Error("key must be a string!");if(t&&!p.isObject(t))throw new Error("options must be an object!");if(t.onExpire&&!p.isFunction(t.onExpire))throw new Error("options.onExpire must be a function!");var a=void 0;if(u){if(c[e])return c[e];var l=u().getItem(this.$$prefix+".data."+e);if(!l)return;a=p.fromJson(l)}else if(p.isObject(r)){if(!(e in r))return;a=r[e]}var h=a.value,m=(new Date).getTime();return u?(f.remove({key:e,accessed:a.accessed}),a.accessed=m,f.push({key:e,accessed:m})):(f.remove(a),a.accessed=m,f.push(a)),"passive"===this.$$deleteOnExpire&&"expires"in a&&a.expires<m?(this.remove(e),this.$$onExpire?this.$$onExpire(e,a.value,t.onExpire):t.onExpire&&t.onExpire.call(this,e,a.value),h=void 0):u&&u().setItem(this.$$prefix+".data."+e,JSON.stringify(a)),h},info:function(e){if(e){var t=void 0;if(u){var i=u().getItem(this.$$prefix+".data."+e);return i?(t=p.fromJson(i),{created:t.created,accessed:t.accessed,expires:t.expires,isExpired:(new Date).getTime()-t.created>(t.maxAge||this.$$maxAge)}):void 0}return p.isObject(r)&&e in r?(t=r[e],{created:t.created,accessed:t.accessed,expires:t.expires,isExpired:(new Date).getTime()-t.created>(t.maxAge||this.$$maxAge)}):void 0}return{id:this.$$id,capacity:this.$$capacity,maxAge:this.$$maxAge,deleteOnExpire:this.$$deleteOnExpire,onExpire:this.$$onExpire,cacheFlushInterval:this.$$cacheFlushInterval,recycleFreq:this.$$recycleFreq,storageMode:this.$$storageMode,storageImpl:u?u():void 0,disabled:!!this.$$disabled,size:f&&f.size()||0}},keys:function(){if(u){var e=u().getItem(this.$$prefix+".keys");return e?p.fromJson(e):[]}return n(r)},keySet:function(){if(u){var e=u().getItem(this.$$prefix+".keys"),t={};if(e)for(var i=p.fromJson(e),n=0;n<i.length;n++)t[i[n]]=i[n];return t}return a(r)},put:function(e,t,i){var n=this;i=i||{};var a="storeOnResolve"in i?!!i.storeOnResolve:this.$$storeOnResolve,l="storeOnReject"in i?!!i.storeOnReject:this.$$storeOnReject,m=function(t,r){return function(i){if(t&&(delete c[e],p.isObject(i)&&"status"in i&&"data"in i?(i=[i.status,i.data,i.headers(),i.statusText],n.put(e,i)):n.put(e,i)),r){if(p.Promise)return p.Promise.reject(i);throw i}return i}};if(!this.$$disabled&&p.isObject(r)&&null!==t&&void 0!==t){if(e=o(e),!p.isString(e))throw new Error("key must be a string!");var $=(new Date).getTime(),d={key:e,value:s(t)?t.then(m(a,!1),m(l,!0)):t,created:$,accessed:$};if(i.maxAge&&(d.maxAge=i.maxAge),d.expires=d.created+(d.maxAge||this.$$maxAge),u){if(s(d.value))return c[e]=d.value,c[e];var v=u().getItem(this.$$prefix+".keys"),g=v?p.fromJson(v):[],x=u().getItem(this.$$prefix+".data."+e);x&&this.remove(e),h.push({key:e,expires:d.expires}),f.push({key:e,accessed:d.accessed}),u().setItem(this.$$prefix+".data."+e,JSON.stringify(d));for(var y=!1,b=0;b<g.length;b++)if(g[b]===e){y=!0;break}y||g.push(e),u().setItem(this.$$prefix+".keys",JSON.stringify(g))}else r[e]&&this.remove(e),h.push(d),f.push(d),r[e]=d,delete c[e];return f.size()>this.$$capacity&&this.remove(f.peek().key),t}},remove:function(e){if(e+="",delete c[e],u){var t=u().getItem(this.$$prefix+".data."+e);if(t){var i=p.fromJson(t);f.remove({key:e,accessed:i.accessed}),h.remove({key:e,expires:i.expires}),u().removeItem(this.$$prefix+".data."+e);var n=u().getItem(this.$$prefix+".keys"),s=n?p.fromJson(n):[],o=s.indexOf(e);return o>=0&&s.splice(o,1),u().setItem(this.$$prefix+".keys",JSON.stringify(s)),i.value}}else if(p.isObject(r)){var a=r[e]?r[e].value:void 0;return f.remove(r[e]),h.remove(r[e]),r[e]=null,delete r[e],a}},removeAll:function(){if(u){f.removeAll(),h.removeAll();var e=u().getItem(this.$$prefix+".keys");if(e)for(var t=p.fromJson(e),i=0;i<t.length;i++)this.remove(t[i]);u().setItem(this.$$prefix+".keys",JSON.stringify([]))}else if(p.isObject(r)){f.removeAll(),h.removeAll();for(var n in r)r[n]=null;r={}}else f.removeAll(),h.removeAll(),r={};c={}},removeExpired:function(){for(var e=(new Date).getTime(),t={},r=void 0,i=void 0;(i=h.peek())&&i.expires<=e;)t[i.key]=i.value?i.value:null,h.pop();if(u)for(r in t){var n=u().getItem(this.$$prefix+".data."+r);n&&(t[r]=p.fromJson(n).value,this.remove(r))}else for(r in t)this.remove(r);if(this.$$onExpire)for(r in t)this.$$onExpire(r,t[r]);return t},setCacheFlushInterval:function(e){var t=this;if(null===e)delete t.$$cacheFlushInterval;else{if(!p.isNumber(e))throw new Error("cacheFlushInterval must be a number!");if(0>e)throw new Error("cacheFlushInterval must be greater than zero!");e!==t.$$cacheFlushInterval&&(t.$$cacheFlushInterval=e,clearInterval(t.$$cacheFlushIntervalId),t.$$cacheFlushIntervalId=setInterval(function(){t.removeAll()},t.$$cacheFlushInterval))}},setCapacity:function(e){if(null===e)delete this.$$capacity;else{if(!p.isNumber(e))throw new Error("capacity must be a number!");if(0>e)throw new Error("capacity must be greater than zero!");this.$$capacity=e}for(var t={};f.size()>this.$$capacity;)t[f.peek().key]=this.remove(f.peek().key);return t},setDeleteOnExpire:function(e,t){if(null===e)delete this.$$deleteOnExpire;else{if(!p.isString(e))throw new Error("deleteOnExpire must be a string!");if("none"!==e&&"passive"!==e&&"aggressive"!==e)throw new Error('deleteOnExpire must be "none", "passive" or "aggressive"!');this.$$deleteOnExpire=e}t!==!1&&this.setRecycleFreq(this.$$recycleFreq)},setMaxAge:function(e){if(null===e)this.$$maxAge=Number.MAX_VALUE;else{if(!p.isNumber(e))throw new Error("maxAge must be a number!");if(0>e)throw new Error("maxAge must be greater than zero!");this.$$maxAge=e}var t=void 0,i=void 0,s=void 0;if(h.removeAll(),u){var o=u().getItem(this.$$prefix+".keys");for(i=o?p.fromJson(o):[],t=0;t<i.length;t++){s=i[t];var a=u().getItem(this.$$prefix+".data."+s);if(a){var c=p.fromJson(a);this.$$maxAge===Number.MAX_VALUE?c.expires=Number.MAX_VALUE:c.expires=c.created+(c.maxAge||this.$$maxAge),h.push({key:s,expires:c.expires})}}}else for(i=n(r),t=0;t<i.length;t++)s=i[t],this.$$maxAge===Number.MAX_VALUE?r[s].expires=Number.MAX_VALUE:r[s].expires=r[s].created+(r[s].maxAge||this.$$maxAge),h.push(r[s]);return"aggressive"===this.$$deleteOnExpire?this.removeExpired():{}},setOnExpire:function(e){if(null===e)delete this.$$onExpire;else{if(!p.isFunction(e))throw new Error("onExpire must be a function!");this.$$onExpire=e}},setOptions:function(e,t){if(e=e||{},t=!!t,!p.isObject(e))throw new Error("cacheOptions must be an object!");"storagePrefix"in e?this.$$storagePrefix=e.storagePrefix:t&&(this.$$storagePrefix=m.storagePrefix),this.$$prefix=this.$$storagePrefix+this.$$id,"disabled"in e?this.$$disabled=!!e.disabled:t&&(this.$$disabled=m.disabled),"storageMode"in e||"storageImpl"in e?this.setStorageMode(e.storageMode||m.storageMode,e.storageImpl||m.storageImpl):t&&this.setStorageMode(m.storageMode,m.storageImpl),"storeOnResolve"in e?this.$$storeOnResolve=!!e.storeOnResolve:t&&(this.$$storeOnResolve=m.storeOnResolve),"storeOnReject"in e?this.$$storeOnReject=!!e.storeOnReject:t&&(this.$$storeOnReject=m.storeOnReject),"capacity"in e?this.setCapacity(e.capacity):t&&this.setCapacity(m.capacity),"deleteOnExpire"in e?this.setDeleteOnExpire(e.deleteOnExpire,!1):t&&this.setDeleteOnExpire(m.deleteOnExpire,!1),"maxAge"in e?this.setMaxAge(e.maxAge):t&&this.setMaxAge(m.maxAge),"recycleFreq"in e?this.setRecycleFreq(e.recycleFreq):t&&this.setRecycleFreq(m.recycleFreq),"cacheFlushInterval"in e?this.setCacheFlushInterval(e.cacheFlushInterval):t&&this.setCacheFlushInterval(m.cacheFlushInterval),"onExpire"in e?this.setOnExpire(e.onExpire):t&&this.setOnExpire(m.onExpire)},setRecycleFreq:function(e){if(null===e)delete this.$$recycleFreq;else{if(!p.isNumber(e))throw new Error("recycleFreq must be a number!");if(0>e)throw new Error("recycleFreq must be greater than zero!");this.$$recycleFreq=e}clearInterval(this.$$recycleFreqId),"aggressive"===this.$$deleteOnExpire?!function(e){e.$$recycleFreqId=setInterval(function(){e.removeExpired()},e.$$recycleFreq)}(this):delete this.$$recycleFreqId},setStorageMode:function(e,t){function r(){var e=this.keys();if(e.length){for(var t=0;t<e.length;t++)n[e[t]]=this.get(e[t]);for(t=0;t<e.length;t++)this.remove(e[t]);i=!0}}if(!p.isString(e))throw new Error("storageMode must be a string!");if("memory"!==e&&"localStorage"!==e&&"sessionStorage"!==e)throw new Error('storageMode must be "memory", "localStorage" or "sessionStorage"!');var i=!1,n={};if(this.$$initializing||r.call(this),this.$$storageMode=e,t){if(!p.isObject(t))throw new Error("storageImpl must be an object!");if(!("setItem"in t&&"function"==typeof t.setItem))throw new Error('storageImpl must implement "setItem(key, value)"!');if(!("getItem"in t&&"function"==typeof t.getItem))throw new Error('storageImpl must implement "getItem(key)"!');if(!("removeItem"in t)||"function"!=typeof t.removeItem)throw new Error('storageImpl must implement "removeItem(key)"!');u=function(){return t}}else if("localStorage"===this.$$storageMode)try{localStorage.setItem("cachefactory","cachefactory"),localStorage.removeItem("cachefactory"),u=function(){return localStorage}}catch(s){u=null,this.$$storageMode="memory"}else if("sessionStorage"===this.$$storageMode)try{sessionStorage.setItem("cachefactory","cachefactory"),sessionStorage.removeItem("cachefactory"),u=function(){return sessionStorage}}catch(s){u=null,this.$$storageMode="memory"}if(this.$$initializing&&r.call(this),i)for(var o in n)this.put(o,n[o])},touch:function(e){var t=this;if(e){var r=this.get(e,{onExpire:function(e,r){return t.put(e,r)}});r&&this.put(e,r)}else for(var i=this.keys(),n=0;n<i.length;n++)this.touch(i[n])}};return d.$$initializing=!0,d.setOptions(t,!0),d.$$initializing=!1,d}function u(e,t){return c(e,t)}var l=r(1),h=null;try{h=window.Promise}catch(f){}var p={isNumber:function(e){return"number"==typeof e},isString:function(e){return"string"==typeof e},isObject:function(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":i(e))},isFunction:function(e){return"function"==typeof e},fromJson:function(e){return JSON.parse(e)},equals:function(e,t){return e===t},Promise:h},m={capacity:Number.MAX_VALUE,maxAge:Number.MAX_VALUE,deleteOnExpire:"none",onExpire:null,cacheFlushInterval:null,recycleFreq:1e3,storageMode:"memory",storageImpl:null,disabled:!1,storagePrefix:"cachefactory.caches.",storeOnResolve:!1,storeOnReject:!1},$={};u.createCache=c,u.defaults=m,u.info=function(){var e=n($),t={size:e.length,caches:{}};for(var r in m)m.hasOwnProperty(r)&&(t[r]=m[r]);for(var i=0;i<e.length;i++){var s=e[i];t.caches[s]=$[s].info()}return t},u.get=function(e){return $[e]},u.keySet=function(){return a($)},u.keys=function(){return n($)},u.destroy=function(e){$[e]&&($[e].destroy(),delete $[e])},u.destroyAll=function(){for(var e in $)$[e].destroy();$={}},u.clearAll=function(){for(var e in $)$[e].removeAll()},u.removeExpiredFromAll=function(){var e={};for(var t in $)e[t]=$[t].removeExpired();return e},u.enableAll=function(){for(var e in $)$[e].$$disabled=!1},u.disableAll=function(){for(var e in $)$[e].$$disabled=!0},u.touchAll=function(){for(var e in $)$[e].touch()},u.utils=p,u.BinaryHeap=l,e.exports=u},function(e,t,r){!function(t,r){e.exports=r()}(this,function(){return function(e){function t(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return e[i].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){function i(e,t,r){for(var i=e[r],n=t(i);r>0;){var s=Math.floor((r+1)/2)-1,o=e[s];if(n>=t(o))break;e[s]=i,e[r]=o,r=s}}function n(e,t){if(e||(e=function(e){return e}),t||(t=function(e,t){return e===t}),"function"!=typeof e)throw new Error('BinaryHeap([weightFunc][, compareFunc]): "weightFunc" must be a function!');if("function"!=typeof t)throw new Error('BinaryHeap([weightFunc][, compareFunc]): "compareFunc" must be a function!');this.weightFunc=e,this.compareFunc=t,this.heap=[]}var s=function(e,t,r){for(var i=e.length,n=e[r],s=t(n);;){var o=2*(r+1),a=o-1,c=null;if(i>a){var u=e[a],l=t(u);s>l&&(c=a)}if(i>o){var h=e[o],f=t(h);f<(null===c?s:t(e[a]))&&(c=o)}if(null===c)break;e[r]=e[c],e[c]=n,r=c}},o=n.prototype;o.push=function(e){this.heap.push(e),i(this.heap,this.weightFunc,this.heap.length-1)},o.peek=function(){return this.heap[0]},o.pop=function(){var e=this.heap[0],t=this.heap.pop();return this.heap.length>0&&(this.heap[0]=t,s(this.heap,this.weightFunc,0)),e},o.remove=function(e){for(var t=this.heap.length,r=0;t>r;r++)if(this.compareFunc(this.heap[r],e)){var n=this.heap[r],o=this.heap.pop();return r!==t-1&&(this.heap[r]=o,i(this.heap,this.weightFunc,r),s(this.heap,this.weightFunc,r)),n}return null},o.removeAll=function(){this.heap=[]},o.size=function(){return this.heap.length},e.exports=n}])})}])})}])});
!function(n,t,e){"use strict";function a(n,t,e){if(!n)throw gn("areq","Argument '{0}' is {1}",t||"?",e||"required");return n}function r(n,t){return n||t?n?t?(K(n)&&(n=n.join(" ")),K(t)&&(t=t.join(" ")),n+" "+t):n:t:""}function i(n){var t={};return n&&(n.to||n.from)&&(t.to=n.to,t.from=n.from),t}function o(n,t,e){var a="";return n=K(n)?n:n&&Q(n)&&n.length?n.split(/\s+/):[],J(n,function(n,r){n&&n.length>0&&(a+=r>0?" ":"",a+=e?t+n:n+t)}),a}function s(n,t){var e=n.indexOf(t);t>=0&&n.splice(e,1)}function u(n){if(n instanceof B)switch(n.length){case 0:return[];case 1:if(n[0].nodeType===X)return n;break;default:return B(l(n))}return n.nodeType===X?B(n):void 0}function l(n){if(!n[0])return n;for(var t=0;t<n.length;t++){var e=n[t];if(e.nodeType==X)return e}}function c(n,t,e){J(t,function(t){n.addClass(t,e)})}function f(n,t,e){J(t,function(t){n.removeClass(t,e)})}function m(n){return function(t,e){e.addClass&&(c(n,t,e.addClass),e.addClass=null),e.removeClass&&(f(n,t,e.removeClass),e.removeClass=null)}}function v(n){if(n=n||{},!n.$$prepared){var t=n.domOperation||q;n.domOperation=function(){n.$$domOperationFired=!0,t(),t=q},n.$$prepared=!0}return n}function d(n,t){p(n,t),h(n,t)}function p(n,t){t.from&&(n.css(t.from),t.from=null)}function h(n,t){t.to&&(n.css(t.to),t.to=null)}function g(n,t,e){var a=t.options||{},r=e.options||{},i=(a.addClass||"")+" "+(r.addClass||""),o=(a.removeClass||"")+" "+(r.removeClass||""),s=$(n.attr("class"),i,o);r.preparationClasses&&(a.preparationClasses=w(r.preparationClasses,a.preparationClasses),delete r.preparationClasses);var u=a.domOperation!==q?a.domOperation:null;return H(a,r),u&&(a.domOperation=u),s.addClass?a.addClass=s.addClass:a.addClass=null,s.removeClass?a.removeClass=s.removeClass:a.removeClass=null,t.addClass=a.addClass,t.removeClass=a.removeClass,a}function $(n,t,e){function a(n){Q(n)&&(n=n.split(" "));var t={};return J(n,function(n){n.length&&(t[n]=!0)}),t}var r=1,i=-1,o={};n=a(n),t=a(t),J(t,function(n,t){o[t]=r}),e=a(e),J(e,function(n,t){o[t]=o[t]===r?null:i});var s={addClass:"",removeClass:""};return J(o,function(t,e){var a,o;t===r?(a="addClass",o=!n[e]):t===i&&(a="removeClass",o=n[e]),o&&(s[a].length&&(s[a]+=" "),s[a]+=e)}),s}function C(n){return n instanceof t.element?n[0]:n}function y(n,t,e){var a="";t&&(a=o(t,_,!0)),e.addClass&&(a=w(a,o(e.addClass,Y))),e.removeClass&&(a=w(a,o(e.removeClass,Z))),a.length&&(e.preparationClasses=a,n.addClass(a))}function D(n,t){t.preparationClasses&&(n.removeClass(t.preparationClasses),t.preparationClasses=null),t.activeClasses&&(n.removeClass(t.activeClasses),t.activeClasses=null)}function b(n,t){var e=t?"-"+t+"s":"";return k(n,[pn,e]),[pn,e]}function A(n,t){var e=t?"paused":"",a=I+fn;return k(n,[a,e]),[a,e]}function k(n,t){var e=t[0],a=t[1];n.style[e]=a}function w(n,t){return n?t?n+" "+t:n:t}function T(n){return[dn,n+"s"]}function S(n,t){var e=t?vn:pn;return[e,n+"s"]}function j(n,t,e){var a=Object.create(null),r=n.getComputedStyle(t)||{};return J(e,function(n,t){var e=r[n];if(e){var i=e.charAt(0);("-"===i||"+"===i||i>=0)&&(e=x(e)),0===e&&(e=null),a[t]=e}}),a}function x(n){var t=0,e=n.split(/\s*,\s*/);return J(e,function(n){"s"==n.charAt(n.length-1)&&(n=n.substring(0,n.length-1)),n=parseFloat(n)||0,t=t?Math.max(n,t):n}),t}function O(n){return 0===n||null!=n}function P(n,t){var e=M,a=n+"s";return t?e+=on:a+=" linear all",[e,a]}function N(){var n=Object.create(null);return{flush:function(){n=Object.create(null)},count:function(t){var e=n[t];return e?e.total:0},get:function(t){var e=n[t];return e&&e.value},put:function(t,e){n[t]?n[t].total++:n[t]={total:1,value:e}}}}function F(n,t,e){J(e,function(e){n[e]=V(n[e])?n[e]:t.style.getPropertyValue(e)})}var M,E,I,R,q=t.noop,L=t.copy,H=t.extend,B=t.element,J=t.forEach,K=t.isArray,Q=t.isString,U=t.isObject,W=t.isUndefined,V=t.isDefined,z=t.isFunction,G=t.isElement,X=1,Y="-add",Z="-remove",_="ng-",nn="-active",tn="-prepare",en="ng-animate",an="$$ngAnimateChildren",rn="";W(n.ontransitionend)&&V(n.onwebkittransitionend)?(rn="-webkit-",M="WebkitTransition",E="webkitTransitionEnd transitionend"):(M="transition",E="transitionend"),W(n.onanimationend)&&V(n.onwebkitanimationend)?(rn="-webkit-",I="WebkitAnimation",R="webkitAnimationEnd animationend"):(I="animation",R="animationend");var on="Duration",sn="Property",un="Delay",ln="TimingFunction",cn="IterationCount",fn="PlayState",mn=9999,vn=I+un,dn=I+on,pn=M+un,hn=M+on,gn=t.$$minErr("ng"),$n=["$$rAF",function(n){function t(n){a=a.concat(n),e()}function e(){if(a.length){for(var t=a.shift(),i=0;i<t.length;i++)t[i]();r||n(function(){r||e()})}}var a,r;return a=t.queue=[],t.waitUntilQuiet=function(t){r&&r(),r=n(function(){r=null,t(),e()})},t}],Cn=["$interpolate",function(n){return{link:function(e,a,r){function i(n){n="on"===n||"true"===n,a.data(an,n)}var o=r.ngAnimateChildren;t.isString(o)&&0===o.length?a.data(an,!0):(i(n(o)(e)),r.$observe("ngAnimateChildren",i))}}}],yn="$$animateCss",Dn=1e3,bn=3,An=1.5,kn={transitionDuration:hn,transitionDelay:pn,transitionProperty:M+sn,animationDuration:dn,animationDelay:vn,animationIterationCount:I+cn},wn={transitionDuration:hn,transitionDelay:pn,animationDuration:dn,animationDelay:vn},Tn=["$animateProvider",function(n){var t=N(),e=N();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(n,a,r,u,l,c,f,g){function $(n,t){var e="$$ngAnimateParentKey",a=n.parentNode,r=a[e]||(a[e]=++H);return r+"-"+n.getAttribute("class")+"-"+t}function y(e,a,r,i){var o=t.get(r);return o||(o=j(n,e,i),"infinite"===o.animationIterationCount&&(o.animationIterationCount=1)),t.put(r,o),o}function D(r,i,s,u){var l;if(t.count(s)>0&&(l=e.get(s),!l)){var c=o(i,"-stagger");a.addClass(r,c),l=j(n,r,u),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),a.removeClass(r,c),e.put(s,l)}return l||{}}function w(n){B.push(n),f.waitUntilQuiet(function(){t.flush(),e.flush();for(var n=l(),a=0;a<B.length;a++)B[a](n);B.length=0})}function x(n,t,e){var a=y(n,t,e,kn),r=a.animationDelay,i=a.transitionDelay;return a.maxDelay=r&&i?Math.max(r,i):r||i,a.maxDuration=Math.max(a.animationDuration*a.animationIterationCount,a.transitionDuration),a}var N=m(a),H=0,B=[];return function(n,e){function l(){m()}function f(){m(!0)}function m(t){if(!(V||G&&z)){V=!0,z=!1,Q.$$skipPreparationClasses||a.removeClass(n,Cn),a.removeClass(n,Tn),A(W,!1),b(W,!1),J(cn,function(n){W.style[n[0]]=""}),N(n,Q),d(n,Q),Object.keys(U).length&&J(U,function(n,t){n?W.style.setProperty(t,n):W.style.removeProperty(t)}),Q.onDone&&Q.onDone(),dn&&dn.length&&n.off(dn.join(" "),H);var e=n.data(yn);e&&(u.cancel(e[0].timer),n.removeData(yn)),X&&X.complete(!t)}}function y(n){Hn.blockTransition&&b(W,n),Hn.blockKeyframeAnimation&&A(W,!!n)}function j(){return X=new r({end:l,cancel:f}),w(q),m(),{$$willAnimate:!1,start:function(){return X},end:l}}function H(n){n.stopPropagation();var t=n.originalEvent||n,e=t.$manualTimeStamp||Date.now(),a=parseFloat(t.elapsedTime.toFixed(bn));Math.max(e-un,0)>=an&&a>=rn&&(G=!0,m())}function B(){function t(){if(!V){if(y(!1),J(cn,function(n){var t=n[0],e=n[1];W.style[t]=e}),N(n,Q),a.addClass(n,Tn),Hn.recalculateTimingStyles){if(kn=W.className+" "+Cn,xn=$(W,kn),qn=x(W,kn,xn),Ln=qn.maxDelay,en=Math.max(Ln,0),rn=qn.maxDuration,0===rn)return void m();Hn.hasTransitions=qn.transitionDuration>0,Hn.hasAnimations=qn.animationDuration>0}if(Hn.applyAnimationDelay&&(Ln="boolean"!=typeof Q.delay&&O(Q.delay)?parseFloat(Q.delay):Ln,en=Math.max(Ln,0),qn.animationDelay=Ln,Bn=S(Ln,!0),cn.push(Bn),W.style[Bn[0]]=Bn[1]),an=en*Dn,on=rn*Dn,Q.easing){var t,r=Q.easing;Hn.hasTransitions&&(t=M+ln,cn.push([t,r]),W.style[t]=r),Hn.hasAnimations&&(t=I+ln,cn.push([t,r]),W.style[t]=r)}qn.transitionDuration&&dn.push(E),qn.animationDuration&&dn.push(R),un=Date.now();var i=an+An*on,o=un+i,s=n.data(yn)||[],l=!0;if(s.length){var c=s[0];l=o>c.expectedEndTime,l?u.cancel(c.timer):s.push(m)}if(l){var f=u(e,i,!1);s[0]={timer:f,expectedEndTime:o},s.push(m),n.data(yn,s)}dn.length&&n.on(dn.join(" "),H),Q.to&&(Q.cleanupStyles&&F(U,W,Object.keys(Q.to)),h(n,Q))}}function e(){var t=n.data(yn);if(t){for(var e=1;e<t.length;e++)t[e]();n.removeData(yn)}}if(!V){if(!W.parentNode)return void m();var r=function(n){if(G)z&&n&&(z=!1,m());else if(z=!n,qn.animationDuration){var t=A(W,z);z?cn.push(t):s(cn,t)}},i=In>0&&(qn.transitionDuration&&0===On.transitionDuration||qn.animationDuration&&0===On.animationDuration)&&Math.max(On.animationDelay,On.transitionDelay);i?u(t,Math.floor(i*In*Dn),!1):t(),tn.resume=function(){r(!0)},tn.pause=function(){r(!1)}}}var Q=e||{};Q.$$prepared||(Q=v(L(Q)));var U={},W=C(n);if(!W||!W.parentNode||!g.enabled())return j();var V,z,G,X,tn,en,an,rn,on,un,cn=[],fn=n.attr("class"),vn=i(Q),dn=[];if(0===Q.duration||!c.animations&&!c.transitions)return j();var pn=Q.event&&K(Q.event)?Q.event.join(" "):Q.event,hn=pn&&Q.structural,gn="",$n="";hn?gn=o(pn,_,!0):pn&&(gn=pn),Q.addClass&&($n+=o(Q.addClass,Y)),Q.removeClass&&($n.length&&($n+=" "),$n+=o(Q.removeClass,Z)),Q.applyClassesEarly&&$n.length&&N(n,Q);var Cn=[gn,$n].join(" ").trim(),kn=fn+" "+Cn,Tn=o(Cn,nn),Sn=vn.to&&Object.keys(vn.to).length>0,jn=(Q.keyframeStyle||"").length>0;if(!jn&&!Sn&&!Cn)return j();var xn,On;if(Q.stagger>0){var Pn=parseFloat(Q.stagger);On={transitionDelay:Pn,animationDelay:Pn,transitionDuration:0,animationDuration:0}}else xn=$(W,kn),On=D(W,Cn,xn,wn);Q.$$skipPreparationClasses||a.addClass(n,Cn);var Nn;if(Q.transitionStyle){var Fn=[M,Q.transitionStyle];k(W,Fn),cn.push(Fn)}if(Q.duration>=0){Nn=W.style[M].length>0;var Mn=P(Q.duration,Nn);k(W,Mn),cn.push(Mn)}if(Q.keyframeStyle){var En=[I,Q.keyframeStyle];k(W,En),cn.push(En)}var In=On?Q.staggerIndex>=0?Q.staggerIndex:t.count(xn):0,Rn=0===In;Rn&&!Q.skipBlocking&&b(W,mn);var qn=x(W,kn,xn),Ln=qn.maxDelay;en=Math.max(Ln,0),rn=qn.maxDuration;var Hn={};if(Hn.hasTransitions=qn.transitionDuration>0,Hn.hasAnimations=qn.animationDuration>0,Hn.hasTransitionAll=Hn.hasTransitions&&"all"==qn.transitionProperty,Hn.applyTransitionDuration=Sn&&(Hn.hasTransitions&&!Hn.hasTransitionAll||Hn.hasAnimations&&!Hn.hasTransitions),Hn.applyAnimationDuration=Q.duration&&Hn.hasAnimations,Hn.applyTransitionDelay=O(Q.delay)&&(Hn.applyTransitionDuration||Hn.hasTransitions),Hn.applyAnimationDelay=O(Q.delay)&&Hn.hasAnimations,Hn.recalculateTimingStyles=$n.length>0,(Hn.applyTransitionDuration||Hn.applyAnimationDuration)&&(rn=Q.duration?parseFloat(Q.duration):rn,Hn.applyTransitionDuration&&(Hn.hasTransitions=!0,qn.transitionDuration=rn,Nn=W.style[M+sn].length>0,cn.push(P(rn,Nn))),Hn.applyAnimationDuration&&(Hn.hasAnimations=!0,qn.animationDuration=rn,cn.push(T(rn)))),0===rn&&!Hn.recalculateTimingStyles)return j();if(null!=Q.delay){var Bn;"boolean"!=typeof Q.delay&&(Bn=parseFloat(Q.delay),en=Math.max(Bn,0)),Hn.applyTransitionDelay&&cn.push(S(Bn)),Hn.applyAnimationDelay&&cn.push(S(Bn,!0))}return null==Q.duration&&qn.transitionDuration>0&&(Hn.recalculateTimingStyles=Hn.recalculateTimingStyles||Rn),an=en*Dn,on=rn*Dn,Q.skipBlocking||(Hn.blockTransition=qn.transitionDuration>0,Hn.blockKeyframeAnimation=qn.animationDuration>0&&On.animationDelay>0&&0===On.animationDuration),Q.from&&(Q.cleanupStyles&&F(U,W,Object.keys(Q.from)),p(n,Q)),Hn.blockTransition||Hn.blockKeyframeAnimation?y(rn):Q.skipBlocking||b(W,!1),{$$willAnimate:!0,end:l,start:function(){return V?void 0:(tn={end:l,cancel:f,resume:null,pause:null},X=new r(tn),w(B),X)}}}}]}],Sn=["$$animationProvider",function(n){function t(n){return n.parentNode&&11===n.parentNode.nodeType}n.drivers.push("$$animateCssDriver");var e="ng-animate-shim",a="ng-anchor",r="ng-anchor-out",i="ng-anchor-in";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(n,o,s,u,l,c,f){function v(n){return n.replace(/\bng-\S+\b/g,"")}function d(n,t){return Q(n)&&(n=n.split(" ")),Q(t)&&(t=t.split(" ")),n.filter(function(n){return-1===t.indexOf(n)}).join(" ")}function p(t,o,u){function l(n){var t={},e=C(n).getBoundingClientRect();return J(["width","height","top","left"],function(n){var a=e[n];switch(n){case"top":a+=$.scrollTop;break;case"left":a+=$.scrollLeft}t[n]=Math.floor(a)+"px"}),t}function c(){var t=n(h,{addClass:r,delay:!0,from:l(o)});return t.$$willAnimate?t:null}function f(n){return n.attr("class")||""}function m(){var t=v(f(u)),e=d(t,g),a=d(g,t),o=n(h,{to:l(u),addClass:i+" "+e,removeClass:r+" "+a,delay:!0});return o.$$willAnimate?o:null}function p(){h.remove(),o.removeClass(e),u.removeClass(e)}var h=B(C(o).cloneNode(!0)),g=v(f(h));o.addClass(e),u.addClass(e),h.addClass(a),D.append(h);var y,b=c();if(!b&&(y=m(),!y))return p();var A=b||y;return{start:function(){function n(){e&&e.end()}var t,e=A.start();return e.done(function(){return e=null,!y&&(y=m())?(e=y.start(),e.done(function(){e=null,p(),t.complete()}),e):(p(),void t.complete())}),t=new s({end:n,cancel:n})}}}function h(n,t,e,a){var r=g(n,q),i=g(t,q),o=[];return J(a,function(n){var t=n.out,a=n["in"],r=p(e,t,a);r&&o.push(r)}),r||i||0!==o.length?{start:function(){function n(){J(t,function(n){n.end()})}var t=[];r&&t.push(r.start()),i&&t.push(i.start()),J(o,function(n){t.push(n.start())});var e=new s({end:n,cancel:n});return s.all(t,function(n){e.complete(n)}),e}}:void 0}function g(t){var e=t.element,a=t.options||{};t.structural&&(a.event=t.event,a.structural=!0,a.applyClassesEarly=!0,"leave"===t.event&&(a.onDone=a.domOperation)),a.preparationClasses&&(a.event=w(a.event,a.preparationClasses));var r=n(e,a);return r.$$willAnimate?r:null}if(!l.animations&&!l.transitions)return q;var $=f[0].body,y=C(u),D=B(t(y)||$.contains(y)?y:$);m(c);return function(n){return n.from&&n.to?h(n.from,n.to,n.classes,n.anchors):g(n)}}]}],jn=["$animateProvider",function(n){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(t,e,a){function r(e){e=K(e)?e:e.split(" ");for(var a=[],r={},i=0;i<e.length;i++){var o=e[i],s=n.$$registeredAnimations[o];s&&!r[o]&&(a.push(t.get(s)),r[o]=!0)}return a}var i=m(a);return function(n,t,a,o){function s(){o.domOperation(),i(n,o)}function u(){m=!0,s(),d(n,o)}function l(n,t,a,r,i){var o;switch(a){case"animate":o=[t,r.from,r.to,i];break;case"setClass":o=[t,g,$,i];break;case"addClass":o=[t,g,i];break;case"removeClass":o=[t,$,i];break;default:o=[t,i]}o.push(r);var s=n.apply(n,o);if(s)if(z(s.start)&&(s=s.start()),s instanceof e)s.done(i);else if(z(s))return s;return q}function c(n,t,a,r,i){var o=[];return J(r,function(r){var s=r[i];s&&o.push(function(){var r,i,o=!1,u=function(n){o||(o=!0,(i||q)(n),r.complete(!n))};return r=new e({end:function(){u()},cancel:function(){u(!0)}}),i=l(s,n,t,a,function(n){var t=n===!1;u(t)}),r})}),o}function f(n,t,a,r,i){var o=c(n,t,a,r,i);if(0===o.length){var s,u;"beforeSetClass"===i?(s=c(n,"removeClass",a,r,"beforeRemoveClass"),u=c(n,"addClass",a,r,"beforeAddClass")):"setClass"===i&&(s=c(n,"removeClass",a,r,"removeClass"),u=c(n,"addClass",a,r,"addClass")),s&&(o=o.concat(s)),u&&(o=o.concat(u))}if(0!==o.length)return function(n){var t=[];return o.length&&J(o,function(n){t.push(n())}),t.length?e.all(t,n):n(),function(n){J(t,function(t){n?t.cancel():t.end()})}}}var m=!1;3===arguments.length&&U(a)&&(o=a,a=null),o=v(o),a||(a=n.attr("class")||"",o.addClass&&(a+=" "+o.addClass),o.removeClass&&(a+=" "+o.removeClass));var p,h,g=o.addClass,$=o.removeClass,C=r(a);if(C.length){var y,D;"leave"==t?(D="leave",y="afterLeave"):(D="before"+t.charAt(0).toUpperCase()+t.substr(1),y=t),"enter"!==t&&"move"!==t&&(p=f(n,t,o,C,D)),h=f(n,t,o,C,y)}if(p||h){var b;return{$$willAnimate:!0,end:function(){return b?b.end():(u(),b=new e,b.complete(!0)),b},start:function(){function n(n){u(n),b.complete(n)}function t(t){m||((a||q)(t),n(t))}if(b)return b;b=new e;var a,r=[];return p&&r.push(function(n){a=p(n)}),r.length?r.push(function(n){s(),n(!0)}):s(),h&&r.push(function(n){a=h(n)}),b.setHost({end:function(){t()},cancel:function(){t(!0)}}),e.chain(r,n),b}}}}}]}],xn=["$$animationProvider",function(n){n.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(n,t){function e(t){var e=t.element,a=t.event,r=t.options,i=t.classes;return n(e,a,i,r)}return function(n){if(n.from&&n.to){var a=e(n.from),r=e(n.to);if(!a&&!r)return;return{start:function(){function n(){return function(){J(i,function(n){n.end()})}}function e(n){o.complete(n)}var i=[];a&&i.push(a.start()),r&&i.push(r.start()),t.all(i,e);var o=new t({end:n(),cancel:n()});return o}}}return e(n)}}]}],On="data-ng-animate",Pn="$ngAnimatePin",Nn=["$animateProvider",function(n){function t(n){if(!n)return null;var t=n.split(c),e=Object.create(null);return J(t,function(n){e[n]=!0}),e}function e(n,e){if(n&&e){var a=t(e);return n.split(c).some(function(n){return a[n]})}}function r(n,t,e,a){return f[n].some(function(n){return n(t,e,a)})}function i(n,t){var e=(n.addClass||"").length>0,a=(n.removeClass||"").length>0;return t?e&&a:e||a}var o=1,s=2,c=" ",f=this.rules={skip:[],cancel:[],join:[]};f.join.push(function(n,t,e){return!t.structural&&i(t)}),f.skip.push(function(n,t,e){return!t.structural&&!i(t)}),f.skip.push(function(n,t,e){return"leave"==e.event&&t.structural}),f.skip.push(function(n,t,e){return e.structural&&e.state===s&&!t.structural}),f.cancel.push(function(n,t,e){return e.structural&&t.structural}),f.cancel.push(function(n,t,e){return e.state===s&&t.structural}),f.cancel.push(function(n,t,a){var r=t.addClass,i=t.removeClass,o=a.addClass,s=a.removeClass;return W(r)&&W(i)||W(o)&&W(s)?!1:e(r,s)||e(i,o)}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow",function(t,e,c,f,p,h,$,b,A,k){function w(){var n=!1;return function(t){n?t():e.$$postDigest(function(){n=!0,t()})}}function T(n,t){return g(n,t,{})}function S(n,t,e){var a=C(t),r=C(n),i=[],o=q[e];return o&&J(o,function(n){_.call(n.node,a)?i.push(n.callback):"leave"===e&&_.call(n.node,r)&&i.push(n.callback)}),i}function j(n,a,l){function c(e,a,r,i){j(function(){var e=S(b,n,a);e.length&&t(function(){J(e,function(t){t(n,r,i)})})}),e.progress(a,r,i)}function m(t){D(n,A),Z(n,A),d(n,A),A.domOperation(),k.complete(!t)}var p,b,A=L(l);n=u(n),n&&(p=C(n),b=n.parent()),A=v(A);var k=new $,j=w();if(K(A.addClass)&&(A.addClass=A.addClass.join(" ")),A.addClass&&!Q(A.addClass)&&(A.addClass=null),K(A.removeClass)&&(A.removeClass=A.removeClass.join(" ")),A.removeClass&&!Q(A.removeClass)&&(A.removeClass=null),A.from&&!U(A.from)&&(A.from=null),A.to&&!U(A.to)&&(A.to=null),!p)return m(),k;var P=[p.className,A.addClass,A.removeClass].join(" ");if(!Y(P))return m(),k;var R=["enter","move","leave"].indexOf(a)>=0,q=!I||f[0].hidden||E.get(p),H=!q&&M.get(p)||{},B=!!H.state;if(q||B&&H.state==o||(q=!N(n,b,a)),q)return m(),k;R&&x(n);var W={structural:R,element:n,event:a,addClass:A.addClass,removeClass:A.removeClass,close:m,options:A,runner:k};if(B){var V=r("skip",n,W,H);if(V)return H.state===s?(m(),k):(g(n,H,W),H.runner);var z=r("cancel",n,W,H);if(z)if(H.state===s)H.runner.end();else{if(!H.structural)return g(n,H,W),H.runner;H.close()}else{var G=r("join",n,W,H);if(G){if(H.state!==s)return y(n,R?a:null,A),a=W.event=H.event,A=g(n,H,W),H.runner;T(n,W)}}}else T(n,W);var X=W.structural;if(X||(X="animate"===W.event&&Object.keys(W.options.to||{}).length>0||i(W)),!X)return m(),O(n),k;var _=(H.counter||0)+1;return W.counter=_,F(n,o,W),e.$$postDigest(function(){var t=M.get(p),e=!t;t=t||{};var r=n.parent()||[],o=r.length>0&&("animate"===t.event||t.structural||i(t));if(e||t.counter!==_||!o)return e&&(Z(n,A),d(n,A)),(e||R&&t.event!==a)&&(A.domOperation(),k.end()),void(o||O(n));a=!t.structural&&i(t,!0)?"setClass":t.event,F(n,s);var u=h(n,a,t.options);u.done(function(t){m(!t);var e=M.get(p);e&&e.counter===_&&O(C(n)),c(k,a,"close",{})}),k.setHost(u),c(k,a,"start",{})}),k}function x(n){var t=C(n),e=t.querySelectorAll("["+On+"]");J(e,function(n){var t=parseInt(n.getAttribute(On)),e=M.get(n);if(e)switch(t){case s:e.runner.end();case o:M.remove(n)}})}function O(n){var t=C(n);t.removeAttribute(On),M.remove(t)}function P(n,t){return C(n)===C(t)}function N(n,t,e){var a,r=B(f[0].body),i=P(n,r)||"HTML"===n[0].nodeName,o=P(n,c),s=!1,u=E.get(C(n)),l=B.data(n[0],Pn);for(l&&(t=l),t=C(t);t&&(o||(o=P(t,c)),t.nodeType===X);){var m=M.get(t)||{};if(!s){var v=E.get(t);if(v===!0&&u!==!1){u=!0;break}v===!1&&(u=!1),s=m.structural}if(W(a)||a===!0){var d=B.data(t,an);V(d)&&(a=d)}if(s&&a===!1)break;if(i||(i=P(t,r)),i&&o)break;t=o||!(l=B.data(t,Pn))?t.parentNode:C(l)}var p=(!s||a)&&u!==!0;return p&&o&&i}function F(n,t,e){e=e||{},e.state=t;var a=C(n);a.setAttribute(On,t);var r=M.get(a),i=r?H(r,e):e;M.put(a,i)}var M=new p,E=new p,I=null,R=e.$watch(function(){return 0===b.totalPendingRequests},function(n){n&&(R(),e.$$postDigest(function(){e.$$postDigest(function(){null===I&&(I=!0)})}))}),q={},z=n.classNameFilter(),Y=z?function(n){return z.test(n)}:function(){return!0},Z=m(A),_=Node.prototype.contains||function(n){return this===n||!!(16&this.compareDocumentPosition(n))};return{on:function(n,t,e){var a=l(t);q[n]=q[n]||[],q[n].push({node:a,callback:e})},off:function(n,t,e){function a(n,t,e){var a=l(t);return n.filter(function(n){var t=n.node===a&&(!e||n.callback===e);return!t})}var r=q[n];r&&(q[n]=1===arguments.length?null:a(r,t,e))},pin:function(n,t){a(G(n),"element","not an element"),a(G(t),"parentElement","not an element"),n.data(Pn,t)},push:function(n,t,e,a){return e=e||{},e.domOperation=a,j(n,t,e)},enabled:function(n,t){var e=arguments.length;if(0===e)t=!!I;else{var a=G(n);if(a){var r=C(n),i=E.get(r);1===e?t=!i:E.put(r,!t)}else t=I=!!n}return t}}}]}],Fn=["$animateProvider",function(n){function t(n,t){n.data(s,t)}function e(n){n.removeData(s)}function a(n){return n.data(s)}var i="ng-animate-ref",o=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$HashMap","$$rAFScheduler",function(n,s,u,l,c,f){function p(n){function t(n){if(n.processed)return n;n.processed=!0;var e=n.domNode,a=e.parentNode;i.put(e,n);for(var o;a;){if(o=i.get(a)){o.processed||(o=t(o));break}a=a.parentNode}return(o||r).children.push(n),n}function e(n){var t,e=[],a=[];for(t=0;t<n.children.length;t++)a.push(n.children[t]);var r=a.length,i=0,o=[];for(t=0;t<a.length;t++){var s=a[t];0>=r&&(r=i,i=0,e.push(o),o=[]),o.push(s.fn),s.children.forEach(function(n){i++,a.push(n)}),r--}return o.length&&e.push(o),e}var a,r={children:[]},i=new c;for(a=0;a<n.length;a++){var o=n[a];i.put(o.domNode,n[a]={domNode:o.domNode,fn:o.fn,children:[]})}for(a=0;a<n.length;a++)t(n[a]);return e(r)}var h=[],g=m(n);return function(c,m,$){function y(n){var t="["+i+"]",e=n.hasAttribute(i)?[n]:n.querySelectorAll(t),a=[];return J(e,function(n){var t=n.getAttribute(i);t&&t.length&&a.push(n)}),a}function D(n){var t=[],e={};J(n,function(n,a){var r=n.element,o=C(r),s=n.event,u=["enter","move"].indexOf(s)>=0,l=n.structural?y(o):[];if(l.length){var c=u?"to":"from";J(l,function(n){var t=n.getAttribute(i);e[t]=e[t]||{},e[t][c]={animationID:a,element:B(n)}})}else t.push(n)});var a={},r={};return J(e,function(e,i){var o=e.from,s=e.to;if(!o||!s){var u=o?o.animationID:s.animationID,l=u.toString();return void(a[l]||(a[l]=!0,t.push(n[u])))}var c=n[o.animationID],f=n[s.animationID],m=o.animationID.toString();if(!r[m]){var v=r[m]={structural:!0,beforeStart:function(){c.beforeStart(),f.beforeStart()},close:function(){c.close(),f.close()},classes:b(c.classes,f.classes),from:c,to:f,anchors:[]};v.classes.length?t.push(v):(t.push(c),t.push(f))}r[m].anchors.push({out:o.element,"in":s.element})}),t}function b(n,t){n=n.split(" "),t=t.split(" ");for(var e=[],a=0;a<n.length;a++){var r=n[a];if("ng-"!==r.substring(0,3))for(var i=0;i<t.length;i++)if(r===t[i]){e.push(r);break}}return e.join(" ")}function A(n){for(var t=o.length-1;t>=0;t--){var e=o[t];if(u.has(e)){var a=u.get(e),r=a(n);if(r)return r}}}function k(){c.addClass(en),P&&n.addClass(c,P),N&&(n.removeClass(c,N),N=null)}function w(n,t){function e(n){a(n).setHost(t)}n.from&&n.to?(e(n.from.element),e(n.to.element)):e(n.element)}function T(){var n=a(c);!n||"leave"===m&&$.$$domOperationFired||n.end()}function S(t){c.off("$destroy",T),e(c),g(c,$),d(c,$),$.domOperation(),P&&n.removeClass(c,P),c.removeClass(en),x.complete(!t)}$=v($);var j=["enter","move","leave"].indexOf(m)>=0,x=new l({end:function(){S()},cancel:function(){S(!0)}});if(!o.length)return S(),x;t(c,x);var O=r(c.attr("class"),r($.addClass,$.removeClass)),P=$.tempClasses;P&&(O+=" "+P,$.tempClasses=null);var N;return j&&(N="ng-"+m+tn,n.addClass(c,N)),h.push({element:c,classes:O,event:m,structural:j,options:$,beforeStart:k,close:S}),c.on("$destroy",T),h.length>1?x:(s.$$postDigest(function(){var n=[];J(h,function(t){a(t.element)?n.push(t):t.close()}),h.length=0;var t=D(n),e=[];J(t,function(n){e.push({domNode:C(n.from?n.from.element:n.element),fn:function(){n.beforeStart();var t,e=n.close,r=n.anchors?n.from.element||n.to.element:n.element;if(a(r)){var i=A(n);i&&(t=i.start)}if(t){var o=t();o.done(function(n){e(!n)}),w(n,o)}else e()}})}),f(p(e))}),x)}}]}];t.module("ngAnimate",[]).directive("ngAnimateChildren",Cn).factory("$$rAFScheduler",$n).provider("$$animateQueue",Nn).provider("$$animation",Fn).provider("$animateCss",Tn).provider("$$animateCssDriver",Sn).provider("$$animateJs",jn).provider("$$animateJsDriver",xn)}(window,window.angular);
angular.module("truncate",[]).filter("characters",function(){return function(r,t,n){if(isNaN(t))return r;if(0>=t)return"";if(r&&r.length>t){if(r=r.substring(0,t),n)for(;" "===r.charAt(r.length-1);)r=r.substr(0,r.length-1);else{var e=r.lastIndexOf(" ");-1!==e&&(r=r.substr(0,e))}return r+"…"}return r}}).filter("splitcharacters",function(){return function(r,t){if(isNaN(t))return r;if(0>=t)return"";if(r&&r.length>t){var n=r.substring(0,t/2),e=r.substring(r.length-t/2,r.length);return n+"..."+e}return r}}).filter("words",function(){return function(r,t){if(isNaN(t))return r;if(0>=t)return"";if(r){var n=r.split(/\s+/);n.length>t&&(r=n.slice(0,t).join(" ")+"…")}return r}});
(function(){var n;n={handler:"&customHandler",socialWidth:"@",socialHeight:"@"},angular.module("socialLinks",[]).factory("socialLinker",["$window","$location",function(n,t){return function(e){return function(o,r,i){var c,s,u;return u="status=no, width="+(o.socialWidth||640)+", height="+(o.socialHeight||480)+", resizable=yes, toolbar=no, menubar=no, scrollbars=no, location=no, directories=no",c=function(){return i.customUrl||t.absUrl()},i.$observe("customUrl",function(){var n;return n=e(o,c()),"A"!==r[0].nodeName||null!=i.href&&""!==i.href?void 0:r.attr("href",n)}),r.attr("rel","nofollow"),s=function(t){var r,i;return t.preventDefault(),r=e(o,c()),i=n.open(r,"popupwindow",u).focus()},null!=i.customHandler?r.on("click",s=function(n){var t;return t=e(o,c()),r.attr("href",t),o.handler({$event:n,$url:t})}):r.on("click",s),o.$on("$destroy",function(){return r.off("click",s)})}}}]).directive("socialFacebook",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){var e;return e=["https://facebook.com/sharer.php?"],e.push("u="+encodeURIComponent(t)),e.join("")})}}]).directive("socialTwitter",["socialLinker",function(t){return{restrict:"ACEM",scope:angular.extend({status:"@status"},n),link:t(function(n,t){return n.status||(n.status="Check this out! - "+t),"https://twitter.com/intent/tweet?text="+encodeURIComponent(n.status)})}}]).directive("socialGplus",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"https://plus.google.com/share?url="+encodeURIComponent(t)})}}]).directive("socialPinterest",["socialLinker",function(t){return{restrict:"ACEM",scope:angular.extend({media:"@media",description:"@description"},n),link:t(function(n,t){return"http://pinterest.com/pin/create/button/?url="+encodeURIComponent(t)+"&amp;media="+encodeURIComponent(n.media)+"&amp;description="+encodeURIComponent(n.description)})}}]).directive("socialStumbleupon",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"https://stumbleupon.com/submit?url="+encodeURIComponent(t)})}}]).directive("socialLinkedin",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"https://linkedin.com/shareArticle?url="+encodeURIComponent(t)})}}]).directive("socialReddit",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"https://www.reddit.com/submit?url="+encodeURIComponent(t)})}}]).directive("socialVk",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"http://vkontakte.ru/share.php?url="+encodeURIComponent(t)})}}]).directive("socialOk",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"http://www.odnoklassniki.ru/dk?st.cmd=addShare&st._surl="+encodeURIComponent(t)})}}]).directive("socialXing",["socialLinker",function(t){return{restrict:"ACEM",scope:n,link:t(function(n,t){return"https://www.xing.com/spi/shares/new?url="+encodeURIComponent(t)})}}])}).call(this);
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):"object"==typeof exports?exports.apiCheck=r():e.apiCheck=r()}(this,function(){return function(e){function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var t={};return r.m=e,r.c=t,r.p="",r(0)}([function(e,r,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var o=t(1),i=n(o);r["default"]=i["default"],e.exports=r["default"]},function(e,r,t){"use strict";function n(){function r(n,i,a){if(r.config.disabled||e.exports.globalConfig.disabled)return{apiTypes:{},argTypes:{},passed:!0,message:"",failed:!1};t(arguments),Array.isArray(n)?i=Array.prototype.slice.call(i):(n=[n],i=[i]);var u=p(n,i);u.length||(u=o(n,i));var f=c(n,i);return f.args=i,u.length?(f.message=r.getErrorMessage(n,i,u,a),f.failed=!0,f.passed=!1):(f.message="",f.failed=!1,f.passed=!0),f}function t(e){var t=e[0],n=e[1],i=Array.isArray(n)||n&&"object"==typeof n&&"number"==typeof n.length;if(Array.isArray(t)&&!i)throw new Error(a(t,[n],["If an array is provided for the api, an array must be provided for the args as well."],{prefix:"apiCheck"}));var u=o(C.checkApiCheckApi,e);if(u.length){var p=r.getErrorMessage(C.checkApiCheckApi,e,u,{prefix:"apiCheck"});r.handleErrorMessage(p,!0)}}function n(e){return function(t,n,o){var i=r(t,n,o);return r.handleErrorMessage(i.message,e),i}}function i(e,r){if(r&&e)throw new Error(e);e&&console.warn(e)}function a(e,t){function n(){var e=p.onlyPrefix;return e||(e=((f.prefix||"")+" "+(p.prefix||"")).trim()),e}function o(){var e=p.onlySuffix;return e||(e=((p.suffix||"")+" "+(f.suffix||"")).trim()),e}function i(){var e=p.url;return e||(e=f.docsBaseUrl&&p.urlSuffix&&(""+f.docsBaseUrl+p.urlSuffix).trim()),e}var a=arguments.length<=2||void 0===arguments[2]?[]:arguments[2],p=arguments.length<=3||void 0===arguments[3]?{}:arguments[3],f=r.config.output||{},c=n(),s=o(),l=i(),y="apiCheck failed! "+a.join(", "),h="\n\n"+u(e,t);return(c+" "+y+" "+s+" "+(l||"")+h).trim()}function u(e,r){function t(e){h(e,function(r,n){-1===f.indexOf(r)&&(f.push(r),"object"==typeof r?t(e):"function"==typeof r&&(e[n]=r.displayName||r.name||"anonymous function"))})}function n(e){return e&&e.length?(e&&1===e.length&&(e=e[0]),l(e,null,2)):"nothing"}function o(){var e="\n",t=!0;r&&1===r.length&&(t="object"==typeof r[0]&&null!==r[0]?!!Object.keys(r[0]).length:!1);var n="type"+(t?"s":""),o=e+e;return"You passed:"+e+s+o+("With the "+n+":"+e+u+o)+("The API calls for:"+e+a)}var i=c(e,r),a=i.apiTypes,u=i.argTypes,p=Array.prototype.slice.call(r||[]),f=[];t(p);var s=n(p);return u=n(u),a=n(a),o()}function c(t,n){t=g(t),n=g(n);var o=t.map(function(t,o){var i=e.exports.globalConfig.hasOwnProperty("verbose");return b(t,{terse:i?!e.exports.globalConfig.verbose:!r.config.verbose,obj:n[o],addHelpers:!0})}),i=n.map(function(e){return f(e,[])});return{argTypes:i,apiTypes:o}}var s=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],d=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];j&&arguments.length&&j["throw"](C.getApiCheckInstanceCheckers,arguments,{prefix:"creating an apiCheck instance"});var v={"throw":n(!0),warn:n(!1),getErrorMessage:a,handleErrorMessage:i,config:{output:s.output||{prefix:"",suffix:"",docsBaseUrl:""},verbose:s.verbose||!1,disabled:s.disabled||!1},utils:y};h(v,function(e,t){return r[t]=e});var O=r.disabled||e.exports.globalConfig.disabled;return h(m.getCheckers(O),function(e,t){return r[t]=e}),h(d,function(e,t){return r[t]=e}),r}function o(e,r){for(var t=[],n=!1,o=0,i=0,u=void 0,p=void 0,f=void 0,c=void 0,s=void 0,l=void 0,y=void 0;(p=e[o++])&&i<r.length;)u=r[i++],s="Argument "+i+(p.isOptional?" (optional)":""),f=p(u,"value",s),l=d(f),c=o>=e.length,y=o>1&&e[o-1].isOptional,l&&c||l&&!c&&!p.isOptional&&!y?(n=!0,t.push(a(f,p,u))):l&&p.isOptional?i--:t.push(v(s)+" passed");return n?t:[]}function i(e,r,t){var n=m.shape({type:m.string,optional:m.bool}),o=m.func.withProperties({__apiCheckData:n}),a=m.shape({__apiCheckData:n}),u=m.oneOfType([o,a])(e,r,t);return d(u)?u:"function"==typeof e||e.hasOwnProperty(e.__apiCheckData.type)?void 0:k(r,t,i.type)}function a(e,r,t){var n=u(r,t);return n=n?" - "+n:"",e.message+n}function u(e,r){var t=e.help;return t?("function"==typeof t&&(t=t(r)),t):""}function p(e,r){var t=e.filter(function(e){return!e.isOptional});return r.length<t.length?["Not enough arguments specified. Requires `"+t.length+"`, you passed `"+r.length+"`"]:[]}function f(e,r){function t(){return e&&Object.keys(e).length}function n(){return-1!==r.indexOf(e)?"[Circular]":(r.push(e),c(e,r))}var o=e&&e.constructor&&e.constructor.name,i=O(e);if("function"===i){if(t()){var a=l(n());return o+" (with properties: "+a+")"}return o}return null===e?"null":"array"!==i&&"object"!==i?i:t()?n():o}function c(e,r){var t={};return h(e,function(e,n){return t[n]=f(e,r)}),t}function s(){var e=m.string.optional,r=m.func.withProperties({type:m.oneOfType([m.string,i]).optional,displayName:m.string.optional,shortType:m.string.optional,notOptional:m.bool.optional,notRequired:m.bool.optional}),t=[m.shape({output:m.shape({prefix:m.string.optional,suffix:m.string.optional,docsBaseUrl:m.string.optional}).strict.optional,verbose:m.bool.optional,disabled:m.bool.optional}).strict.optional,m.objectOf(r).optional],n=[m.typeOrArrayOf(r),m.any.optional,m.shape({prefix:e,suffix:e,urlSuffix:e,onlyPrefix:e,onlySuffix:e,url:e}).strict.optional];return{checkerFnChecker:r,getApiCheckInstanceCheckers:t,checkApiCheckApi:n}}var l=t(2),y=t(3),h=y.each,d=y.isError,v=y.t,g=y.arrayify,b=y.getCheckerDisplay,O=y.typeOf,k=y.getError,m=t(4),C=s();e.exports=n,e.exports.VERSION="7.5.5",e.exports.utils=y,e.exports.globalConfig={verbose:!1,disabled:!1};var j=n({output:{prefix:"apiCheck"}});e.exports.internalChecker=j,h(m,function(r,t){return e.exports[t]=r}),i.type="function with __apiCheckData property and `${function.type}` property"},function(e,r){function t(e,r){var t=[],o=[];return r=r||function(e,r){return"[Circular "+n(r,t,o)+"]"},function(n,i){var a=i;return"object"==typeof i&&i&&(-1!==t.indexOf(i)?a=r(n,i):(t.push(i),o.push(n))),e&&(a=e(n,a)),a}}function n(e,r,t){var n=r.indexOf(e),o=[t[n]];for(n--;n>=0;n--)r[n][o[0]]===e&&(e=r[n],o.unshift(t[n]));return"~"+o.join(".")}function o(e,r,n,o){return JSON.stringify(e,t(r,o),n)}e.exports=o,o.getSerialize=t},function(e,r,t){"use strict";function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e){var r=i(e),t=void 0;if("array"===r)t=[];else{if("object"!==r)return e;t={}}return f(e,function(e,r){t[r]=e}),t}function i(e){return Array.isArray(e)?"array":e instanceof RegExp?"object":typeof e}function a(e,r){var t=void 0,n=r&&r["short"];return t=n&&e.shortType?e.shortType:!n&&"object"==typeof e.type||"function"===e.type?u(e,r):u(e,r)||e.displayName||e.name}function u(e,r){var t=e.type;if("function"==typeof t){var o=t.__apiCheckData,i=t(r);t=n({__apiCheckData:o},o.type,i)}return t}function p(e){return e?Array.isArray(e)?e:[e]:[]}function f(e,r,t){return Array.isArray(e)?s(e,r,t):c(e,r,t)}function c(e,r,t){var n=void 0,o=Object.prototype.hasOwnProperty;for(var i in e)if(o.call(e,i)&&(n=r.call(t,e[i],i,e),n===!1))return n;return!0}function s(e,r,t){for(var n=void 0,o=e.length,i=0;o>i;i++)if(n=r.call(t,e[i],i,e),n===!1)return n;return!0}function l(e){return e instanceof Error}function y(e,r,t){e=p(e);var n=e.slice(),o=n.pop();return 1===n.length&&(r=" "),n.join(r)+(""+(n.length?r+t:"")+o)}function h(e,r,t){"function"==typeof t&&(t=t({"short":!0}));var n="object"!=typeof t?t:A(t);return new Error(d(e,r)+" must be "+v(n))}function d(e,r){var t=v(e||"value"),n=r?" at "+v(r):"";return""+t+n}function v(e){return"`"+e+"`"}function g(e){return"undefined"==typeof e}function b(e,r,t){return t&&(e=_(),e.isNoop=!0),"string"==typeof e.type&&(e.shortType=e.type),f(r,function(r,t){return e[t]=r}),e.displayName||(e.displayName="apiCheck "+v(e.shortType||e.type||e.name)+" type checker"),e.notRequired||(e=O(e,t)),e.notNullable||m(e,t),e.notOptional||k(e,t),e}function O(e,r){var t=r?_():function(r,t,n,o){if(g(r)&&!e.isOptional){var i=n?" in "+v(n):"",u=a(e,{"short":!0}),p="object"!=typeof u?u:A(u);return new Error("Required "+v(t)+" not specified"+i+". Must be "+v(p))}return e(r,t,n,o)};return j(e,t),t.originalChecker=e,t}function k(e,r){var t=r?_():function(r,t,n,o){return g(r)?void 0:e(r,t,n,o)};j(e,t),t.isOptional=!0,t.displayName=e.displayName+" (optional)",t.originalChecker=e,e.optional=t,C(e,e.optional)}function m(e,r){var t=r?_():function(r,t,n,o){return null!==r?e(r,t,n,o):void 0};j(e,t),t.isNullable=!0,t.displayName=e.displayName+" (nullable)",t.originalChecker=e,e.nullable=t,C(e,e.nullable),e.notOptional||k(e.nullable,r)}function C(e,r){if("object"==typeof r.type)r.type=o(r.type);else{if("function"!=typeof r.type)return void(r.type+=" (optional)");r.type=function(){return e.type.apply(e,arguments)}}r.type.__apiCheckData=o(e.type.__apiCheckData)||{},r.type.__apiCheckData.optional=!0}function j(e,r){f(Object.keys(e),function(t){return r[t]=e[t]})}function x(){}function _(){return function(){}}var A=t(2),T={addOptional:k,getRequiredVersion:O,setupChecker:b,addNullable:m};e.exports={each:f,copy:o,typeOf:i,arrayify:p,getCheckerDisplay:a,isError:l,list:y,getError:h,nAtL:d,t:v,undef:g,checkerHelpers:T,noop:x}},function(e,r,t){"use strict";function n(e){function r(r){var t=r.toLowerCase();return b(function(e,n,o){return a(e)!==t?y(n,o,r):void 0},{type:r},e)}function t(){var r="Function",t=b(function(e,t,n){return"function"!==a(e)?y(t,n,r):void 0},{type:r},e);return t.withProperties=function(r){var t=O.objectOf(O.func)(r,"properties","apiCheck.func.withProperties");if(c(t))throw t;var n=O.shape(r,!0);return n.type.__apiCheckData.type="func.withProperties",b(function(e,r,t){var o=O.func(e,r,t);return c(o)?o:n(e,r,t)},{type:n.type,shortType:"func.withProperties"},e)},t}function n(){var r="Object",t="Object (null ok)",n=b(function(e,r,n){return"object"!==a(e)?y(r,n,t):void 0},{type:t},e),o=b(function(e,r,t){return null===e||c(n(e,r,t))?y(r,t,o.type):void 0},{type:r,nullOk:n},e);return o}function i(r){return b(function(e,t,n){return e instanceof r?void 0:y(t,n,r.name)},{type:r.name},e)}function v(r){var t={__apiCheckData:{optional:!1,type:"enum"},"enum":r},n="oneOf["+r.map(function(e){return o(e)}).join(", ")+"]";return b(function(e,t,o){return r.some(function(r){return r===e})?void 0:y(t,o,n)},{type:t,shortType:n},e)}function k(r){function t(e){return e&&e["short"]?o:r.map(function(r){return f(r,e)})}var n=r.map(function(e){return f(e,{"short":!0})}),o="oneOfType["+n.join(", ")+"]";return t.__apiCheckData={optional:!1,type:"oneOfType"},b(function(e,t,n){return r.some(function(r){return!c(r(e,t,n))})?void 0:y(t,n,o)},{type:t,shortType:o},e)}function m(r){function t(e){return e&&e["short"]?o:f(r,e)}var n=f(r,{"short":!0}),o="arrayOf["+n+"]";return t.__apiCheckData={optional:!1,type:"arrayOf"},b(function(e,t,n){return c(O.array(e))||!e.every(function(e){return!c(r(e))})?y(t,n,o):void 0},{type:t,shortType:o},e)}function C(r){function t(e){return e&&e["short"]?o:f(r,e)}var n=f(r,{"short":!0}),o="objectOf["+n+"]";return t.__apiCheckData={optional:!1,type:"objectOf"},b(function(e,t,n){var i=O.object(e,t,n);if(c(i))return i;var a=u(e,function(e,n){return c(r(e,n,t))?!1:void 0});return a?void 0:y(t,n,o)},{type:t,shortType:o},e)}function j(r){function t(e){return e&&e["short"]?o:f(r,e)}var n=f(r,{"short":!0}),o="typeOrArrayOf["+n+"]";return t.__apiCheckData={optional:!1,type:"typeOrArrayOf"},b(function(e,t,n,i){return c(O.oneOfType([r,O.arrayOf(r)])(e,t,n,i))?y(t,n,o):void 0},{type:t,shortType:o},e)}function x(){function r(r,t){function n(){function e(e,r,t,n,o){function a(t,n,o){"string"==typeof e[r]?e[r]+=o:e[r].__apiCheckData[t]=n}if(t||!o||n.isOptional){if(t){var u=n(i[r],r,null,i);c(u)&&a("error","THIS IS THE PROBLEM: "+u.message," <-- THIS IS THE PROBLEM: "+u.message)}}else{var p="ITEM";n.type&&n.type.__apiCheckData&&(p=n.type.__apiCheckData.type.toUpperCase()),a("missing","MISSING THIS "+p," <-- YOU ARE MISSING THIS")}}var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n={},o=t.terse,i=t.obj,a=t.addHelpers,p=t.required;return u(r,function(r,t){var u=i&&i.hasOwnProperty(t),c=g(p)?!r.isOptional:p;o&&!u&&r.isOptional||(n[t]=f(r,{terse:o,obj:i&&i[t],required:c,addHelpers:a})),a&&e(n,t,u,r,c)}),n}function o(){return n.apply(void 0,arguments)}var i={};u(r,function(e,r){i[r]=f(e)}),n.__apiCheckData={strict:!1,optional:!1,type:"shape"};var a=b(function(e,n,o){var i=!t&&O.object(e,n,o);if(c(i))return i;var a=void 0;return o=o?o+(n?"/":""):"",n=n||"",u(r,function(r,t){return e.hasOwnProperty(t)||!r.isOptional?(a=r(e[t],t,""+o+n,e),!c(a)):void 0}),c(a)?a:void 0},{type:n,shortType:"shape"},e);return o.__apiCheckData=p(a.type.__apiCheckData),o.__apiCheckData.strict=!0,a.strict=b(function(e,t,n){var o=a(e,t,n);if(c(o))return o;var i=Object.keys(r),u=Object.keys(e).filter(function(e){return-1===i.indexOf(e)});return u.length?new Error(h(t,n)+" cannot have extra properties: "+d(u.join("`, `"))+".It is limited to "+d(i.join("`, `"))):void 0},{type:o,shortType:"strict shape"},e),a}function t(r,t,o){var i=d(t.join(", ")),a="if "+(r?"all of":"at least one of"),u="specified "+a+" these are not specified: "+i+" (otherwise it's optional)",p="requiredIfNot"+(r?".all":"")+"["+t.join(", ")+"}]",f=n(o,u,p);return b(function(e,n,i,a){var u=a&&a.hasOwnProperty(n),p=r?"every":"some",c=t[p](function(e){return a&&a.hasOwnProperty(e)});return c||u?u?o(e,n,i,a):void 0:y(n,i,f)},{type:f,notRequired:!0},e)}function n(e,r,t){function n(r){return r&&r["short"]?t:f(e)}return n.__apiCheckData={optional:!1,type:"ifNot",description:r},n}return r.ifNot=function(r,t){Array.isArray(r)||(r=[r]);var o=void 0;o=1===r.length?"specified only if "+r[0]+" is not specified":"specified only if none of the following are specified: ["+l(r,", ","and ")+"]";var i="ifNot["+r.join(", ")+"]",a=n(t,o,i);return b(function(e,n,o,i){var u=i&&i.hasOwnProperty(n),p=r.some(function(e){return i&&i.hasOwnProperty(e)});return u===p?y(n,o,a):u?t(e,n,o,i):void 0},{notRequired:!0,type:a,shortType:i},e)},r.onlyIf=function(r,t){r=s(r);var o=void 0;o=1===r.length?"specified only if "+r[0]+" is also specified":"specified only if all of the following are specified: ["+l(r,", ","and ")+"]";var i="onlyIf["+r.join(", ")+"]",a=n(t,o,i);return b(function(e,n,o,i){var u=r.every(function(e){return i.hasOwnProperty(e)});return u?t(e,n,o,i):y(n,o,a)},{type:a,shortType:i},e)},r.requiredIfNot=function(e,r){return Array.isArray(e)||(e=[e]),t(!1,e,r)},r.requiredIfNot.all=function(e,r){if(!Array.isArray(e))throw new Error("requiredIfNot.all must be passed an array");return t(!0,e,r)},r}function _(){var r="function arguments";return b(function(e,t,n){return Array.isArray(e)||c(O.object(e))||c(O.number(e.length))?y(t,n,r):void 0},{type:r},e)}function A(){return b(function(){},{type:"any"},e)}function T(){var r="null";return b(function(e,t,n){return null!==e?y(t,n,r):void 0},{type:r},e)}function w(r,t){var n="Range ("+r+" - "+t+")";return b(function(e,o,i){return"number"!=typeof e||r>e||e>t?y(o,i,n):void 0},{type:n},e)}function E(r){var t="lessThan["+r+"]";return b(function(e,n,o){return"number"!=typeof e||e>r?y(n,o,t):void 0},{type:t},e)}function D(r){var t="greaterThan["+r+"]";return b(function(e,n,o){return"number"!=typeof e||r>e?y(n,o,t):void 0},{type:t},e)}function N(){var r="empty object";return b(function(e,t,n){return"object"!==a(e)||null===e||Object.keys(e).length?y(t,n,r):void 0},{type:r},e)}return{array:r("Array"),bool:r("Boolean"),number:r("Number"),string:r("String"),func:t(),object:n(),emptyObject:N(),instanceOf:i,oneOf:v,oneOfType:k,arrayOf:m,objectOf:C,typeOrArrayOf:j,range:w,lessThan:E,greaterThan:D,shape:x(),args:_(),any:A(),"null":T()}}var o=t(2),i=t(3),a=i.typeOf,u=i.each,p=i.copy,f=i.getCheckerDisplay,c=i.isError,s=i.arrayify,l=i.list,y=i.getError,h=i.nAtL,d=i.t,v=i.checkerHelpers,g=i.undef,b=v.setupChecker,O=e.exports=n();e.exports.getCheckers=n}])});
"format amd";!function(){"use strict";function e(e,t){return e.module("angularMoment",[]).constant("angularMomentConfig",{preprocess:null,timezone:"",format:null,statefulFilters:!0}).constant("moment",t).constant("amTimeAgoConfig",{withoutSuffix:!1,serverTime:null,titleFormat:null,fullDateThreshold:null,fullDateFormat:null}).directive("amTimeAgo",["$window","moment","amMoment","amTimeAgoConfig","angularMomentConfig",function(t,n,o,r,i){return function(a,u,f){function l(){var e;if(g)e=g;else if(r.serverTime){var t=(new Date).getTime(),o=t-D+r.serverTime;e=n(o)}else e=n();return e}function m(){h&&(t.clearTimeout(h),h=null)}function s(e){var n=l().diff(e,"day"),o=M&&n>=M;if(o?u.text(e.format($)):u.text(e.from(l(),v)),T&&!u.attr("title")&&u.attr("title",e.local().format(T)),!o){var r=Math.abs(l().diff(e,"minute")),i=3600;1>r?i=1:60>r?i=30:180>r&&(i=300),h=t.setTimeout(function(){s(e)},1e3*i)}}function d(e){C&&u.attr("datetime",e)}function c(){if(m(),p){var e=o.preprocessDate(p,F,y);s(e),d(e.toISOString())}}var p,g,h=null,y=i.format,v=r.withoutSuffix,T=r.titleFormat,M=r.fullDateThreshold,$=r.fullDateFormat,D=(new Date).getTime(),F=i.preprocess,z=f.amTimeAgo,C="TIME"===u[0].nodeName.toUpperCase();a.$watch(z,function(e){return"undefined"==typeof e||null===e||""===e?(m(),void(p&&(u.text(""),d(""),p=null))):(p=e,void c())}),e.isDefined(f.amFrom)&&a.$watch(f.amFrom,function(e){g="undefined"==typeof e||null===e||""===e?null:n(e),c()}),e.isDefined(f.amWithoutSuffix)&&a.$watch(f.amWithoutSuffix,function(e){"boolean"==typeof e?(v=e,c()):v=r.withoutSuffix}),f.$observe("amFormat",function(e){"undefined"!=typeof e&&(y=e,c())}),f.$observe("amPreprocess",function(e){F=e,c()}),f.$observe("amFullDateThreshold",function(e){M=e,c()}),f.$observe("amFullDateFormat",function(e){$=e,c()}),a.$on("$destroy",function(){m()}),a.$on("amMoment:localeChanged",function(){c()})}}]).service("amMoment",["moment","$rootScope","$log","angularMomentConfig",function(t,n,o,r){this.preprocessors={utc:t.utc,unix:t.unix},this.changeLocale=function(o,r){var i=t.locale(o,r);return e.isDefined(o)&&n.$broadcast("amMoment:localeChanged"),i},this.changeTimezone=function(e){r.timezone=e,n.$broadcast("amMoment:timezoneChanged")},this.preprocessDate=function(n,i,a){return e.isUndefined(i)&&(i=r.preprocess),this.preprocessors[i]?this.preprocessors[i](n,a):(i&&o.warn("angular-moment: Ignoring unsupported value for preprocess: "+i),!isNaN(parseFloat(n))&&isFinite(n)?t(parseInt(n,10)):t(n,a))},this.applyTimezone=function(e,t){return(t=t||r.timezone)?(t.match(/^Z|[+-]\d\d:?\d\d$/i)?e=e.utcOffset(t):e.tz?e=e.tz(t):o.warn("angular-moment: named timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js?"),e):e}}]).filter("amCalendar",["moment","amMoment","angularMomentConfig",function(e,t,n){function o(n,o,r){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,o);var i=e(n);return i.isValid()?t.applyTimezone(i,r).calendar():""}return o.$stateful=n.statefulFilters,o}]).filter("amDifference",["moment","amMoment","angularMomentConfig",function(e,t,n){function o(n,o,r,i,a,u){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,a);var f=e(n);if(!f.isValid())return"";var l;if("undefined"==typeof o||null===o)l=e();else if(o=t.preprocessDate(o,u),l=e(o),!l.isValid())return"";return t.applyTimezone(f).diff(t.applyTimezone(l),r,i)}return o.$stateful=n.statefulFilters,o}]).filter("amDateFormat",["moment","amMoment","angularMomentConfig",function(e,t,n){function o(o,r,i,a,u){var f=u||n.format;if("undefined"==typeof o||null===o)return"";o=t.preprocessDate(o,i,f);var l=e(o);return l.isValid()?t.applyTimezone(l,a).format(r):""}return o.$stateful=n.statefulFilters,o}]).filter("amDurationFormat",["moment","angularMomentConfig",function(e,t){function n(t,n,o){return"undefined"==typeof t||null===t?"":e.duration(t,n).humanize(o)}return n.$stateful=t.statefulFilters,n}]).filter("amTimeAgo",["moment","amMoment","angularMomentConfig",function(e,t,n){function o(n,o,r,i){var a,u;return"undefined"==typeof n||null===n?"":(n=t.preprocessDate(n,o),a=e(n),a.isValid()?(u=e(i),"undefined"!=typeof i&&u.isValid()?t.applyTimezone(a).from(u,r):t.applyTimezone(a).fromNow(r)):"")}return o.$stateful=n.statefulFilters,o}]).filter("amSubtract",["moment","angularMomentConfig",function(e,t){function n(t,n,o){return"undefined"==typeof t||null===t?"":e(t).subtract(parseInt(n,10),o)}return n.$stateful=t.statefulFilters,n}]).filter("amAdd",["moment","angularMomentConfig",function(e,t){function n(t,n,o){return"undefined"==typeof t||null===t?"":e(t).add(parseInt(n,10),o)}return n.$stateful=t.statefulFilters,n}])}"function"==typeof define&&define.amd?define(["angular","moment"],e):"undefined"!=typeof module&&module&&module.exports?(e(angular,require("moment")),module.exports="angularMoment"):e(angular,("undefined"!=typeof global?global:window).moment)}();
"use strict";angular.module("angular-spinkit",["ngRotatingPlaneSpinner","ngDoubleBounceSpinner","ngWaveSpinner","ngWanderingCubesSpinner","ngPulseSpinner","ngChasingDotsSpinner","ngCircleSpinner","ngThreeBounceSpinner","ngCubeGridSpinner","ngWordPressSpinner","ngFadingCircleSpinner","ngSpinkitImagePreloader"]),angular.module("ngRotatingPlaneSpinner",[]).directive("rotatingPlaneSpinner",function(){return{restrict:"E",templateUrl:"src/templates/rotatingPlaneSpinner.html"}}),angular.module("ngDoubleBounceSpinner",[]).directive("doubleBounceSpinner",function(){return{restrict:"E",templateUrl:"src/templates/doubleBounceSpinner.html"}}),angular.module("ngWaveSpinner",[]).directive("waveSpinner",function(){return{restrict:"E",templateUrl:"src/templates/waveSpinner.html"}}),angular.module("ngWanderingCubesSpinner",[]).directive("wanderingCubesSpinner",function(){return{restrict:"E",templateUrl:"src/templates/wanderingCubesSpinner.html"}}),angular.module("ngPulseSpinner",[]).directive("pulseSpinner",function(){return{restrict:"E",templateUrl:"src/templates/pulseSpinner.html"}}),angular.module("ngChasingDotsSpinner",[]).directive("chasingDotsSpinner",function(){return{restrict:"E",templateUrl:"src/templates/chasingDotsSpinner.html"}}),angular.module("ngCircleSpinner",[]).directive("circleSpinner",function(){return{restrict:"E",templateUrl:"src/templates/circleSpinner.html"}}),angular.module("ngThreeBounceSpinner",[]).directive("threeBounceSpinner",function(){return{restrict:"E",templateUrl:"src/templates/threeBounceSpinner.html"}}),angular.module("ngCubeGridSpinner",[]).directive("cubeGridSpinner",function(){return{restrict:"E",templateUrl:"src/templates/cubeGridSpinner.html"}}),angular.module("ngWordPressSpinner",[]).directive("wordPressSpinner",function(){return{restrict:"E",templateUrl:"src/templates/wordPressSpinner.html"}}),angular.module("ngFadingCircleSpinner",[]).directive("fadingCircleSpinner",function(){return{restrict:"E",templateUrl:"src/templates/fadingCircleSpinner.html"}}),angular.module("ngSpinkitImagePreloader",[]).directive("spinkitImagePreloader",["$compile","$injector","$rootScope",function(n,e,i){return{restrict:"A",scope:{ngSrc:"@",spinkitImagePreloader:"@",spinkitImagePreloaderClass:"@"},link:function(r,c,s){var l,a,t=r.spinkitImagePreloaderClass||"spinner-wrapper";e.has(s.$normalize(r.spinkitImagePreloader)+"Directive")&&(l=angular.element("<div/>").addClass(t),a=n("<"+r.spinkitImagePreloader+"/>")(r),l.append(a),l.css("overflow","hidden"),c.after(l),c.css("width")&&l.css("width",c.css("width")),s.width&&l.css("width",s.width+"px"),c.css("height")&&l.css("height",c.css("height")),s.height&&l.css("height",s.height+"px"),c.on("load",function(){l.css("display","none"),c.css("display","block"),i.$broadcast("angular-spinkit:imageLoaded")}),r.$watch("ngSrc",function(){l.css("display","block"),c.css("display","none")}))}}}]),angular.module("angular-spinkit").run(["$templateCache",function(n){n.put("src/templates/chasingDotsSpinner.html",'<div class="chasing-dots-spinner">\n  <div class="dot1"></div>\n  <div class="dot2"></div>\n</div>\n'),n.put("src/templates/circleSpinner.html",'<div class="spinning-dots-spinner">\n  <div class="spinner-container container1">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container2">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container3">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n</div>\n'),n.put("src/templates/cubeGridSpinner.html",'<div class="cube-grid-spinner">\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n  <div class="cube"></div>\n</div>'),n.put("src/templates/doubleBounceSpinner.html",'<div class="double-bounce-spinner">\n  <div class="double-bounce1"></div>\n  <div class="double-bounce2"></div>\n</div>\n'),n.put("src/templates/fadingCircleSpinner.html",'<div class="fading-circle-spinner">\n  <div class="fading-circle1 fading-circle"></div>\n  <div class="fading-circle2 fading-circle"></div>\n  <div class="fading-circle3 fading-circle"></div>\n  <div class="fading-circle4 fading-circle"></div>\n  <div class="fading-circle5 fading-circle"></div>\n  <div class="fading-circle6 fading-circle"></div>\n  <div class="fading-circle7 fading-circle"></div>\n  <div class="fading-circle8 fading-circle"></div>\n  <div class="fading-circle9 fading-circle"></div>\n  <div class="fading-circle10 fading-circle"></div>\n  <div class="fading-circle11 fading-circle"></div>\n  <div class="fading-circle12 fading-circle"></div>\n</div>'),n.put("src/templates/pulseSpinner.html",'<div class="pulse-spinner"></div>\n'),n.put("src/templates/rotatingPlaneSpinner.html",'<div class="three-dots-row-spinner"></div>\n'),n.put("src/templates/threeBounceSpinner.html",'<div class="three-bounce-spinner">\n  <div class="bounce1"></div>\n  <div class="bounce2"></div>\n  <div class="bounce3"></div>\n</div>'),n.put("src/templates/wanderingCubesSpinner.html",'<div class="wandering-cubes-spinner"></div>\n'),n.put("src/templates/waveSpinner.html",'<div class="wave-spinner">\n  <div class="rect1"></div>\n  <div class="rect2"></div>\n  <div class="rect3"></div>\n  <div class="rect4"></div>\n  <div class="rect5"></div>\n</div>\n'),n.put("src/templates/wordPressSpinner.html",'<div class="word-press-spinner">\n  <span class="inner-circle"></span>\n</div>')}]);
!function(e,t,r){"use strict";function n(){this.$get=["$$sanitizeUri",function(e){return function(t){var r=[];return s(t,c(r,function(t,r){return!/^unsafe/.test(e(t,r))})),r.join("")}}]}function i(e){var r=[],n=c(r,t.noop);return n.chars(e),r.join("")}function a(e,r){var n,i={},a=e.split(",");for(n=0;n<a.length;n++)i[r?t.lowercase(a[n]):a[n]]=!0;return i}function s(e,r){function n(e,n,a,s){if(n=t.lowercase(n),A[n])for(;k.last()&&C[k.last()];)i("",k.last());$[n]&&k.last()==n&&i("",n),s=w[n]||!!s,s||k.push(n);var l={};a.replace(d,function(e,t,r,n,i){var a=r||n||i||"";l[t]=o(a)}),r.start&&r.start(n,l,s)}function i(e,n){var i,a=0;if(n=t.lowercase(n))for(a=k.length-1;a>=0&&k[a]!=n;a--);if(a>=0){for(i=k.length-1;i>=a;i--)r.end&&r.end(k[i]);k.length=a}}"string"!=typeof e&&(e=null===e||"undefined"==typeof e?"":""+e);var a,s,l,c,k=[],y=e;for(k.last=function(){return k[k.length-1]};e;){if(c="",s=!0,k.last()&&E[k.last()]?(e=e.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+k.last()+"[^>]*>","i"),function(e,t){return t=t.replace(m,"$1").replace(x,"$1"),r.chars&&r.chars(o(t)),""}),i("",k.last())):(0===e.indexOf("<!--")?(a=e.indexOf("--",4),a>=0&&e.lastIndexOf("-->",a)===a&&(r.comment&&r.comment(e.substring(4,a)),e=e.substring(a+3),s=!1)):b.test(e)?(l=e.match(b),l&&(e=e.replace(l[0],""),s=!1)):f.test(e)?(l=e.match(p),l&&(e=e.substring(l[0].length),l[0].replace(p,i),s=!1)):g.test(e)&&(l=e.match(h),l?(l[4]&&(e=e.substring(l[0].length),l[0].replace(h,n)),s=!1):(c+="<",e=e.substring(1))),s&&(a=e.indexOf("<"),c+=0>a?e:e.substring(0,a),e=0>a?"":e.substring(a),r.chars&&r.chars(o(c)))),e==y)throw u("badparse","The sanitizer was unable to parse the following block of html: {0}",e);y=e}i()}function o(e){return e?(P.innerHTML=e.replace(/</g,"&lt;"),P.textContent):""}function l(e){return e.replace(/&/g,"&amp;").replace(k,function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1);return"&#"+(1024*(t-55296)+(r-56320)+65536)+";"}).replace(y,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function c(e,r){var n=!1,i=t.bind(e,e.push);return{start:function(e,a,s){e=t.lowercase(e),!n&&E[e]&&(n=e),n||F[e]!==!0||(i("<"),i(e),t.forEach(a,function(n,a){var s=t.lowercase(a),o="img"===e&&"src"===s||"background"===s;j[s]!==!0||q[s]===!0&&!r(n,o)||(i(" "),i(a),i('="'),i(l(n)),i('"'))}),i(s?"/>":">"))},end:function(e){e=t.lowercase(e),n||F[e]!==!0||(i("</"),i(e),i(">")),e==n&&(n=!1)},chars:function(e){n||i(l(e))}}}var u=t.$$minErr("$sanitize"),h=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,p=/^<\/\s*([\w:-]+)[^>]*>/,d=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,g=/^</,f=/^<\//,m=/<!--(.*?)-->/g,b=/<!DOCTYPE([^>]*?)>/i,x=/<!\[CDATA\[(.*?)]]>/g,k=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,w=a("area,br,col,hr,img,wbr"),v=a("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),z=a("rp,rt"),$=t.extend({},z,v),A=t.extend({},v,a("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),C=t.extend({},z,a("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),D=a("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan,use"),E=a("script,style"),F=t.extend({},w,A,C,$,D),q=a("background,cite,href,longdesc,src,usemap,xlink:href"),O=a("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),T=a("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",!0),j=t.extend({},q,T,O),P=document.createElement("pre");t.module("ngSanitize",[]).provider("$sanitize",n),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var r=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,n=/^mailto:/i;return function(a,s){function o(e){e&&d.push(i(e))}function l(e,r){d.push("<a "),t.isDefined(s)&&d.push('target="',s,'" '),d.push('href="',e.replace(/"/g,"&quot;"),'">'),o(r),d.push("</a>")}if(!a)return a;for(var c,u,h,p=a,d=[];c=p.match(r);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),h=c.index,o(p.substr(0,h)),l(u,c[0].replace(n,"")),p=p.substring(h+c[0].length);return o(p),e(d.join(""))}}])}(window,window.angular);
!function(t){"use strict";function e(e){return{restrict:"A",require:"^form",link:function(i,n,r,o){var s=r.formStepValidity?e(r.formStepValidity).bind(i,i):i.$setValidity;i.$watch(function(){return o.$valid},function(e){t.isDefined(e)&&s(e)})}}}function i(e,i,n,r,o,s){return{restrict:"EA",scope:!0,controller:["$scope",function(t){this.setStepContainer=function(t){this.stepContainer=t}}],link:{pre:function(t,e,i){t.formSteps=t.$eval(i.steps).map(function(t){return new o(t)}),t.stepTitles=t.formSteps.map(function(t){return t.title})},post:function(i,o,a,c){function l(){e.leave(o),i.$destroy()}if(void 0!==a.useFooter&&n.warn("useFooter attribute is no longer supported. Instead you need to define were you want your steps to be added."),void 0===c.stepContainer)throw n.warn("You need to define a step container, using the stepContainer directive (element and attribute supported)."),n.warn("See changelog: https://github.com/troch/angular-multi-step-form/blob/master/CHANGELOG.md"),n.warn("See migration guide: https://github.com/troch/angular-multi-step-form/blob/master/docs/migrating-to-1.1.x.md"),new Error("Step container not found");o.addClass("multi-step-container");var p=a.onFinish?function(){return i.$eval(a.onFinish)}:l,d=a.onCancel?function(){return i.$eval(a.onCancel)}:l,u=a.onStepChange?function(){return i.$eval(a.onStepChange)}:t.noop,h=c.stepContainer,f=r(i.$eval(a.searchId)),m=i.$eval(a.initialStep),v=void 0,S=void 0,$=void 0,I=void 0;f.augmentScope(i),i.$on("$destroy",function(){f.deferred.resolve()}),f.start(i.formSteps).then(p,d,function(n){var r=n.newStep,o=n.oldStep,a=t.isDefined(o)?o>r?"step-backward":"step-forward":"step-initial",c=i.formSteps[r-1],l=s(c,f,i);h.removeClass("step-forward step-backward step-initial").addClass(a),v&&e.cancel(v),S&&e.cancel(S),$&&$.$destroy(),I&&(v=e.leave(I)),l.then(function(t){u(),$=t.scope,I=t.element,I.scrollTop=0,h.scrollTop=0,S=e.enter(I,h)},function(){throw new Error("Could not load step "+r)})}),f.setInitialIndex(m)}}}}function n(){return{restrict:"EA",require:"^^multiStepContainer",scope:!1,link:function(t,e,i,n){e.addClass("multi-step-body"),n.setStepContainer(e)}}}function r(e,i,n,r,o,s){function a(e){if(e.template)return t.isFunction(e.template)||t.isArray(e.template)?r.$invoke(e.template):e.template;var i=t.isFunction(e.templateUrl)||t.isArray(e.templateUrl)?r.$invoke(e.templateUrl):e.templateUrl;return n.get(i,{cache:s})}function c(t,e,i){var n=t.$new(e.isolatedScope);return i.augmentScope(n),n}return function(n,s,l){var p=t.element("<div>").addClass("form-step"),d=void 0,u={};return u.$template=a(n),t.forEach(n.resolve,function(t,e){u[e]=r.invoke(t)}),o.all(u).then(function(r){r=t.extend({},n.locals,r),r.$template=r.$template.data||r.$template,p.html(r.$template);var o=c(l,n,s);return n.controller&&(r.$scope=o,r.multiStepFormInstance=s,n.isolatedScope&&(r.multiStepFormScope=l),d=i(n.controller,r),n.controllerAs&&(o[n.controllerAs]=d),p.data("$stepController",d)),e(p)(o),{element:p,scope:o}})}}function o(){return function(t){if(!t.template&&!t.templateUrl)throw new Error("Either template or templateUrl properties have to be provided for multi step form"+t.title);this.title=t.title,this.data=t.data||{},this.controller=t.controller,this.controllerAs=t.controllerAs,this.template=t.template,this.templateUrl=t.templateUrl,this.isolatedScope=t.isolatedScope||!1,this.resolve=t.resolve||{},this.locals=t.locals||{},this.hasForm=t.hasForm||!1,this.valid=!1,this.visited=!1}}function s(e,i,n){function r(r){var o=this;this.searchId=r,t.isDefined(r)&&n.$on("$locationChangeSuccess",function(t){var e=parseInt(i.search()[o.searchId]);isNaN(e)||o.activeIndex===e||o.setActiveIndex(parseInt(e))}),this.steps=[],this.getSteps=function(){return this.steps},this.deferred=e.defer(),this.start=function(t){if(!t||!t.length)throw new Error("At least one step has to be defined");return this.steps=t,this.deferred.promise},this.cancel=function(){this.deferred.reject("cancelled")},this.finish=function(){this.deferred.resolve()},this.getActiveIndex=function(){return this.activeIndex},this.setInitialIndex=function(e){var n=void 0;return t.isDefined(e)?this.setActiveIndex(e):this.searchId&&(n=parseInt(i.search()[this.searchId]),!isNaN(n))?this.setActiveIndex(n):void this.setActiveIndex(1)},this.setActiveIndex=function(t){this.searchId&&(this.activeIndex?i.search(this.searchId,t):i.search(this.searchId,t).replace()),this.deferred.notify({newStep:t,oldStep:this.activeIndex}),this.activeIndex=t},this.getActiveStep=function(){return this.activeIndex?this.steps[this.activeIndex-1]:void 0},this.isFirst=function(){return 1===this.activeIndex},this.isLast=function(){return this.activeIndex===this.steps.length},this.nextStep=function(){this.isLast()||this.setActiveIndex(this.activeIndex+1)},this.previousStep=function(){this.isFirst()||this.setActiveIndex(this.activeIndex-1)},this.setValidity=function(t,e){var i=this.steps[(e||this.activeIndex)-1];i&&(i.valid=t)},this.augmentScope=function(t){var e=this;["cancel","finish","getActiveIndex","setActiveIndex","getActiveStep","getSteps","nextStep","previousStep","isFirst","isLast","setValidity"].forEach(function(i){t["$"+i]=e[i].bind(e)})}}return function(t){return new r(t)}}e.$inject=["$parse"],i.$inject=["$animate","$q","$log","multiStepForm","FormStep","formStepElement"],r.$inject=["$compile","$controller","$http","$injector","$q","$templateCache"],s.$inject=["$q","$location","$rootScope"];var a=t.module("multiStepForm",[]);a.directive("formStepValidity",e).directive("multiStepContainer",i).directive("stepContainer",n).factory("formStepElement",r).factory("FormStep",o).factory("multiStepForm",s)}(angular);
!function(e,t,n){"use strict";function a(e,n,a,o,i,r){function s(e,n){return angular.element((n||t).querySelectorAll(e))}function l(e){return u[e]?u[e]:u[e]=n.get(e,{cache:r}).then(function(e){return e.data})}this.compile=function(t){t.template&&/\.html$/.test(t.template)&&(console.warn("Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead."),t.templateUrl=t.template,t.template="");var n=t.templateUrl,r=t.template||"",u=t.controller,c=t.controllerAs,d=angular.copy(t.resolve||{}),f=angular.copy(t.locals||{}),p=t.transformTemplate||angular.identity,g=t.bindToController;if(angular.forEach(d,function(e,t){angular.isString(e)?d[t]=a.get(e):d[t]=a.invoke(e)}),angular.extend(d,f),r)d.$template=e.when(r);else{if(!n)throw new Error("Missing `template` / `templateUrl` option.");d.$template=l(n)}return t.titleTemplate&&(d.$template=e.all([d.$template,l(t.titleTemplate)]).then(function(e){var t=angular.element(e[0]);return s('[ng-bind="title"]',t[0]).removeAttr("ng-bind").html(e[1]),t[0].outerHTML})),t.contentTemplate&&(d.$template=e.all([d.$template,l(t.contentTemplate)]).then(function(e){var n=angular.element(e[0]),a=s('[ng-bind="content"]',n[0]).removeAttr("ng-bind").html(e[1]);return t.templateUrl||a.next().remove(),n[0].outerHTML})),e.all(d).then(function(e){var n=p(e.$template);t.html&&(n=n.replace(/ng-bind="/gi,'ng-bind-html="'));var a=angular.element("<div>").html(n.trim()).contents(),r=o(a);return{locals:e,element:a,link:function(t){if(e.$scope=t,u){var n=i(u,e,!0);g&&angular.extend(n.instance,e);var o=angular.isObject(n)?n:n();a.data("$ngControllerController",o),a.children().data("$ngControllerController",o),c&&(t[c]=o)}return r.apply(null,arguments)}}})};var u={}}a.$inject=["$q","$http","$injector","$compile","$controller","$templateCache"],angular.module("mgcrea.ngStrap.tooltip",["mgcrea.ngStrap.core","mgcrea.ngStrap.helpers.dimensions"]).provider("$tooltip",function(){var e=this.defaults={animation:"am-fade",customClass:"",prefixClass:"tooltip",prefixEvent:"tooltip",container:!1,target:!1,placement:"top",templateUrl:"tooltip/tooltip.tpl.html",template:"",titleTemplate:!1,trigger:"hover focus",keyboard:!1,html:!1,show:!1,title:"",type:"",delay:0,autoClose:!1,bsEnabled:!0,viewport:{selector:"body",padding:0}};this.$get=["$window","$rootScope","$bsCompiler","$q","$templateCache","$http","$animate","$sce","dimensions","$$rAF","$timeout",function(n,a,o,i,r,s,l,u,c,d,f){function p(i,r){function s(){I.$emit(V.prefixEvent+".show",F)}function p(){if(I.$emit(V.prefixEvent+".hide",F),R===j){if(z&&"focus"===V.trigger)return i[0].blur();A()}}function v(){var e=V.trigger.split(" ");angular.forEach(e,function(e){"click"===e||"contextmenu"===e?i.on(e,F.toggle):"manual"!==e&&(i.on("hover"===e?"mouseenter":"focus",F.enter),i.on("hover"===e?"mouseleave":"blur",F.leave),"button"===N&&"hover"!==e&&i.on($?"touchstart":"mousedown",F.$onFocusElementMouseDown))})}function w(){for(var e=V.trigger.split(" "),t=e.length;t--;){var n=e[t];"click"===n||"contextmenu"===n?i.off(n,F.toggle):"manual"!==n&&(i.off("hover"===n?"mouseenter":"focus",F.enter),i.off("hover"===n?"mouseleave":"blur",F.leave),"button"===N&&"hover"!==n&&i.off($?"touchstart":"mousedown",F.$onFocusElementMouseDown))}}function y(){"focus"!==V.trigger?R.on("keyup",F.$onKeyUp):i.on("keyup",F.$onFocusKeyUp)}function b(){"focus"!==V.trigger?R.off("keyup",F.$onKeyUp):i.off("keyup",F.$onFocusKeyUp)}function D(){f(function(){R.on("click",S),h.on("click",F.hide),K=!0},0,!1)}function k(){K&&(R.off("click",S),h.off("click",F.hide),K=!1)}function S(e){e.stopPropagation()}function x(e){e=e||V.target||i;var a=e[0],o="BODY"===a.tagName,r=a.getBoundingClientRect(),s={};for(var l in r)s[l]=r[l];null===s.width&&(s=angular.extend({},s,{width:r.right-r.left,height:r.bottom-r.top}));var u=o?{top:0,left:0}:c.offset(a),d={scroll:o?t.documentElement.scrollTop||t.body.scrollTop:e.prop("scrollTop")||0},f=o?{width:t.documentElement.clientWidth,height:n.innerHeight}:null;return angular.extend({},s,d,f,u)}function C(e,t,n,a){var o,i=e.split("-");switch(i[0]){case"right":o={top:t.top+t.height/2-a/2,left:t.left+t.width};break;case"bottom":o={top:t.top+t.height,left:t.left+t.width/2-n/2};break;case"left":o={top:t.top+t.height/2-a/2,left:t.left-n};break;default:o={top:t.top-a,left:t.left+t.width/2-n/2}}if(!i[1])return o;if("top"===i[0]||"bottom"===i[0])switch(i[1]){case"left":o.left=t.left;break;case"right":o.left=t.left+t.width-n}else if("left"===i[0]||"right"===i[0])switch(i[1]){case"top":o.top=t.top-a+t.height;break;case"bottom":o.top=t.top}return o}function T(e,t){var n=R[0],a=n.offsetWidth,o=n.offsetHeight,i=parseInt(c.css(n,"margin-top"),10),r=parseInt(c.css(n,"margin-left"),10);isNaN(i)&&(i=0),isNaN(r)&&(r=0),e.top=e.top+i,e.left=e.left+r,c.setOffset(n,angular.extend({using:function(e){R.css({top:Math.round(e.top)+"px",left:Math.round(e.left)+"px",right:""})}},e),0);var s=n.offsetWidth,l=n.offsetHeight;if("top"===t&&l!==o&&(e.top=e.top+o-l),!/top-left|top-right|bottom-left|bottom-right/.test(t)){var u=E(t,e,s,l);if(u.left?e.left+=u.left:e.top+=u.top,c.setOffset(n,e),/top|right|bottom|left/.test(t)){var d=/top|bottom/.test(t),f=d?2*u.left-a+s:2*u.top-o+l,p=d?"offsetWidth":"offsetHeight";M(f,n[p],d)}}}function E(e,t,n,a){var o={top:0,left:0};if(!F.$viewport)return o;var i=V.viewport&&V.viewport.padding||0,r=x(F.$viewport);if(/right|left/.test(e)){var s=t.top-i-r.scroll,l=t.top+i-r.scroll+a;s<r.top?o.top=r.top-s:l>r.top+r.height&&(o.top=r.top+r.height-l)}else{var u=t.left-i,c=t.left+i+n;u<r.left?o.left=r.left-u:c>r.right&&(o.left=r.left+r.width-c)}return o}function M(e,t,n){var a=m(".tooltip-arrow, .arrow",R[0]);a.css(n?"left":"top",50*(1-e/t)+"%").css(n?"top":"left","")}function A(){clearTimeout(H),F.$isShown&&null!==R&&(V.autoClose&&k(),V.keyboard&&b()),q&&(q.$destroy(),q=null),R&&(R.remove(),R=F.$element=null)}var F={},V=F.$options=angular.extend({},e,r),O=F.$promise=o.compile(V),I=F.$scope=V.scope&&V.scope.$new()||a.$new(),N=i[0].nodeName.toLowerCase();if(V.delay&&angular.isString(V.delay)){var P=V.delay.split(",").map(parseFloat);V.delay=P.length>1?{show:P[0],hide:P[1]}:P[0]}F.$id=V.id||i.attr("id")||"",V.title&&(I.title=u.trustAsHtml(V.title)),I.$setEnabled=function(e){I.$$postDigest(function(){F.setEnabled(e)})},I.$hide=function(){I.$$postDigest(function(){F.hide()})},I.$show=function(){I.$$postDigest(function(){F.show()})},I.$toggle=function(){I.$$postDigest(function(){F.toggle()})},F.$isShown=I.$isShown=!1;var H,L,U,R,Y,q;O.then(function(e){U=e,F.init()}),F.init=function(){V.delay&&angular.isNumber(V.delay)&&(V.delay={show:V.delay,hide:V.delay}),"self"===V.container?Y=i:angular.isElement(V.container)?Y=V.container:V.container&&(Y=m(V.container)),v(),V.target&&(V.target=angular.isElement(V.target)?V.target:m(V.target)),V.show&&I.$$postDigest(function(){"focus"===V.trigger?i[0].focus():F.show()})},F.destroy=function(){w(),A(),I.$destroy()},F.enter=function(){return clearTimeout(H),L="in",V.delay&&V.delay.show?void(H=setTimeout(function(){"in"===L&&F.show()},V.delay.show)):F.show()},F.show=function(){if(V.bsEnabled&&!F.$isShown){I.$emit(V.prefixEvent+".show.before",F);var e,t;V.container?(e=Y,t=Y[0].lastChild?angular.element(Y[0].lastChild):null):(e=null,t=i),R&&A(),q=F.$scope.$new(),R=F.$element=U.link(q,function(e,t){}),R.css({top:"-9999px",left:"-9999px",right:"auto",display:"block",visibility:"hidden"}),V.animation&&R.addClass(V.animation),V.type&&R.addClass(V.prefixClass+"-"+V.type),V.customClass&&R.addClass(V.customClass),t?t.after(R):e.prepend(R),F.$isShown=I.$isShown=!0,g(I),F.$applyPlacement(),angular.version.minor<=2?l.enter(R,e,t,s):l.enter(R,e,t).then(s),g(I),d(function(){R&&R.css({visibility:"visible"}),V.keyboard&&("focus"!==V.trigger&&F.focus(),y())}),V.autoClose&&D()}},F.leave=function(){return clearTimeout(H),L="out",V.delay&&V.delay.hide?void(H=setTimeout(function(){"out"===L&&F.hide()},V.delay.hide)):F.hide()};var z,j;F.hide=function(e){F.$isShown&&(I.$emit(V.prefixEvent+".hide.before",F),z=e,j=R,angular.version.minor<=2?l.leave(R,p):l.leave(R).then(p),F.$isShown=I.$isShown=!1,g(I),V.keyboard&&null!==R&&b(),V.autoClose&&null!==R&&k())},F.toggle=function(e){e&&e.preventDefault(),F.$isShown?F.leave():F.enter()},F.focus=function(){R[0].focus()},F.setEnabled=function(e){V.bsEnabled=e},F.setViewport=function(e){V.viewport=e},F.$applyPlacement=function(){if(R){var t=V.placement,n=/\s?auto?\s?/i,a=n.test(t);a&&(t=t.replace(n,"")||e.placement),R.addClass(V.placement);var o=x(),i=R.prop("offsetWidth"),r=R.prop("offsetHeight");if(F.$viewport=V.viewport&&m(V.viewport.selector||V.viewport),a){var s=t,l=x(F.$viewport);/bottom/.test(s)&&o.bottom+r>l.bottom?t=s.replace("bottom","top"):/top/.test(s)&&o.top-r<l.top&&(t=s.replace("top","bottom")),/left/.test(s)&&o.left-i<l.left?t=t.replace("left","right"):/right/.test(s)&&o.right+i>l.width&&(t=t.replace("right","left")),R.removeClass(s).addClass(t)}var u=C(t,o,i,r);T(u,t)}},F.$onKeyUp=function(e){27===e.which&&F.$isShown&&(F.hide(),e.stopPropagation())},F.$onFocusKeyUp=function(e){27===e.which&&(i[0].blur(),e.stopPropagation())},F.$onFocusElementMouseDown=function(e){e.preventDefault(),e.stopPropagation(),F.$isShown?i[0].blur():i[0].focus()};var K=!1;return F}function g(e){e.$$phase||e.$root&&e.$root.$$phase||e.$digest()}function m(e,n){return angular.element((n||t).querySelectorAll(e))}var $="createTouch"in n.document,h=angular.element(n.document);return p}]}).directive("bsTooltip",["$window","$location","$sce","$tooltip","$$rAF",function(e,t,n,a,o){return{restrict:"EAC",scope:!0,link:function(e,t,i,r){var s,l={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","titleTemplate","placement","container","delay","trigger","html","animation","backdropAnimation","type","customClass","id"],function(e){angular.isDefined(i[e])&&(l[e]=i[e])});var u=/^(false|0|)$/i;angular.forEach(["html","container"],function(e){angular.isDefined(i[e])&&u.test(i[e])&&(l[e]=!1)});var c=t.attr("data-target");angular.isDefined(c)&&(u.test(c)?l.target=!1:l.target=c),e.hasOwnProperty("title")||(e.title=""),i.$observe("title",function(t){if(angular.isDefined(t)||!e.hasOwnProperty("title")){var a=e.title;e.title=n.trustAsHtml(t),angular.isDefined(a)&&o(function(){s&&s.$applyPlacement()})}}),i.$observe("disabled",function(e){e&&s.$isShown&&s.hide()}),i.bsTooltip&&e.$watch(i.bsTooltip,function(t,n){angular.isObject(t)?angular.extend(e,t):e.title=t,angular.isDefined(n)&&o(function(){s&&s.$applyPlacement()})},!0),i.bsShow&&e.$watch(i.bsShow,function(e,t){s&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|,?(tooltip),?/i)),e===!0?s.show():s.hide())}),i.bsEnabled&&e.$watch(i.bsEnabled,function(e,t){s&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|1|,?(tooltip),?/i)),e===!1?s.setEnabled(!1):s.setEnabled(!0))}),i.viewport&&e.$watch(i.viewport,function(e){s&&angular.isDefined(e)&&s.setViewport(e)}),s=a(t,l),e.$on("$destroy",function(){s&&s.destroy(),l=null,s=null})}}}]),angular.module("mgcrea.ngStrap.typeahead",["mgcrea.ngStrap.tooltip","mgcrea.ngStrap.helpers.parseOptions"]).provider("$typeahead",function(){var e=this.defaults={animation:"am-fade",prefixClass:"typeahead",prefixEvent:"$typeahead",placement:"bottom-left",templateUrl:"typeahead/typeahead.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,minLength:1,filter:"bsAsyncFilter",limit:6,autoSelect:!1,comparator:"",trimValue:!0};this.$get=["$window","$rootScope","$tooltip","$$rAF","$timeout",function(t,n,a,o,i){function r(t,n,r){var l={},u=angular.extend({},e,r);l=a(t,u);var c=r.scope,d=l.$scope;d.$resetMatches=function(){d.$matches=[],d.$activeIndex=u.autoSelect?0:-1},d.$resetMatches(),d.$activate=function(e){d.$$postDigest(function(){l.activate(e)})},d.$select=function(e,t){d.$$postDigest(function(){l.select(e)})},d.$isVisible=function(){return l.$isVisible()},l.update=function(e){d.$matches=e,d.$activeIndex>=e.length&&(d.$activeIndex=u.autoSelect?0:-1),s(d),o(l.$applyPlacement)},l.activate=function(e){d.$activeIndex=e},l.select=function(e){if(-1!==e){var t=d.$matches[e].value;n.$setViewValue(t),n.$render(),d.$resetMatches(),c&&c.$digest(),d.$emit(u.prefixEvent+".select",t,e,l)}},l.$isVisible=function(){return u.minLength&&n?d.$matches.length&&angular.isString(n.$viewValue)&&n.$viewValue.length>=u.minLength:!!d.$matches.length},l.$getIndex=function(e){var t;for(t=d.$matches.length;t--&&!angular.equals(d.$matches[t].value,e););return t},l.$onMouseDown=function(e){e.preventDefault(),e.stopPropagation()},l.$onKeyDown=function(e){/(38|40|13)/.test(e.keyCode)&&(!l.$isVisible()||13===e.keyCode&&-1===d.$activeIndex||(e.preventDefault(),e.stopPropagation()),13===e.keyCode&&d.$matches.length?l.select(d.$activeIndex):38===e.keyCode&&d.$activeIndex>0?d.$activeIndex--:40===e.keyCode&&d.$activeIndex<d.$matches.length-1?d.$activeIndex++:angular.isUndefined(d.$activeIndex)&&(d.$activeIndex=0),d.$digest())};var f=l.show;l.show=function(){f(),i(function(){l.$element&&(l.$element.on("mousedown",l.$onMouseDown),u.keyboard&&t&&t.on("keydown",l.$onKeyDown))},0,!1)};var p=l.hide;return l.hide=function(){l.$element&&l.$element.off("mousedown",l.$onMouseDown),u.keyboard&&t&&t.off("keydown",l.$onKeyDown),u.autoSelect||l.activate(-1),p()},l}function s(e){e.$$phase||e.$root&&e.$root.$$phase||e.$digest()}return r.defaults=e,r}]}).filter("bsAsyncFilter",["$filter",function(e){return function(t,n,a){return t&&angular.isFunction(t.then)?t.then(function(t){return e("filter")(t,n,a)}):e("filter")(t,n,a)}}]).directive("bsTypeahead",["$window","$parse","$q","$typeahead","$parseOptions",function(e,t,n,a,o){var i=a.defaults;return{restrict:"EAC",require:"ngModel",link:function(e,t,n,r){t.off("change");var s={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","placement","container","delay","trigger","keyboard","html","animation","filter","limit","minLength","watchOptions","selectMode","autoSelect","comparator","id","prefixEvent","prefixClass"],function(e){angular.isDefined(n[e])&&(s[e]=n[e])});var l=/^(false|0|)$/i;angular.forEach(["html","container","trimValue","filter"],function(e){angular.isDefined(n[e])&&l.test(n[e])&&(s[e]=!1)}),t.attr("autocomplete")||t.attr("autocomplete","off");var u=angular.isDefined(s.filter)?s.filter:i.filter,c=s.limit||i.limit,d=s.comparator||i.comparator,f=n.bsOptions;u&&(f+=" | "+u+":$viewValue",d&&(f+=":"+d)),c&&(f+=" | limitTo:"+c);var p=o(f),g=a(t,r,s);if(s.watchOptions){var m=p.$match[7].replace(/\|.+/,"").replace(/\(.*\)/g,"").trim();e.$watchCollection(m,function(t,n){p.valuesFn(e,r).then(function(e){g.update(e),r.$render()})})}e.$watch(n.ngModel,function(t,n){e.$modelValue=t,p.valuesFn(e,r).then(function(e){return s.selectMode&&!e.length&&t.length>0?void r.$setViewValue(r.$viewValue.substring(0,r.$viewValue.length-1)):(e.length>c&&(e=e.slice(0,c)),g.update(e),void r.$render())})}),r.$formatters.push(function(e){var t=p.displayValue(e);return t?t:angular.isDefined(e)&&"object"!=typeof e?e:""}),r.$render=function(){if(r.$isEmpty(r.$viewValue))return t.val("");var e=g.$getIndex(r.$modelValue),n=-1!==e?g.$scope.$matches[e].label:r.$viewValue;n=angular.isObject(n)?p.displayValue(n):n;var a=n?n.toString().replace(/<(?:.|\n)*?>/gm,""):"";t.val(s.trimValue===!1?a:a.trim())},e.$on("$destroy",function(){g&&g.destroy(),s=null,g=null})}}}]),angular.module("mgcrea.ngStrap.timepicker",["mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.helpers.dateFormatter","mgcrea.ngStrap.tooltip"]).provider("$timepicker",function(){var e=this.defaults={animation:"am-fade",prefixClass:"timepicker",placement:"bottom-left",templateUrl:"timepicker/timepicker.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,useNative:!0,timeType:"date",timeFormat:"shortTime",timezone:null,modelTimeFormat:null,autoclose:!1,minTime:-(1/0),maxTime:+(1/0),length:5,hourStep:1,minuteStep:5,secondStep:5,roundDisplay:!1,iconUp:"glyphicon glyphicon-chevron-up",iconDown:"glyphicon glyphicon-chevron-down",arrowBehavior:"pager"};this.$get=["$window","$document","$rootScope","$sce","$dateFormatter","$tooltip","$timeout",function(t,n,a,o,i,r,s){function l(t,n,a){function o(e){var t=6e4*g.minuteStep;return new Date(Math.floor(e.getTime()/t)*t)}function l(e,n){var a=e+n;if(t[0].createTextRange){var o=t[0].createTextRange();o.collapse(!0),o.moveStart("character",e),o.moveEnd("character",a),o.select()}else t[0].setSelectionRange?t[0].setSelectionRange(e,a):angular.isUndefined(t[0].selectionStart)&&(t[0].selectionStart=e,t[0].selectionEnd=a)}function d(){t[0].focus()}var f=r(t,angular.extend({},e,a)),p=a.scope,g=f.$options,m=f.$scope,$=g.lang,h=function(e,t,n){return i.formatDate(e,t,$,n)},v=0,w=g.roundDisplay?o(new Date):new Date,y=n.$dateValue||w,b={hour:y.getHours(),meridian:y.getHours()<12,minute:y.getMinutes(),second:y.getSeconds(),millisecond:y.getMilliseconds()},D=i.getDatetimeFormat(g.timeFormat,$),k=i.hoursFormat(D),S=i.timeSeparator(D),x=i.minutesFormat(D),C=i.secondsFormat(D),T=i.showSeconds(D),E=i.showAM(D);m.$iconUp=g.iconUp,m.$iconDown=g.iconDown,m.$select=function(e,t){f.select(e,t)},m.$moveIndex=function(e,t){f.$moveIndex(e,t)},m.$switchMeridian=function(e){f.switchMeridian(e)},f.update=function(e){angular.isDate(e)&&!isNaN(e.getTime())?(f.$date=e,angular.extend(b,{hour:e.getHours(),minute:e.getMinutes(),second:e.getSeconds(),millisecond:e.getMilliseconds()}),f.$build()):f.$isBuilt||f.$build()},f.select=function(e,t,a){n.$dateValue&&!isNaN(n.$dateValue.getTime())||(n.$dateValue=new Date(1970,0,1)),angular.isDate(e)||(e=new Date(e)),0===t?n.$dateValue.setHours(e.getHours()):1===t?n.$dateValue.setMinutes(e.getMinutes()):2===t&&n.$dateValue.setSeconds(e.getSeconds()),n.$setViewValue(angular.copy(n.$dateValue)),n.$render(),g.autoclose&&!a&&s(function(){f.hide(!0)})},f.switchMeridian=function(e){if(n.$dateValue&&!isNaN(n.$dateValue.getTime())){var t=(e||n.$dateValue).getHours();n.$dateValue.setHours(12>t?t+12:t-12),n.$setViewValue(angular.copy(n.$dateValue)),n.$render()}},f.$build=function(){var e,t,n=m.midIndex=parseInt(g.length/2,10),a=[];for(e=0;e<g.length;e++)t=new Date(1970,0,1,b.hour-(n-e)*g.hourStep),a.push({date:t,label:h(t,k),selected:f.$date&&f.$isSelected(t,0),disabled:f.$isDisabled(t,0)});var o,i=[];for(e=0;e<g.length;e++)o=new Date(1970,0,1,0,b.minute-(n-e)*g.minuteStep),i.push({date:o,label:h(o,x),selected:f.$date&&f.$isSelected(o,1),disabled:f.$isDisabled(o,1)});var r,s=[];for(e=0;e<g.length;e++)r=new Date(1970,0,1,0,0,b.second-(n-e)*g.secondStep),s.push({date:r,label:h(r,C),selected:f.$date&&f.$isSelected(r,2),disabled:f.$isDisabled(r,2)});var l=[];for(e=0;e<g.length;e++)T?l.push([a[e],i[e],s[e]]):l.push([a[e],i[e]]);m.rows=l,m.showSeconds=T,m.showAM=E,m.isAM=(f.$date||a[n].date).getHours()<12,m.timeSeparator=S,f.$isBuilt=!0},f.$isSelected=function(e,t){return f.$date?0===t?e.getHours()===f.$date.getHours():1===t?e.getMinutes()===f.$date.getMinutes():2===t?e.getSeconds()===f.$date.getSeconds():void 0:!1},f.$isDisabled=function(e,t){var n;return 0===t?n=e.getTime()+6e4*b.minute+1e3*b.second:1===t?n=e.getTime()+36e5*b.hour+1e3*b.second:2===t&&(n=e.getTime()+36e5*b.hour+6e4*b.minute),n<1*g.minTime||n>1*g.maxTime},m.$arrowAction=function(e,t){"picker"===g.arrowBehavior?f.$setTimeByStep(e,t):f.$moveIndex(e,t)},f.$setTimeByStep=function(e,t){var n=new Date(f.$date||y),a=n.getHours(),o=n.getMinutes(),i=n.getSeconds();0===t?n.setHours(a-parseInt(g.hourStep,10)*e):1===t?n.setMinutes(o-parseInt(g.minuteStep,10)*e):2===t&&n.setSeconds(i-parseInt(g.secondStep,10)*e),f.select(n,t,!0)},f.$moveIndex=function(e,t){var n;0===t?(n=new Date(1970,0,1,b.hour+e*g.length,b.minute,b.second),angular.extend(b,{hour:n.getHours()})):1===t?(n=new Date(1970,0,1,b.hour,b.minute+e*g.length*g.minuteStep,b.second),angular.extend(b,{minute:n.getMinutes()})):2===t&&(n=new Date(1970,0,1,b.hour,b.minute,b.second+e*g.length*g.secondStep),angular.extend(b,{second:n.getSeconds()})),f.$build()},f.$onMouseDown=function(e){if("input"!==e.target.nodeName.toLowerCase()&&e.preventDefault(),e.stopPropagation(),c){var t=angular.element(e.target);"button"!==t[0].nodeName.toLowerCase()&&(t=t.parent()),t.triggerHandler("click")}},f.$onKeyDown=function(e){if(/(38|37|39|40|13)/.test(e.keyCode)&&!e.shiftKey&&!e.altKey){if(e.preventDefault(),e.stopPropagation(),13===e.keyCode)return void f.hide(!0);var t=new Date(f.$date),n=t.getHours(),a=h(t,k).length,o=t.getMinutes(),i=h(t,x).length,r=t.getSeconds(),s=h(t,C).length,u=1,c=/(37|39)/.test(e.keyCode),d=2+1*T+1*E;c&&(37===e.keyCode?v=1>v?d-1:v-1:39===e.keyCode&&(v=d-1>v?v+1:0));var m=[0,a],$=0;38===e.keyCode&&($=-1),40===e.keyCode&&($=1);var w=2===v&&T,y=2===v&&!T||3===v&&T;0===v?(t.setHours(n+$*parseInt(g.hourStep,10)),a=h(t,k).length,m=[0,a]):1===v?(t.setMinutes(o+$*parseInt(g.minuteStep,10)),i=h(t,x).length,m=[a+u,i]):w?(t.setSeconds(r+$*parseInt(g.secondStep,10)),s=h(t,C).length,m=[a+u+i+u,s]):y&&(c||f.switchMeridian(),m=[a+u+i+u+(s+u)*T,2]),f.select(t,v,!0),l(m[0],m[1]),p.$digest()}};var M=f.init;f.init=function(){return u&&g.useNative?(t.prop("type","time"),void t.css("-webkit-appearance","textfield")):(c&&(t.prop("type","text"),t.attr("readonly","true"),t.on("click",d)),void M())};var A=f.destroy;f.destroy=function(){u&&g.useNative&&t.off("click",d),A()};var F=f.show;f.show=function(){!c&&t.attr("readonly")||t.attr("disabled")||(F(),s(function(){f.$element&&f.$element.on(c?"touchstart":"mousedown",f.$onMouseDown),g.keyboard&&t&&t.on("keydown",f.$onKeyDown)},0,!1))};var V=f.hide;return f.hide=function(e){f.$isShown&&(f.$element&&f.$element.off(c?"touchstart":"mousedown",f.$onMouseDown),g.keyboard&&t&&t.off("keydown",f.$onKeyDown),V(e))},f}var u=/(ip[ao]d|iphone|android)/gi.test(t.navigator.userAgent),c="createTouch"in t.document&&u;return e.lang||(e.lang=i.getDefaultLocale()),l.defaults=e,l}]}).directive("bsTimepicker",["$window","$parse","$q","$dateFormatter","$dateParser","$timepicker",function(e,t,a,o,i,r){var s=r.defaults,l=/(ip[ao]d|iphone|android)/gi.test(e.navigator.userAgent);return{restrict:"EAC",require:"ngModel",link:function(e,t,a,u){function c(e){if(angular.isDate(e)){var t=isNaN(f.minTime)||new Date(e.getTime()).setFullYear(1970,0,1)>=f.minTime,n=isNaN(f.maxTime)||new Date(e.getTime()).setFullYear(1970,0,1)<=f.maxTime,a=t&&n;u.$setValidity("date",a),u.$setValidity("min",t),u.$setValidity("max",n),a&&(u.$dateValue=e)}}function d(){return!u.$dateValue||isNaN(u.$dateValue.getTime())?"":$(u.$dateValue,f.timeFormat)}var f={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","placement","container","delay","trigger","keyboard","html","animation","autoclose","timeType","timeFormat","timezone","modelTimeFormat","useNative","hourStep","minuteStep","secondStep","length","arrowBehavior","iconUp","iconDown","roundDisplay","id","prefixClass","prefixEvent"],function(e){angular.isDefined(a[e])&&(f[e]=a[e])});var p=/^(false|0|)$/i;angular.forEach(["html","container","autoclose","useNative","roundDisplay"],function(e){angular.isDefined(a[e])&&p.test(a[e])&&(f[e]=!1)}),l&&(f.useNative||s.useNative)&&(f.timeFormat="HH:mm");var g=r(t,u,f);f=g.$options;var m=f.lang,$=function(e,t,n){return o.formatDate(e,t,m,n)};a.bsShow&&e.$watch(a.bsShow,function(e,t){g&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|,?(timepicker),?/i)),e===!0?g.show():g.hide())});var h=i({format:f.timeFormat,lang:m});angular.forEach(["minTime","maxTime"],function(e){angular.isDefined(a[e])&&a.$observe(e,function(t){g.$options[e]=h.getTimeForAttribute(e,t),isNaN(g.$options[e])||g.$build(),c(u.$dateValue)})}),e.$watch(a.ngModel,function(e,t){g.update(u.$dateValue)},!0),u.$parsers.unshift(function(e){var t;if(!e)return u.$setValidity("date",!0),null;var a=angular.isDate(e)?e:h.parse(e,u.$dateValue);return!a||isNaN(a.getTime())?(u.$setValidity("date",!1),n):(c(a),"string"===f.timeType?(t=h.timezoneOffsetAdjust(a,f.timezone,!0),$(t,f.modelTimeFormat||f.timeFormat)):(t=h.timezoneOffsetAdjust(u.$dateValue,f.timezone,!0),"number"===f.timeType?t.getTime():"unix"===f.timeType?t.getTime()/1e3:"iso"===f.timeType?t.toISOString():new Date(t)))}),u.$formatters.push(function(e){var t;return t=angular.isUndefined(e)||null===e?NaN:angular.isDate(e)?e:"string"===f.timeType?h.parse(e,null,f.modelTimeFormat):"unix"===f.timeType?new Date(1e3*e):new Date(e),u.$dateValue=h.timezoneOffsetAdjust(t,f.timezone),d()}),u.$render=function(){t.val(d())},e.$on("$destroy",function(){g&&g.destroy(),f=null,g=null})}}}]),angular.module("mgcrea.ngStrap.tab",[]).provider("$tab",function(){var e=this.defaults={animation:"am-fade",template:"tab/tab.tpl.html",navClass:"nav-tabs",activeClass:"active"},t=this.controller=function(t,n,a){var o=this;o.$options=angular.copy(e),angular.forEach(["animation","navClass","activeClass"],function(e){angular.isDefined(a[e])&&(o.$options[e]=a[e])}),t.$navClass=o.$options.navClass,t.$activeClass=o.$options.activeClass,o.$panes=t.$panes=[],o.$activePaneChangeListeners=o.$viewChangeListeners=[],o.$push=function(e){angular.isUndefined(o.$panes.$active)&&t.$setActive(e.name||0),o.$panes.push(e)},o.$remove=function(e){var t,n=o.$panes.indexOf(e),a=o.$panes.$active;t=angular.isString(a)?o.$panes.map(function(e){return e.name}).indexOf(a):o.$panes.$active,o.$panes.splice(n,1),t>n?t--:n===t&&t===o.$panes.length&&t--,t>=0&&t<o.$panes.length?o.$setActive(o.$panes[t].name||t):o.$setActive()},o.$setActive=t.$setActive=function(e){o.$panes.$active=e,o.$activePaneChangeListeners.forEach(function(e){e()})},o.$isActive=t.$isActive=function(e,t){return o.$panes.$active===e.name||o.$panes.$active===t}};this.$get=function(){var n={};return n.defaults=e,n.controller=t,n}}).directive("bsTabs",["$window","$animate","$tab","$parse",function(e,t,n,a){var o=n.defaults;return{require:["?ngModel","bsTabs"],transclude:!0,scope:!0,controller:["$scope","$element","$attrs",n.controller],templateUrl:function(e,t){return t.template||o.template},link:function(e,t,n,o){var i=o[0],r=o[1];if(i&&(r.$activePaneChangeListeners.push(function(){i.$setViewValue(r.$panes.$active)}),i.$formatters.push(function(e){return r.$setActive(e),e})),n.bsActivePane){var s=a(n.bsActivePane);r.$activePaneChangeListeners.push(function(){s.assign(e,r.$panes.$active)}),e.$watch(n.bsActivePane,function(e,t){r.$setActive(e)},!0)}}}}]).directive("bsPane",["$window","$animate","$sce",function(e,t,n){return{require:["^?ngModel","^bsTabs"],scope:!0,link:function(e,a,o,i){function r(){var n=s.$panes.indexOf(e);t[s.$isActive(e,n)?"addClass":"removeClass"](a,s.$options.activeClass)}var s=i[1];a.addClass("tab-pane"),o.$observe("title",function(t,a){e.title=n.trustAsHtml(t)}),e.name=o.name,s.$options.animation&&a.addClass(s.$options.animation),o.$observe("disabled",function(t,n){e.disabled=e.$eval(t)}),s.$push(e),e.$on("$destroy",function(){s.$remove(e)}),s.$activePaneChangeListeners.push(function(){r()}),r()}}}]),angular.module("mgcrea.ngStrap.select",["mgcrea.ngStrap.tooltip","mgcrea.ngStrap.helpers.parseOptions"]).provider("$select",function(){var e=this.defaults={animation:"am-fade",prefixClass:"select",prefixEvent:"$select",placement:"bottom-left",templateUrl:"select/select.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,multiple:!1,allNoneButtons:!1,sort:!0,caretHtml:'&nbsp;<span class="caret"></span>',placeholder:"Choose among the following...",allText:"All",noneText:"None",maxLength:3,maxLengthHtml:"selected",iconCheckmark:"glyphicon glyphicon-ok"};this.$get=["$window","$document","$rootScope","$tooltip","$timeout",function(t,n,a,o,i){function r(a,r,s){var u={},c=angular.extend({},e,s);u=o(a,c);var d=u.$scope;d.$matches=[],c.multiple?d.$activeIndex=[]:d.$activeIndex=-1,d.$isMultiple=c.multiple,d.$showAllNoneButtons=c.allNoneButtons&&c.multiple,d.$iconCheckmark=c.iconCheckmark,d.$allText=c.allText,d.$noneText=c.noneText,d.$activate=function(e){d.$$postDigest(function(){u.activate(e)})},d.$select=function(e,t){d.$$postDigest(function(){u.select(e)})},d.$isVisible=function(){return u.$isVisible()},d.$isActive=function(e){return u.$isActive(e)},d.$selectAll=function(){for(var e=0;e<d.$matches.length;e++)d.$isActive(e)||d.$select(e)},d.$selectNone=function(){for(var e=0;e<d.$matches.length;e++)d.$isActive(e)&&d.$select(e)},u.update=function(e){d.$matches=e,u.$updateActiveIndex()},u.activate=function(e){return c.multiple?(u.$isActive(e)?d.$activeIndex.splice(d.$activeIndex.indexOf(e),1):d.$activeIndex.push(e),c.sort&&d.$activeIndex.sort(function(e,t){return e-t})):d.$activeIndex=e,d.$activeIndex},u.select=function(e){var t=d.$matches[e].value;d.$apply(function(){u.activate(e),c.multiple?r.$setViewValue(d.$activeIndex.map(function(e){return angular.isUndefined(d.$matches[e])?null:d.$matches[e].value})):(r.$setViewValue(t),u.hide())}),d.$emit(c.prefixEvent+".select",t,e,u)},u.$updateActiveIndex=function(){c.multiple?angular.isArray(r.$modelValue)?d.$activeIndex=r.$modelValue.map(function(e){return u.$getIndex(e)}):d.$activeIndex=[]:angular.isDefined(r.$modelValue)&&d.$matches.length?d.$activeIndex=u.$getIndex(r.$modelValue):d.$activeIndex=-1},u.$isVisible=function(){return c.minLength&&r?d.$matches.length&&r.$viewValue.length>=c.minLength:d.$matches.length},u.$isActive=function(e){return c.multiple?-1!==d.$activeIndex.indexOf(e):d.$activeIndex===e},u.$getIndex=function(e){var t;for(t=d.$matches.length;t--&&!angular.equals(d.$matches[t].value,e););return t},u.$onMouseDown=function(e){if(e.preventDefault(),e.stopPropagation(),l){var t=angular.element(e.target);t.triggerHandler("click")}},u.$onKeyDown=function(e){return/(9|13|38|40)/.test(e.keyCode)?(9!==e.keyCode&&(e.preventDefault(),e.stopPropagation()),c.multiple&&9===e.keyCode?u.hide():c.multiple||13!==e.keyCode&&9!==e.keyCode?void(c.multiple||(38===e.keyCode&&d.$activeIndex>0?d.$activeIndex--:38===e.keyCode&&d.$activeIndex<0?d.$activeIndex=d.$matches.length-1:40===e.keyCode&&d.$activeIndex<d.$matches.length-1?d.$activeIndex++:angular.isUndefined(d.$activeIndex)&&(d.$activeIndex=0),d.$digest())):u.select(d.$activeIndex)):void 0},u.$isIE=function(){var e=t.navigator.userAgent;return e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0},u.$selectScrollFix=function(e){"UL"===n[0].activeElement.tagName&&(e.preventDefault(),e.stopImmediatePropagation(),e.target.focus())};var f=u.show;u.show=function(){f(),c.multiple&&u.$element.addClass("select-multiple"),i(function(){u.$element.on(l?"touchstart":"mousedown",u.$onMouseDown),c.keyboard&&a.on("keydown",u.$onKeyDown)},0,!1)};var p=u.hide;return u.hide=function(){!c.multiple&&angular.isUndefined(r.$modelValue)&&(d.$activeIndex=-1),u.$element.off(l?"touchstart":"mousedown",u.$onMouseDown),c.keyboard&&a.off("keydown",u.$onKeyDown),p(!0)},u}var s=/(ip[ao]d|iphone|android)/gi.test(t.navigator.userAgent),l="createTouch"in t.document&&s;return r.defaults=e,r}]}).directive("bsSelect",["$window","$parse","$q","$select","$parseOptions",function(e,t,n,a,o){var i=a.defaults;return{restrict:"EAC",require:"ngModel",link:function(e,t,n,r){var s={scope:e,placeholder:i.placeholder};angular.forEach(["template","templateUrl","controller","controllerAs","placement","container","delay","trigger","keyboard","html","animation","placeholder","allNoneButtons","maxLength","maxLengthHtml","allText","noneText","iconCheckmark","autoClose","id","sort","caretHtml","prefixClass","prefixEvent"],function(e){angular.isDefined(n[e])&&(s[e]=n[e])});var l=/^(false|0|)$/i;angular.forEach(["html","container","allNoneButtons","sort"],function(e){angular.isDefined(n[e])&&l.test(n[e])&&(s[e]=!1)});var u=t.attr("data-multiple");if(angular.isDefined(u)&&(l.test(u)?s.multiple=!1:s.multiple=u),"select"===t[0].nodeName.toLowerCase()){var c=t;c.css("display","none"),t=angular.element('<button type="button" class="btn btn-default"></button>'),c.after(t)}var d=o(n.bsOptions),f=a(t,r,s);f.$isIE()&&t[0].addEventListener("blur",f.$selectScrollFix);var p=d.$match[7].replace(/\|.+/,"").trim();e.$watch(p,function(t,n){d.valuesFn(e,r).then(function(e){f.update(e),r.$render()});
},!0),e.$watch(n.ngModel,function(e,t){f.$updateActiveIndex(),r.$render()},!0),r.$render=function(){var e,n;s.multiple&&angular.isArray(r.$modelValue)?(e=r.$modelValue.map(function(e){return n=f.$getIndex(e),-1!==n?f.$scope.$matches[n].label:!1}).filter(angular.isDefined),e=e.length>(s.maxLength||i.maxLength)?e.length+" "+(s.maxLengthHtml||i.maxLengthHtml):e.join(", ")):(n=f.$getIndex(r.$modelValue),e=-1!==n?f.$scope.$matches[n].label:!1),t.html((e||s.placeholder)+(s.caretHtml||i.caretHtml))},s.multiple&&(r.$isEmpty=function(e){return!e||0===e.length}),e.$on("$destroy",function(){f&&f.destroy(),s=null,f=null})}}}]),angular.module("mgcrea.ngStrap.scrollspy",["mgcrea.ngStrap.helpers.debounce","mgcrea.ngStrap.helpers.dimensions"]).provider("$scrollspy",function(){var e=this.$$spies={},n=this.defaults={debounce:150,throttle:100,offset:100};this.$get=["$window","$document","$rootScope","dimensions","debounce","throttle",function(a,o,i,r,s,l){function u(e,t){return e[0].nodeName&&e[0].nodeName.toLowerCase()===t.toLowerCase()}function c(o){var c=angular.extend({},n,o);c.element||(c.element=p);var g=u(c.element,"body"),m=g?d:c.element,$=g?"window":c.id;if(e[$])return e[$].$$count++,e[$];var h,v,w,y,b,D,k,S,x={},C=x.$trackedElements=[],T=[];return x.init=function(){this.$$count=1,y=s(this.checkPosition,c.debounce),b=l(this.checkPosition,c.throttle),m.on("click",this.checkPositionWithEventLoop),d.on("resize",y),m.on("scroll",b),D=s(this.checkOffsets,c.debounce),h=i.$on("$viewContentLoaded",D),v=i.$on("$includeContentLoaded",D),D(),$&&(e[$]=x)},x.destroy=function(){this.$$count--,this.$$count>0||(m.off("click",this.checkPositionWithEventLoop),d.off("resize",y),m.off("scroll",b),h(),v(),$&&delete e[$])},x.checkPosition=function(){if(T.length){if(S=(g?a.pageYOffset:m.prop("scrollTop"))||0,k=Math.max(a.innerHeight,f.prop("clientHeight")),S<T[0].offsetTop&&w!==T[0].target)return x.$activateElement(T[0]);for(var e=T.length;e--;)if(!angular.isUndefined(T[e].offsetTop)&&null!==T[e].offsetTop&&w!==T[e].target&&!(S<T[e].offsetTop||T[e+1]&&S>T[e+1].offsetTop))return x.$activateElement(T[e])}},x.checkPositionWithEventLoop=function(){setTimeout(x.checkPosition,1)},x.$activateElement=function(e){if(w){var t=x.$getTrackedElement(w);t&&(t.source.removeClass("active"),u(t.source,"li")&&u(t.source.parent().parent(),"li")&&t.source.parent().parent().removeClass("active"))}w=e.target,e.source.addClass("active"),u(e.source,"li")&&u(e.source.parent().parent(),"li")&&e.source.parent().parent().addClass("active")},x.$getTrackedElement=function(e){return C.filter(function(t){return t.target===e})[0]},x.checkOffsets=function(){angular.forEach(C,function(e){var n=t.querySelector(e.target);e.offsetTop=n?r.offset(n).top:null,c.offset&&null!==e.offsetTop&&(e.offsetTop-=1*c.offset)}),T=C.filter(function(e){return null!==e.offsetTop}).sort(function(e,t){return e.offsetTop-t.offsetTop}),y()},x.trackElement=function(e,t){C.push({target:e,source:t})},x.untrackElement=function(e,t){for(var n,a=C.length;a--;)if(C[a].target===e&&C[a].source===t){n=a;break}C.splice(n,1)},x.activate=function(e){C[e].addClass("active")},x.init(),x}var d=angular.element(a),f=angular.element(o.prop("documentElement")),p=angular.element(a.document.body);return c}]}).directive("bsScrollspy",["$rootScope","debounce","dimensions","$scrollspy",function(e,t,n,a){return{restrict:"EAC",link:function(e,t,n){var o={scope:e};angular.forEach(["offset","target"],function(e){angular.isDefined(n[e])&&(o[e]=n[e])});var i=a(o);i.trackElement(o.target,t),e.$on("$destroy",function(){i&&(i.untrackElement(o.target,t),i.destroy()),o=null,i=null})}}}]).directive("bsScrollspyList",["$rootScope","debounce","dimensions","$scrollspy",function(e,t,n,a){return{restrict:"A",compile:function(e,t){var n=e[0].querySelectorAll("li > a[href]");angular.forEach(n,function(e){var t=angular.element(e);t.parent().attr("bs-scrollspy","").attr("data-target",t.attr("href"))})}}}]),angular.module("mgcrea.ngStrap.popover",["mgcrea.ngStrap.tooltip"]).provider("$popover",function(){var e=this.defaults={animation:"am-fade",customClass:"",container:!1,target:!1,placement:"right",templateUrl:"popover/popover.tpl.html",contentTemplate:!1,trigger:"click",keyboard:!0,html:!1,title:"",content:"",delay:0,autoClose:!1};this.$get=["$tooltip",function(t){function n(n,a){var o=angular.extend({},e,a),i=t(n,o);return o.content&&(i.$scope.content=o.content),i}return n}]}).directive("bsPopover",["$window","$sce","$popover",function(e,t,n){var a=e.requestAnimationFrame||e.setTimeout;return{restrict:"EAC",scope:!0,link:function(e,o,i){var r,s={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","contentTemplate","placement","container","delay","trigger","html","animation","customClass","autoClose","id","prefixClass","prefixEvent"],function(e){angular.isDefined(i[e])&&(s[e]=i[e])});var l=/^(false|0|)$/i;angular.forEach(["html","container","autoClose"],function(e){angular.isDefined(i[e])&&l.test(i[e])&&(s[e]=!1)});var u=o.attr("data-target");angular.isDefined(u)&&(l.test(u)?s.target=!1:s.target=u),angular.forEach(["title","content"],function(n){i[n]&&i.$observe(n,function(o,i){e[n]=t.trustAsHtml(o),angular.isDefined(i)&&a(function(){r&&r.$applyPlacement()})})}),i.bsPopover&&e.$watch(i.bsPopover,function(t,n){angular.isObject(t)?angular.extend(e,t):e.content=t,angular.isDefined(n)&&a(function(){r&&r.$applyPlacement()})},!0),i.bsShow&&e.$watch(i.bsShow,function(e,t){r&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|,?(popover),?/i)),e===!0?r.show():r.hide())}),i.viewport&&e.$watch(i.viewport,function(e){r&&angular.isDefined(e)&&r.setViewport(e)}),r=n(o,s),e.$on("$destroy",function(){r&&r.destroy(),s=null,r=null})}}}]),angular.module("mgcrea.ngStrap.navbar",[]).provider("$navbar",function(){var e=this.defaults={activeClass:"active",routeAttr:"data-match-route",strict:!1};this.$get=function(){return{defaults:e}}}).directive("bsNavbar",["$window","$location","$navbar",function(e,t,n){var a=n.defaults;return{restrict:"A",link:function(e,n,o,i){var r=angular.copy(a);angular.forEach(Object.keys(a),function(e){angular.isDefined(o[e])&&(r[e]=o[e])}),e.$watch(function(){return t.path()},function(e,t){var a=n[0].querySelectorAll("li["+r.routeAttr+"]");angular.forEach(a,function(t){var n=angular.element(t),a=n.attr(r.routeAttr).replace("/","\\/");r.strict&&(a="^"+a+"$");var o=new RegExp(a,"i");o.test(e)?n.addClass(r.activeClass):n.removeClass(r.activeClass)})})}}}]),angular.module("mgcrea.ngStrap.dropdown",["mgcrea.ngStrap.tooltip"]).provider("$dropdown",function(){var e=this.defaults={animation:"am-fade",prefixClass:"dropdown",prefixEvent:"dropdown",placement:"bottom-left",templateUrl:"dropdown/dropdown.tpl.html",trigger:"click",container:!1,keyboard:!0,html:!1,delay:0};this.$get=["$window","$rootScope","$tooltip","$timeout",function(t,n,a,o){function i(t,i){function l(e){return e.target!==t[0]?e.target!==t[0]&&u.hide():void 0}var u={},c=angular.extend({},e,i);u.$scope=c.scope&&c.scope.$new()||n.$new(),u=a(t,c);var d=t.parent();u.$onKeyDown=function(e){if(/(38|40)/.test(e.keyCode)){e.preventDefault(),e.stopPropagation();var t=angular.element(u.$element[0].querySelectorAll("li:not(.divider) a"));if(t.length){var n;angular.forEach(t,function(e,t){s&&s.call(e,":focus")&&(n=t)}),38===e.keyCode&&n>0?n--:40===e.keyCode&&n<t.length-1?n++:angular.isUndefined(n)&&(n=0),t.eq(n)[0].focus()}}};var f=u.show;u.show=function(){f(),o(function(){c.keyboard&&u.$element&&u.$element.on("keydown",u.$onKeyDown),r.on("click",l)},0,!1),d.hasClass("dropdown")&&d.addClass("open")};var p=u.hide;u.hide=function(){u.$isShown&&(c.keyboard&&u.$element&&u.$element.off("keydown",u.$onKeyDown),r.off("click",l),d.hasClass("dropdown")&&d.removeClass("open"),p())};var g=u.destroy;return u.destroy=function(){r.off("click",l),g()},u}var r=angular.element(t.document.body),s=Element.prototype.matchesSelector||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector;return i}]}).directive("bsDropdown",["$window","$sce","$dropdown",function(e,t,a){return{restrict:"EAC",scope:!0,compile:function(e,t){if(!t.bsDropdown){for(var o=e[0].nextSibling;o&&1!==o.nodeType;)o=o.nextSibling;o&&o.className.split(" ").indexOf("dropdown-menu")>=0&&(t.template=o.outerHTML,t.templateUrl=n,o.parentNode.removeChild(o))}return function(e,n,o){var i={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","placement","container","delay","trigger","keyboard","html","animation","id","autoClose"],function(e){angular.isDefined(t[e])&&(i[e]=t[e])});var r=/^(false|0|)$/i;angular.forEach(["html","container"],function(e){angular.isDefined(o[e])&&r.test(o[e])&&(i[e]=!1)}),o.bsDropdown&&e.$watch(o.bsDropdown,function(t,n){e.content=t},!0);var s=a(n,i);o.bsShow&&e.$watch(o.bsShow,function(e,t){s&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|,?(dropdown),?/i)),e===!0?s.show():s.hide())}),e.$on("$destroy",function(){s&&s.destroy(),i=null,s=null})}}}}]),angular.module("mgcrea.ngStrap.modal",["mgcrea.ngStrap.core","mgcrea.ngStrap.helpers.dimensions"]).provider("$modal",function(){var e=this.defaults={animation:"am-fade",backdropAnimation:"am-fade",customClass:"",prefixClass:"modal",prefixEvent:"modal",placement:"top",templateUrl:"modal/modal.tpl.html",template:"",contentTemplate:!1,container:!1,element:null,backdrop:!0,keyboard:!0,html:!1,show:!0,size:null};this.$get=["$window","$rootScope","$bsCompiler","$animate","$timeout","$sce","dimensions",function(n,a,o,i,r,s,l){function u(t){function n(){T.$emit(x.prefixEvent+".show",S)}function r(){T.$emit(x.prefixEvent+".hide",S),g.removeClass(x.prefixClass+"-open"),x.animation&&g.removeClass(x.prefixClass+"-with-"+x.animation)}function l(){x.backdrop&&(M.on("click",b),F.on("click",b),F.on("wheel",D))}function u(){x.backdrop&&(M.off("click",b),F.off("click",b),F.off("wheel",D))}function w(){x.keyboard&&M.on("keyup",S.$onKeyUp)}function y(){x.keyboard&&M.off("keyup",S.$onKeyUp)}function b(e){e.target===e.currentTarget&&("static"===x.backdrop?S.focus():S.hide())}function D(e){e.preventDefault()}function k(){S.$isShown&&null!==M&&(u(),y()),A&&(A.$destroy(),A=null),M&&(M.remove(),M=S.$element=null)}var S={},x=S.$options=angular.extend({},e,t),C=S.$promise=o.compile(x),T=S.$scope=x.scope&&x.scope.$new()||a.$new();x.element||x.container||(x.container="body"),S.$id=x.id||x.element&&x.element.attr("id")||"",f(["title","content"],function(e){x[e]&&(T[e]=s.trustAsHtml(x[e]))}),T.$hide=function(){T.$$postDigest(function(){S.hide()})},T.$show=function(){T.$$postDigest(function(){S.show()})},T.$toggle=function(){T.$$postDigest(function(){S.toggle()})},S.$isShown=T.$isShown=!1;var E,M,A,F=angular.element('<div class="'+x.prefixClass+'-backdrop"/>');return F.css({position:"fixed",top:"0px",left:"0px",bottom:"0px",right:"0px"}),C.then(function(e){E=e,S.init()}),S.init=function(){x.show&&T.$$postDigest(function(){S.show()})},S.destroy=function(){k(),F&&(F.remove(),F=null),T.$destroy()},S.show=function(){if(!S.$isShown){var e,t;if(angular.isElement(x.container)?(e=x.container,t=x.container[0].lastChild?angular.element(x.container[0].lastChild):null):x.container?(e=d(x.container),t=e[0]&&e[0].lastChild?angular.element(e[0].lastChild):null):(e=null,t=x.element),M&&k(),A=S.$scope.$new(),M=S.$element=E.link(A,function(e,t){}),x.backdrop&&(M.css({"z-index":$+20*m}),F.css({"z-index":h+20*m}),m++),!T.$emit(x.prefixEvent+".show.before",S).defaultPrevented){M.css({display:"block"}).addClass(x.placement),x.customClass&&M.addClass(x.customClass),x.size&&v[x.size]&&angular.element(d(".modal-dialog",M[0])).addClass(v[x.size]),x.animation&&(x.backdrop&&F.addClass(x.backdropAnimation),M.addClass(x.animation)),x.backdrop&&i.enter(F,g,null),angular.version.minor<=2?i.enter(M,e,t,n):i.enter(M,e,t).then(n),S.$isShown=T.$isShown=!0,c(T);var a=M[0];p(function(){a.focus()}),g.addClass(x.prefixClass+"-open"),x.animation&&g.addClass(x.prefixClass+"-with-"+x.animation),l(),w()}}},S.hide=function(){S.$isShown&&(x.backdrop&&m--,T.$emit(x.prefixEvent+".hide.before",S).defaultPrevented||(angular.version.minor<=2?i.leave(M,r):i.leave(M).then(r),x.backdrop&&i.leave(F),S.$isShown=T.$isShown=!1,c(T),u(),y()))},S.toggle=function(){S.$isShown?S.hide():S.show()},S.focus=function(){M[0].focus()},S.$onKeyUp=function(e){27===e.which&&S.$isShown&&(S.hide(),e.stopPropagation())},S}function c(e){e.$$phase||e.$root&&e.$root.$$phase||e.$digest()}function d(e,n){return angular.element((n||t).querySelectorAll(e))}var f=angular.forEach,p=n.requestAnimationFrame||n.setTimeout,g=angular.element(n.document.body),m=0,$=1050,h=1040,v={lg:"modal-lg",sm:"modal-sm"};return u}]}).directive("bsModal",["$window","$sce","$modal",function(e,t,n){return{restrict:"EAC",scope:!0,link:function(e,a,o,i){var r={scope:e,element:a,show:!1};angular.forEach(["template","templateUrl","controller","controllerAs","contentTemplate","placement","backdrop","keyboard","html","container","animation","backdropAnimation","id","prefixEvent","prefixClass","customClass","modalClass","size"],function(e){angular.isDefined(o[e])&&(r[e]=o[e])}),r.modalClass&&(r.customClass=r.modalClass);var s=/^(false|0|)$/i;angular.forEach(["backdrop","keyboard","html","container"],function(e){angular.isDefined(o[e])&&s.test(o[e])&&(r[e]=!1)}),angular.forEach(["title","content"],function(n){o[n]&&o.$observe(n,function(a,o){e[n]=t.trustAsHtml(a)})}),o.bsModal&&e.$watch(o.bsModal,function(t,n){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var l=n(r);a.on(o.trigger||"click",l.toggle),e.$on("$destroy",function(){l&&l.destroy(),r=null,l=null})}}}]),angular.version.minor<3&&angular.version.dot<14&&angular.module("ng").factory("$$rAF",["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame,a=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,o=!!n,i=o?function(e){var t=n(e);return function(){a(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return i.supported=o,i}]),angular.module("mgcrea.ngStrap.helpers.parseOptions",[]).provider("$parseOptions",function(){var e=this.defaults={regexp:/^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/};this.$get=["$parse","$q",function(t,n){function a(a,o){function i(e,t){return e.map(function(e,n){var a,o,i={};return i[c]=e,a=u(t,i),o=p(t,i),{label:a,value:o,index:n}})}var r={},s=angular.extend({},e,o);r.$values=[];var l,u,c,d,f,p,g;return r.init=function(){r.$match=l=a.match(s.regexp),u=t(l[2]||l[1]),c=l[4]||l[6],d=l[5],f=t(l[3]||""),p=t(l[2]?l[1]:c),g=t(l[7])},r.valuesFn=function(e,t){return n.when(g(e,t)).then(function(t){return angular.isArray(t)||(t=[]),r.$values=t.length?i(t,e):[],r.$values})},r.displayValue=function(e){var t={};return t[c]=e,u(t)},r.init(),r}return a}]}),angular.module("mgcrea.ngStrap.helpers.dimensions",[]).factory("dimensions",function(){function t(e){var t=e.ownerDocument,o=e.offsetParent||t;if(a(o,"#document"))return t.documentElement;for(;o&&!a(o,"html")&&"static"===n.css(o,"position");)o=o.offsetParent;return o||t.documentElement}var n={},a=n.nodeName=function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()};return n.css=function(t,n,a){var o;return o=t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n],a===!0?parseFloat(o)||0:o},n.offset=function(t){var n=t.getBoundingClientRect(),a=t.ownerDocument;return{width:n.width||t.offsetWidth,height:n.height||t.offsetHeight,top:n.top+(e.pageYOffset||a.documentElement.scrollTop)-(a.documentElement.clientTop||0),left:n.left+(e.pageXOffset||a.documentElement.scrollLeft)-(a.documentElement.clientLeft||0)}},n.setOffset=function(e,t,a){var o,i,r,s,l,u,c,d=n.css(e,"position"),f=angular.element(e),p={};"static"===d&&(e.style.position="relative"),l=n.offset(e),r=n.css(e,"top"),u=n.css(e,"left"),c=("absolute"===d||"fixed"===d)&&(r+u).indexOf("auto")>-1,c?(o=n.position(e),s=o.top,i=o.left):(s=parseFloat(r)||0,i=parseFloat(u)||0),angular.isFunction(t)&&(t=t.call(e,a,l)),null!==t.top&&(p.top=t.top-l.top+s),null!==t.left&&(p.left=t.left-l.left+i),"using"in t?t.using.call(f,p):f.css({top:p.top+"px",left:p.left+"px"})},n.position=function(e){var o,i,r={top:0,left:0};return"fixed"===n.css(e,"position")?i=e.getBoundingClientRect():(o=t(e),i=n.offset(e),a(o,"html")||(r=n.offset(o)),r.top+=n.css(o,"borderTopWidth",!0),r.left+=n.css(o,"borderLeftWidth",!0)),{width:e.offsetWidth,height:e.offsetHeight,top:i.top-r.top-n.css(e,"marginTop",!0),left:i.left-r.left-n.css(e,"marginLeft",!0)}},n.height=function(e,t){var a=e.offsetHeight;return t?a+=n.css(e,"marginTop",!0)+n.css(e,"marginBottom",!0):a-=n.css(e,"paddingTop",!0)+n.css(e,"paddingBottom",!0)+n.css(e,"borderTopWidth",!0)+n.css(e,"borderBottomWidth",!0),a},n.width=function(e,t){var a=e.offsetWidth;return t?a+=n.css(e,"marginLeft",!0)+n.css(e,"marginRight",!0):a-=n.css(e,"paddingLeft",!0)+n.css(e,"paddingRight",!0)+n.css(e,"borderLeftWidth",!0)+n.css(e,"borderRightWidth",!0),a},n}),angular.module("mgcrea.ngStrap.helpers.debounce",[]).factory("debounce",["$timeout",function(e){return function(t,n,a){var o=null;return function(){var i=this,r=arguments,s=a&&!o;return o&&e.cancel(o),o=e(function(){o=null,a||t.apply(i,r)},n,!1),s&&t.apply(i,r),o}}}]).factory("throttle",["$timeout",function(e){return function(t,n,a){var o=null;return a||(a={}),function(){var i=this,r=arguments;o||(a.leading!==!1&&t.apply(i,r),o=e(function(){o=null,a.trailing!==!1&&t.apply(i,r)},n,!1))}}}]),angular.module("mgcrea.ngStrap.helpers.dateParser",[]).provider("$dateParser",["$localeProvider",function(e){function t(){this.year=1970,this.month=0,this.day=1,this.hours=0,this.minutes=0,this.seconds=0,this.milliseconds=0}function n(){}function a(e){return!isNaN(parseFloat(e))&&isFinite(e)}function o(e,t){for(var n=e.length,a=t.toString().toLowerCase(),o=0;n>o;o++)if(e[o].toLowerCase()===a)return o;return-1}t.prototype.setMilliseconds=function(e){this.milliseconds=e},t.prototype.setSeconds=function(e){this.seconds=e},t.prototype.setMinutes=function(e){this.minutes=e},t.prototype.setHours=function(e){this.hours=e},t.prototype.getHours=function(){return this.hours},t.prototype.setDate=function(e){this.day=e},t.prototype.setMonth=function(e){this.month=e},t.prototype.setFullYear=function(e){this.year=e},t.prototype.fromDate=function(e){return this.year=e.getFullYear(),this.month=e.getMonth(),this.day=e.getDate(),this.hours=e.getHours(),this.minutes=e.getMinutes(),this.seconds=e.getSeconds(),this.milliseconds=e.getMilliseconds(),this},t.prototype.toDate=function(){return new Date(this.year,this.month,this.day,this.hours,this.minutes,this.seconds,this.milliseconds)};var i=t.prototype,r=this.defaults={format:"shortDate",strict:!1};this.$get=["$locale","dateFilter",function(e,s){var l=function(l){function u(e){var t=c(e);return g(t)}function c(e){var t=d(e),n=t.replace(/''/g,"\\'"),a=/('(?:\\'|.)*?')/,o=n.split(a),i=Object.keys(b),r=[];return angular.forEach(o,function(e){if(f(e))e=p(e);else for(var t=0;t<i.length;t++)e=e.split(i[t]).join("${"+t+"}");r.push(e)}),r.join("")}function d(e){return e.replace(/\\/g,"[\\\\]").replace(/-/g,"[-]").replace(/\./g,"[.]").replace(/\*/g,"[*]").replace(/\+/g,"[+]").replace(/\?/g,"[?]").replace(/\$/g,"[$]").replace(/\^/g,"[^]").replace(/\//g,"[/]").replace(/\\s/g,"[\\s]")}function f(e){return/^'.*'$/.test(e)}function p(e){return e.replace(/^'(.*)'$/,"$1")}function g(e){for(var t=Object.keys(b),n=e,a=0;a<t.length;a++)n=n.split("${"+a+"}").join("("+b[t[a]]+")");return new RegExp("^"+n+"$",["i"])}function m(e){var t=c(e);return $(t)}function $(e){for(var t,n,a,o,i=Object.keys(b),r=new RegExp("\\${(\\d+)}","g"),s=[];null!==(t=r.exec(e));)n=t[1],a=i[n],o=D[a],s.push(o);return s}var h,v,w=angular.extend({},r,l),y={},b={sss:"[0-9]{3}",ss:"[0-5][0-9]",s:w.strict?"[1-5]?[0-9]":"[0-9]|[0-5][0-9]",mm:"[0-5][0-9]",m:w.strict?"[1-5]?[0-9]":"[0-9]|[0-5][0-9]",HH:"[01][0-9]|2[0-3]",H:w.strict?"1?[0-9]|2[0-3]":"[01]?[0-9]|2[0-3]",hh:"[0][1-9]|[1][012]",h:w.strict?"[1-9]|1[012]":"0?[1-9]|1[012]",a:"AM|PM",EEEE:e.DATETIME_FORMATS.DAY.join("|"),EEE:e.DATETIME_FORMATS.SHORTDAY.join("|"),dd:"0[1-9]|[12][0-9]|3[01]",d:w.strict?"[1-9]|[1-2][0-9]|3[01]":"0?[1-9]|[1-2][0-9]|3[01]",MMMM:e.DATETIME_FORMATS.MONTH.join("|"),MMM:e.DATETIME_FORMATS.SHORTMONTH.join("|"),MM:"0[1-9]|1[012]",M:w.strict?"[1-9]|1[012]":"0?[1-9]|1[012]",yyyy:"[1]{1}[0-9]{3}|[2]{1}[0-9]{3}",yy:"[0-9]{2}",y:w.strict?"-?(0|[1-9][0-9]{0,3})":"-?0*[0-9]{1,4}"},D={sss:i.setMilliseconds,ss:i.setSeconds,s:i.setSeconds,mm:i.setMinutes,m:i.setMinutes,HH:i.setHours,H:i.setHours,hh:i.setHours,h:i.setHours,EEEE:n,EEE:n,dd:i.setDate,d:i.setDate,a:function(e){var t=this.getHours()%12;return this.setHours(e.match(/pm/i)?t+12:t)},MMMM:function(t){return this.setMonth(o(e.DATETIME_FORMATS.MONTH,t))},MMM:function(t){return this.setMonth(o(e.DATETIME_FORMATS.SHORTMONTH,t))},MM:function(e){return this.setMonth(1*e-1)},M:function(e){return this.setMonth(1*e-1)},yyyy:i.setFullYear,yy:function(e){return this.setFullYear(2e3+1*e)},y:function(e){return 50>=1*e&&2===e.length?this.setFullYear(2e3+1*e):this.setFullYear(1*e)}};return y.init=function(){y.$format=e.DATETIME_FORMATS[w.format]||w.format,h=u(y.$format),v=m(y.$format)},y.isValid=function(e){return angular.isDate(e)?!isNaN(e.getTime()):h.test(e)},y.parse=function(n,a,o,i){o&&(o=e.DATETIME_FORMATS[o]||o),angular.isDate(n)&&(n=s(n,o||y.$format,i));var r=o?u(o):h,l=o?m(o):v,c=r.exec(n);if(!c)return!1;for(var d=a&&!isNaN(a.getTime())?(new t).fromDate(a):(new t).fromDate(new Date(1970,0,1,0)),f=0;f<c.length-1;f++)l[f]&&l[f].call(d,c[f+1]);var p=d.toDate();return parseInt(d.day,10)!==p.getDate()?!1:p},y.getDateForAttribute=function(e,t){var n;if("today"===t){var o=new Date;n=new Date(o.getFullYear(),o.getMonth(),o.getDate()+("maxDate"===e?1:0),0,0,0,"minDate"===e?0:-1)}else n=angular.isString(t)&&t.match(/^".+"$/)?new Date(t.substr(1,t.length-2)):a(t)?new Date(parseInt(t,10)):angular.isString(t)&&0===t.length?"minDate"===e?-(1/0):+(1/0):new Date(t);return n},y.getTimeForAttribute=function(e,t){var n;return n="now"===t?(new Date).setFullYear(1970,0,1):angular.isString(t)&&t.match(/^".+"$/)?new Date(t.substr(1,t.length-2)).setFullYear(1970,0,1):a(t)?new Date(parseInt(t,10)).setFullYear(1970,0,1):angular.isString(t)&&0===t.length?"minTime"===e?-(1/0):+(1/0):y.parse(t,new Date(1970,0,1,0))},y.daylightSavingAdjust=function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},y.timezoneOffsetAdjust=function(e,t,n){return e?(t&&"UTC"===t&&(e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+(n?-1:1)*e.getTimezoneOffset())),e):null},y.init(),y};return l}]}]),angular.module("mgcrea.ngStrap.helpers.dateFormatter",[]).service("$dateFormatter",["$locale","dateFilter",function(e,t){function n(e){return/(h+)([:\.])?(m+)([:\.])?(s*)[ ]?(a?)/i.exec(e).slice(1)}this.getDefaultLocale=function(){return e.id},this.getDatetimeFormat=function(t,n){return e.DATETIME_FORMATS[t]||t},this.weekdaysShort=function(t){return e.DATETIME_FORMATS.SHORTDAY},this.hoursFormat=function(e){return n(e)[0]},this.minutesFormat=function(e){return n(e)[2]},this.secondsFormat=function(e){return n(e)[4]},this.timeSeparator=function(e){return n(e)[1]},this.showSeconds=function(e){return!!n(e)[4]},this.showAM=function(e){return!!n(e)[5]},this.formatDate=function(e,n,a,o){return t(e,n,o)}}]),angular.module("mgcrea.ngStrap.core",[]).service("$bsCompiler",a),angular.module("mgcrea.ngStrap.datepicker",["mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.helpers.dateFormatter","mgcrea.ngStrap.tooltip"]).provider("$datepicker",function(){var e=this.defaults={animation:"am-fade",prefixClass:"datepicker",placement:"bottom-left",templateUrl:"datepicker/datepicker.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,useNative:!1,dateType:"date",dateFormat:"shortDate",timezone:null,modelDateFormat:null,dayFormat:"dd",monthFormat:"MMM",yearFormat:"yyyy",monthTitleFormat:"MMMM yyyy",yearTitleFormat:"yyyy",strictFormat:!1,autoclose:!1,minDate:-(1/0),maxDate:+(1/0),startView:0,minView:0,startWeek:0,daysOfWeekDisabled:"",iconLeft:"glyphicon glyphicon-chevron-left",iconRight:"glyphicon glyphicon-chevron-right"};this.$get=["$window","$document","$rootScope","$sce","$dateFormatter","datepickerViews","$tooltip","$timeout",function(t,n,a,o,i,r,s,l){function u(t,n,a){function o(e){e.selected=u.$isSelected(e.date)}function i(){t[0].focus()}var u=s(t,angular.extend({},e,a)),f=a.scope,p=u.$options,g=u.$scope;p.startView&&(p.startView-=p.minView);var m=r(u);u.$views=m.views;var $=m.viewDate;g.$mode=p.startView,g.$iconLeft=p.iconLeft,g.$iconRight=p.iconRight;var h=u.$views[g.$mode];g.$select=function(e){u.select(e)},g.$selectPane=function(e){u.$selectPane(e)},g.$toggleMode=function(){u.setMode((g.$mode+1)%u.$views.length)},u.update=function(e){angular.isDate(e)&&!isNaN(e.getTime())&&(u.$date=e,h.update.call(h,e)),u.$build(!0)},u.updateDisabledDates=function(e){p.disabledDateRanges=e;for(var t=0,n=g.rows.length;n>t;t++)angular.forEach(g.rows[t],u.$setDisabledEl)},u.select=function(e,t){angular.isDate(n.$dateValue)||(n.$dateValue=new Date(e)),!g.$mode||t?(n.$setViewValue(angular.copy(e)),n.$render(),p.autoclose&&!t&&l(function(){u.hide(!0)})):(angular.extend($,{year:e.getFullYear(),month:e.getMonth(),date:e.getDate()}),u.setMode(g.$mode-1),u.$build())},u.setMode=function(e){g.$mode=e,h=u.$views[g.$mode],u.$build()},u.$build=function(e){e===!0&&h.built||(e!==!1||h.built)&&h.build.call(h)},u.$updateSelected=function(){for(var e=0,t=g.rows.length;t>e;e++)angular.forEach(g.rows[e],o)},u.$isSelected=function(e){return h.isSelected(e)},u.$setDisabledEl=function(e){e.disabled=h.isDisabled(e.date)},u.$selectPane=function(e){var t=h.steps,n=new Date(Date.UTC($.year+(t.year||0)*e,$.month+(t.month||0)*e,1));angular.extend($,{year:n.getUTCFullYear(),month:n.getUTCMonth(),date:n.getUTCDate()}),u.$build()},u.$onMouseDown=function(e){if(e.preventDefault(),e.stopPropagation(),d){var t=angular.element(e.target);"button"!==t[0].nodeName.toLowerCase()&&(t=t.parent()),t.triggerHandler("click")}},u.$onKeyDown=function(e){if(/(38|37|39|40|13)/.test(e.keyCode)&&!e.shiftKey&&!e.altKey){if(e.preventDefault(),e.stopPropagation(),13===e.keyCode)return void(g.$mode?g.$apply(function(){u.setMode(g.$mode-1)}):u.hide(!0));h.onKeyDown(e),f.$digest()}};var v=u.init;u.init=function(){return c&&p.useNative?(t.prop("type","date"),void t.css("-webkit-appearance","textfield")):(d&&(t.prop("type","text"),t.attr("readonly","true"),t.on("click",i)),void v())};var w=u.destroy;u.destroy=function(){c&&p.useNative&&t.off("click",i),w()};var y=u.show;u.show=function(){!d&&t.attr("readonly")||t.attr("disabled")||(y(),l(function(){u.$isShown&&(u.$element.on(d?"touchstart":"mousedown",u.$onMouseDown),p.keyboard&&t.on("keydown",u.$onKeyDown))},0,!1))};var b=u.hide;return u.hide=function(e){u.$isShown&&(u.$element.off(d?"touchstart":"mousedown",u.$onMouseDown),p.keyboard&&t.off("keydown",u.$onKeyDown),b(e))},u}var c=/(ip[ao]d|iphone|android)/gi.test(t.navigator.userAgent),d="createTouch"in t.document&&c;return e.lang||(e.lang=i.getDefaultLocale()),u.defaults=e,u}]}).directive("bsDatepicker",["$window","$parse","$q","$dateFormatter","$dateParser","$datepicker",function(e,t,n,a,o,i){var r=/(ip[ao]d|iphone|android)/gi.test(e.navigator.userAgent);return{restrict:"EAC",require:"ngModel",link:function(e,t,n,s){function l(e){return e&&e.length?e:null}function u(e){if(angular.isDate(e)){var t=isNaN(p.$options.minDate)||e.getTime()>=p.$options.minDate,n=isNaN(p.$options.maxDate)||e.getTime()<=p.$options.maxDate,a=t&&n;s.$setValidity("date",a),s.$setValidity("min",t),s.$setValidity("max",n),a&&(s.$dateValue=e)}}function c(){return!s.$dateValue||isNaN(s.$dateValue.getTime())?"":m(s.$dateValue,d.dateFormat)}var d={scope:e};angular.forEach(["template","templateUrl","controller","controllerAs","placement","container","delay","trigger","html","animation","autoclose","dateType","dateFormat","timezone","modelDateFormat","dayFormat","strictFormat","startWeek","startDate","useNative","lang","startView","minView","iconLeft","iconRight","daysOfWeekDisabled","id","prefixClass","prefixEvent"],function(e){angular.isDefined(n[e])&&(d[e]=n[e])});var f=/^(false|0|)$/i;angular.forEach(["html","container","autoclose","useNative"],function(e){angular.isDefined(n[e])&&f.test(n[e])&&(d[e]=!1)});var p=i(t,s,d);d=p.$options,r&&d.useNative&&(d.dateFormat="yyyy-MM-dd");var g=d.lang,m=function(e,t){return a.formatDate(e,t,g)},$=o({format:d.dateFormat,lang:g,strict:d.strictFormat});n.bsShow&&e.$watch(n.bsShow,function(e,t){p&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(/true|,?(datepicker),?/i)),e===!0?p.show():p.hide())}),angular.forEach(["minDate","maxDate"],function(e){angular.isDefined(n[e])&&n.$observe(e,function(t){p.$options[e]=$.getDateForAttribute(e,t),isNaN(p.$options[e])||p.$build(!1),u(s.$dateValue)})}),angular.isDefined(n.dateFormat)&&n.$observe("dateFormat",function(e){p.$options.dateFormat=e}),e.$watch(n.ngModel,function(e,t){p.update(s.$dateValue)},!0),angular.isDefined(n.disabledDates)&&e.$watch(n.disabledDates,function(e,t){e=l(e),t=l(t),e&&p.updateDisabledDates(e)}),s.$parsers.unshift(function(e){var t;if(!e)return s.$setValidity("date",!0),null;var n=$.parse(e,s.$dateValue);return!n||isNaN(n.getTime())?void s.$setValidity("date",!1):(u(n),"string"===d.dateType?(t=$.timezoneOffsetAdjust(n,d.timezone,!0),m(t,d.modelDateFormat||d.dateFormat)):(t=$.timezoneOffsetAdjust(s.$dateValue,d.timezone,!0),"number"===d.dateType?t.getTime():"unix"===d.dateType?t.getTime()/1e3:"iso"===d.dateType?t.toISOString():new Date(t)))}),s.$formatters.push(function(e){var t;return t=angular.isUndefined(e)||null===e?NaN:angular.isDate(e)?e:"string"===d.dateType?$.parse(e,null,d.modelDateFormat):"unix"===d.dateType?new Date(1e3*e):new Date(e),s.$dateValue=$.timezoneOffsetAdjust(t,d.timezone),c()}),s.$render=function(){t.val(c())},e.$on("$destroy",function(){p&&p.destroy(),d=null,p=null})}}}]).provider("datepickerViews",function(){function e(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n}function t(e,t){return(e%t+t)%t}this.$get=["$dateFormatter","$dateParser","$sce",function(n,a,o){return function(i){var r=i.$scope,s=i.$options,l=s.lang,u=function(e,t){return n.formatDate(e,t,l)},c=a({format:s.dateFormat,lang:l,strict:s.strictFormat}),d=n.weekdaysShort(l),f=d.slice(s.startWeek).concat(d.slice(0,s.startWeek)),p=o.trustAsHtml('<th class="dow text-center">'+f.join('</th><th class="dow text-center">')+"</th>"),g=i.$date||(s.startDate?c.getDateForAttribute("startDate",s.startDate):new Date),m={year:g.getFullYear(),month:g.getMonth(),date:g.getDate()},$=[{format:s.dayFormat,split:7,steps:{month:1},update:function(e,t){!this.built||t||e.getFullYear()!==m.year||e.getMonth()!==m.month?(angular.extend(m,{year:i.$date.getFullYear(),month:i.$date.getMonth(),date:i.$date.getDate()}),i.$build()):e.getDate()===m.date&&1!==e.getDate()||(m.date=i.$date.getDate(),i.$updateSelected())},build:function(){var n=new Date(m.year,m.month,1),a=n.getTimezoneOffset(),o=new Date(+n-864e5*t(n.getDay()-s.startWeek,7)),l=o.getTimezoneOffset(),d=c.timezoneOffsetAdjust(new Date,s.timezone).toDateString();l!==a&&(o=new Date(+o+6e4*(l-a)));for(var f,g=[],$=0;42>$;$++)f=c.daylightSavingAdjust(new Date(o.getFullYear(),o.getMonth(),o.getDate()+$)),g.push({date:f,isToday:f.toDateString()===d,label:u(f,this.format),selected:i.$date&&this.isSelected(f),muted:f.getMonth()!==m.month,disabled:this.isDisabled(f)});r.title=u(n,s.monthTitleFormat),r.showLabels=!0,r.labels=p,r.rows=e(g,this.split),this.built=!0},isSelected:function(e){return i.$date&&e.getFullYear()===i.$date.getFullYear()&&e.getMonth()===i.$date.getMonth()&&e.getDate()===i.$date.getDate();
},isDisabled:function(e){var t=e.getTime();if(t<s.minDate||t>s.maxDate)return!0;if(-1!==s.daysOfWeekDisabled.indexOf(e.getDay()))return!0;if(s.disabledDateRanges)for(var n=0;n<s.disabledDateRanges.length;n++)if(t>=s.disabledDateRanges[n].start&&t<=s.disabledDateRanges[n].end)return!0;return!1},onKeyDown:function(e){if(i.$date){var t,n=i.$date.getTime();37===e.keyCode?t=new Date(n-864e5):38===e.keyCode?t=new Date(n-6048e5):39===e.keyCode?t=new Date(n+864e5):40===e.keyCode&&(t=new Date(n+6048e5)),this.isDisabled(t)||i.select(t,!0)}}},{name:"month",format:s.monthFormat,split:4,steps:{year:1},update:function(e,t){this.built&&e.getFullYear()===m.year?e.getMonth()!==m.month&&(angular.extend(m,{month:i.$date.getMonth(),date:i.$date.getDate()}),i.$updateSelected()):(angular.extend(m,{year:i.$date.getFullYear(),month:i.$date.getMonth(),date:i.$date.getDate()}),i.$build())},build:function(){for(var t,n=[],a=0;12>a;a++)t=new Date(m.year,a,1),n.push({date:t,label:u(t,this.format),selected:i.$isSelected(t),disabled:this.isDisabled(t)});r.title=u(t,s.yearTitleFormat),r.showLabels=!1,r.rows=e(n,this.split),this.built=!0},isSelected:function(e){return i.$date&&e.getFullYear()===i.$date.getFullYear()&&e.getMonth()===i.$date.getMonth()},isDisabled:function(e){var t=+new Date(e.getFullYear(),e.getMonth()+1,0);return t<s.minDate||e.getTime()>s.maxDate},onKeyDown:function(e){if(i.$date){var t=i.$date.getMonth(),n=new Date(i.$date);37===e.keyCode?n.setMonth(t-1):38===e.keyCode?n.setMonth(t-4):39===e.keyCode?n.setMonth(t+1):40===e.keyCode&&n.setMonth(t+4),this.isDisabled(n)||i.select(n,!0)}}},{name:"year",format:s.yearFormat,split:4,steps:{year:12},update:function(e,t){!this.built||t||parseInt(e.getFullYear()/20,10)!==parseInt(m.year/20,10)?(angular.extend(m,{year:i.$date.getFullYear(),month:i.$date.getMonth(),date:i.$date.getDate()}),i.$build()):e.getFullYear()!==m.year&&(angular.extend(m,{year:i.$date.getFullYear(),month:i.$date.getMonth(),date:i.$date.getDate()}),i.$updateSelected())},build:function(){for(var t,n=m.year-m.year%(3*this.split),a=[],o=0;12>o;o++)t=new Date(n+o,0,1),a.push({date:t,label:u(t,this.format),selected:i.$isSelected(t),disabled:this.isDisabled(t)});r.title=a[0].label+"-"+a[a.length-1].label,r.showLabels=!1,r.rows=e(a,this.split),this.built=!0},isSelected:function(e){return i.$date&&e.getFullYear()===i.$date.getFullYear()},isDisabled:function(e){var t=+new Date(e.getFullYear()+1,0,0);return t<s.minDate||e.getTime()>s.maxDate},onKeyDown:function(e){if(i.$date){var t=i.$date.getFullYear(),n=new Date(i.$date);37===e.keyCode?n.setYear(t-1):38===e.keyCode?n.setYear(t-4):39===e.keyCode?n.setYear(t+1):40===e.keyCode&&n.setYear(t+4),this.isDisabled(n)||i.select(n,!0)}}}];return{views:s.minView?Array.prototype.slice.call($,s.minView):$,viewDate:m}}}]}),angular.module("mgcrea.ngStrap.collapse",[]).provider("$collapse",function(){var e=this.defaults={animation:"am-collapse",disallowToggle:!1,activeClass:"in",startCollapsed:!1,allowMultiple:!1},t=this.controller=function(t,n,a){function o(e){for(var t=l.$targets.$active,n=0;n<t.length;n++)e<t[n]&&(t[n]=t[n]-1),t[n]===l.$targets.length&&(t[n]=l.$targets.length-1)}function i(e){var t=l.$targets.$active;return-1!==t.indexOf(e)}function r(e){var t=l.$targets.$active.indexOf(e);-1!==t&&l.$targets.$active.splice(t,1)}function s(e){l.$options.allowMultiple||l.$targets.$active.splice(0,1),-1===l.$targets.$active.indexOf(e)&&l.$targets.$active.push(e)}var l=this;l.$options=angular.copy(e),angular.forEach(["animation","disallowToggle","activeClass","startCollapsed","allowMultiple"],function(e){angular.isDefined(a[e])&&(l.$options[e]=a[e])});var u=/^(false|0|)$/i;angular.forEach(["disallowToggle","startCollapsed","allowMultiple"],function(e){angular.isDefined(a[e])&&u.test(a[e])&&(l.$options[e]=!1)}),l.$toggles=[],l.$targets=[],l.$viewChangeListeners=[],l.$registerToggle=function(e){l.$toggles.push(e)},l.$registerTarget=function(e){l.$targets.push(e)},l.$unregisterToggle=function(e){var t=l.$toggles.indexOf(e);l.$toggles.splice(t,1)},l.$unregisterTarget=function(e){var t=l.$targets.indexOf(e);l.$targets.splice(t,1),l.$options.allowMultiple&&r(e),o(t),l.$viewChangeListeners.forEach(function(e){e()})},l.$targets.$active=l.$options.startCollapsed?[]:[0],l.$setActive=t.$setActive=function(e){angular.isArray(e)?l.$targets.$active=e:!l.$options.disallowToggle&&i(e)?r(e):s(e),l.$viewChangeListeners.forEach(function(e){e()})},l.$activeIndexes=function(){return l.$options.allowMultiple?l.$targets.$active:1===l.$targets.$active.length?l.$targets.$active[0]:-1}};this.$get=function(){var n={};return n.defaults=e,n.controller=t,n}}).directive("bsCollapse",["$window","$animate","$collapse",function(e,t,n){return{require:["?ngModel","bsCollapse"],controller:["$scope","$element","$attrs",n.controller],link:function(e,t,n,a){var o=a[0],i=a[1];o&&(i.$viewChangeListeners.push(function(){o.$setViewValue(i.$activeIndexes())}),o.$formatters.push(function(e){if(angular.isArray(e))i.$setActive(e);else{var t=i.$activeIndexes();angular.isArray(t)?-1===t.indexOf(1*e)&&i.$setActive(1*e):t!==1*e&&i.$setActive(1*e)}return e}))}}}]).directive("bsCollapseToggle",function(){return{require:["^?ngModel","^bsCollapse"],link:function(e,t,n,a){var o=a[1];t.attr("data-toggle","collapse"),o.$registerToggle(t),e.$on("$destroy",function(){o.$unregisterToggle(t)}),t.on("click",function(){if(!n.disabled){var a=n.bsCollapseToggle&&"bs-collapse-toggle"!==n.bsCollapseToggle?n.bsCollapseToggle:o.$toggles.indexOf(t);o.$setActive(1*a),e.$apply()}})}}}).directive("bsCollapseTarget",["$animate",function(e){return{require:["^?ngModel","^bsCollapse"],link:function(t,n,a,o){function i(){var t=r.$targets.indexOf(n),a=r.$activeIndexes(),o="removeClass";angular.isArray(a)?-1!==a.indexOf(t)&&(o="addClass"):t===a&&(o="addClass"),e[o](n,r.$options.activeClass)}var r=o[1];n.addClass("collapse"),r.$options.animation&&n.addClass(r.$options.animation),r.$registerTarget(n),t.$on("$destroy",function(){r.$unregisterTarget(n)}),r.$viewChangeListeners.push(function(){i()}),i()}}}]),angular.module("mgcrea.ngStrap.button",[]).provider("$button",function(){var e=this.defaults={activeClass:"active",toggleEvent:"click"};this.$get=function(){return{defaults:e}}}).directive("bsCheckboxGroup",function(){return{restrict:"A",require:"ngModel",compile:function(e,t){e.attr("data-toggle","buttons"),e.removeAttr("ng-model");var n=e[0].querySelectorAll('input[type="checkbox"]');angular.forEach(n,function(e){var n=angular.element(e);n.attr("bs-checkbox",""),n.attr("ng-model",t.ngModel+"."+n.attr("value"))})}}}).directive("bsCheckbox",["$button","$$rAF",function(e,t){var n=e.defaults,a=/^(true|false|\d+)$/;return{restrict:"A",require:"ngModel",link:function(e,o,i,r){var s=n,l="INPUT"===o[0].nodeName,u=l?o.parent():o,c=angular.isDefined(i.trueValue)?i.trueValue:!0;a.test(i.trueValue)&&(c=e.$eval(i.trueValue));var d=angular.isDefined(i.falseValue)?i.falseValue:!1;a.test(i.falseValue)&&(d=e.$eval(i.falseValue));var f="boolean"!=typeof c||"boolean"!=typeof d;f&&(r.$parsers.push(function(e){return e?c:d}),r.$formatters.push(function(e){return angular.equals(e,c)}),e.$watch(i.ngModel,function(e,t){r.$render()})),r.$render=function(){var e=angular.equals(r.$modelValue,c);t(function(){l&&(o[0].checked=e),u.toggleClass(s.activeClass,e)})},o.bind(s.toggleEvent,function(){e.$apply(function(){l||r.$setViewValue(!u.hasClass("active")),f||r.$render()})})}}}]).directive("bsRadioGroup",function(){return{restrict:"A",require:"ngModel",compile:function(e,t){e.attr("data-toggle","buttons"),e.removeAttr("ng-model");var n=e[0].querySelectorAll('input[type="radio"]');angular.forEach(n,function(e){angular.element(e).attr("bs-radio",""),angular.element(e).attr("ng-model",t.ngModel)})}}}).directive("bsRadio",["$button","$$rAF",function(e,t){var n=e.defaults,a=/^(true|false|\d+)$/;return{restrict:"A",require:"ngModel",link:function(e,o,i,r){var s,l=n,u="INPUT"===o[0].nodeName,c=u?o.parent():o;i.$observe("value",function(t){s="boolean"!=typeof t&&a.test(t)?e.$eval(t):t,r.$render()}),r.$render=function(){var e=angular.equals(r.$modelValue,s);t(function(){u&&(o[0].checked=e),c.toggleClass(l.activeClass,e)})},o.bind(l.toggleEvent,function(){e.$apply(function(){r.$setViewValue(s),r.$render()})})}}}]),angular.module("mgcrea.ngStrap.alert",["mgcrea.ngStrap.modal"]).provider("$alert",function(){var e=this.defaults={animation:"am-fade",prefixClass:"alert",prefixEvent:"alert",placement:null,templateUrl:"alert/alert.tpl.html",container:!1,element:null,backdrop:!1,keyboard:!0,show:!0,duration:!1,type:!1,dismissable:!0};this.$get=["$modal","$timeout",function(t,n){function a(a){var o={},i=angular.extend({},e,a);o=t(i),o.$scope.dismissable=!!i.dismissable,i.type&&(o.$scope.type=i.type);var r=o.show;return i.duration&&(o.show=function(){r(),n(function(){o.hide()},1e3*i.duration)}),o}return a}]}).directive("bsAlert",["$window","$sce","$alert",function(e,t,n){return{restrict:"EAC",scope:!0,link:function(e,a,o,i){var r={scope:e,element:a,show:!1};angular.forEach(["template","templateUrl","controller","controllerAs","placement","keyboard","html","container","animation","duration","dismissable"],function(e){angular.isDefined(o[e])&&(r[e]=o[e])});var s=/^(false|0|)$/i;angular.forEach(["keyboard","html","container","dismissable"],function(e){angular.isDefined(o[e])&&s.test(o[e])&&(r[e]=!1)}),e.hasOwnProperty("title")||(e.title=""),angular.forEach(["title","content","type"],function(n){o[n]&&o.$observe(n,function(a,o){e[n]=t.trustAsHtml(a)})}),o.bsAlert&&e.$watch(o.bsAlert,function(t,n){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var l=n(r);a.on(o.trigger||"click",l.toggle),e.$on("$destroy",function(){l&&l.destroy(),r=null,l=null})}}}]),angular.module("mgcrea.ngStrap.aside",["mgcrea.ngStrap.modal"]).provider("$aside",function(){var e=this.defaults={animation:"am-fade-and-slide-right",prefixClass:"aside",prefixEvent:"aside",placement:"right",templateUrl:"aside/aside.tpl.html",contentTemplate:!1,container:!1,element:null,backdrop:!0,keyboard:!0,html:!1,show:!0};this.$get=["$modal",function(t){function n(n){var a={},o=angular.extend({},e,n);return a=t(o)}return n}]}).directive("bsAside",["$window","$sce","$aside",function(e,t,n){return{restrict:"EAC",scope:!0,link:function(e,a,o,i){var r={scope:e,element:a,show:!1};angular.forEach(["template","templateUrl","controller","controllerAs","contentTemplate","placement","backdrop","keyboard","html","container","animation"],function(e){angular.isDefined(o[e])&&(r[e]=o[e])});var s=/^(false|0|)$/i;angular.forEach(["backdrop","keyboard","html","container"],function(e){angular.isDefined(o[e])&&s.test(o[e])&&(r[e]=!1)}),angular.forEach(["title","content"],function(n){o[n]&&o.$observe(n,function(a,o){e[n]=t.trustAsHtml(a)})}),o.bsAside&&e.$watch(o.bsAside,function(t,n){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var l=n(r);a.on(o.trigger||"click",l.toggle),e.$on("$destroy",function(){l&&l.destroy(),r=null,l=null})}}}]),angular.module("mgcrea.ngStrap.affix",["mgcrea.ngStrap.helpers.dimensions","mgcrea.ngStrap.helpers.debounce"]).provider("$affix",function(){var e=this.defaults={offsetTop:"auto",inlineStyles:!0};this.$get=["$window","debounce","dimensions",function(t,n,a){function o(o,s){function l(e,t,n){var a=u(),o=c();return v>=a?"top":null!==e&&a+e<=t.top?"middle":null!==w&&t.top+n+$>=o-w?"bottom":"middle"}function u(){return p[0]===t?t.pageYOffset:p[0].scrollTop}function c(){return p[0]===t?t.document.body.scrollHeight:p[0].scrollHeight}var d={},f=angular.extend({},e,s),p=f.target,g="affix affix-top affix-bottom",m=!1,$=0,h=0,v=0,w=0,y=null,b=null,D=o.parent();if(f.offsetParent)if(f.offsetParent.match(/^\d+$/))for(var k=0;k<1*f.offsetParent-1;k++)D=D.parent();else D=angular.element(f.offsetParent);return d.init=function(){this.$parseOffsets(),h=a.offset(o[0]).top+$,m=!o[0].style.width,p.on("scroll",this.checkPosition),p.on("click",this.checkPositionWithEventLoop),r.on("resize",this.$debouncedOnResize),this.checkPosition(),this.checkPositionWithEventLoop()},d.destroy=function(){p.off("scroll",this.checkPosition),p.off("click",this.checkPositionWithEventLoop),r.off("resize",this.$debouncedOnResize)},d.checkPositionWithEventLoop=function(){setTimeout(d.checkPosition,1)},d.checkPosition=function(){var e=u(),t=a.offset(o[0]),n=a.height(o[0]),r=l(b,t,n);y!==r&&(y=r,"top"===r?(b=null,m&&o.css("width",""),f.inlineStyles&&(o.css("position",f.offsetParent?"":"relative"),o.css("top",""))):"bottom"===r?(b=f.offsetUnpin?-(1*f.offsetUnpin):t.top-e,m&&o.css("width",""),f.inlineStyles&&(o.css("position",f.offsetParent?"":"relative"),o.css("top",f.offsetParent?"":i[0].offsetHeight-w-n-h+"px"))):(b=null,m&&o.css("width",o[0].offsetWidth+"px"),f.inlineStyles&&(o.css("position","fixed"),o.css("top",$+"px"))),o.removeClass(g).addClass("affix"+("middle"!==r?"-"+r:"")))},d.$onResize=function(){d.$parseOffsets(),d.checkPosition()},d.$debouncedOnResize=n(d.$onResize,50),d.$parseOffsets=function(){var e=o.css("position");f.inlineStyles&&o.css("position",f.offsetParent?"":"relative"),f.offsetTop&&("auto"===f.offsetTop&&(f.offsetTop="+0"),f.offsetTop.match(/^[-+]\d+$/)?($=1*-f.offsetTop,v=f.offsetParent?a.offset(D[0]).top+1*f.offsetTop:a.offset(o[0]).top-a.css(o[0],"marginTop",!0)+1*f.offsetTop):v=1*f.offsetTop),f.offsetBottom&&(w=f.offsetParent&&f.offsetBottom.match(/^[-+]\d+$/)?c()-(a.offset(D[0]).top+a.height(D[0]))+1*f.offsetBottom+1:1*f.offsetBottom),f.inlineStyles&&o.css("position",e)},d.init(),d}var i=angular.element(t.document.body),r=angular.element(t);return o}]}).directive("bsAffix",["$affix","$window",function(e,t){return{restrict:"EAC",require:"^?bsAffixTarget",link:function(n,a,o,i){var r={scope:n,target:i?i.$element:angular.element(t)};angular.forEach(["offsetTop","offsetBottom","offsetParent","offsetUnpin","inlineStyles"],function(e){if(angular.isDefined(o[e])){var t=o[e];/true/i.test(t)&&(t=!0),/false/i.test(t)&&(t=!1),r[e]=t}});var s=e(a,r);n.$on("$destroy",function(){s&&s.destroy(),r=null,s=null})}}}]).directive("bsAffixTarget",function(){return{controller:["$element",function(e){this.$element=e}]}}),angular.module("mgcrea.ngStrap",["mgcrea.ngStrap.modal","mgcrea.ngStrap.aside","mgcrea.ngStrap.alert","mgcrea.ngStrap.button","mgcrea.ngStrap.select","mgcrea.ngStrap.datepicker","mgcrea.ngStrap.timepicker","mgcrea.ngStrap.navbar","mgcrea.ngStrap.tooltip","mgcrea.ngStrap.popover","mgcrea.ngStrap.dropdown","mgcrea.ngStrap.typeahead","mgcrea.ngStrap.scrollspy","mgcrea.ngStrap.affix","mgcrea.ngStrap.tab","mgcrea.ngStrap.collapse"])}(window,document);
!function(t,e,n){"use strict";angular.module("mgcrea.ngStrap.aside").run(["$templateCache",function(t){t.put("aside/aside.tpl.html",'<div class="aside" tabindex="-1" role="dialog"><div class="aside-dialog"><div class="aside-content"><div class="aside-header" ng-show="title"><button type="button" class="close" ng-click="$hide()">&times;</button><h4 class="aside-title" ng-bind="title"></h4></div><div class="aside-body" ng-bind="content"></div><div class="aside-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>')}]),angular.module("mgcrea.ngStrap.alert").run(["$templateCache",function(t){t.put("alert/alert.tpl.html",'<div class="alert" ng-class="[type ? \'alert-\' + type : null]"><button type="button" class="close" ng-if="dismissable" ng-click="$hide()">&times;</button> <strong ng-bind="title"></strong>&nbsp;<span ng-bind-html="content"></span></div>')}]),angular.module("mgcrea.ngStrap.datepicker").run(["$templateCache",function(t){t.put("datepicker/datepicker.tpl.html",'<div class="dropdown-menu datepicker" ng-class="\'datepicker-mode-\' + $mode" style="max-width: 320px"><table style="table-layout: fixed; height: 100%; width: 100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$selectPane(-1)"><i class="{{$iconLeft}}"></i></button></th><th colspan="{{ rows[0].length - 2 }}"><button tabindex="-1" type="button" class="btn btn-default btn-block text-strong" ng-click="$toggleMode()"><strong style="text-transform: capitalize" ng-bind="title"></strong></button></th><th><button tabindex="-1" type="button" class="btn btn-default pull-right" ng-click="$selectPane(+1)"><i class="{{$iconRight}}"></i></button></th></tr><tr ng-if="showLabels" ng-bind-html="labels"></tr></thead><tbody><tr ng-repeat="(i, row) in rows" height="{{ 100 / rows.length }}%"><td class="text-center" ng-repeat="(j, el) in row"><button tabindex="-1" type="button" class="btn btn-default" style="width: 100%" ng-class="{\'btn-primary\': el.selected, \'btn-info btn-today\': el.isToday && !el.selected}" ng-click="$select(el.date)" ng-disabled="el.disabled"><span ng-class="{\'text-muted\': el.muted}" ng-bind="el.label"></span></button></td></tr></tbody></table></div>')}]),angular.module("mgcrea.ngStrap.modal").run(["$templateCache",function(t){t.put("modal/modal.tpl.html",'<div class="modal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog"><div class="modal-content"><div class="modal-header" ng-show="title"><button type="button" class="close" aria-label="Close" ng-click="$hide()"><span aria-hidden="true">&times;</span></button><h4 class="modal-title" ng-bind="title"></h4></div><div class="modal-body" ng-bind="content"></div><div class="modal-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>')}]),angular.module("mgcrea.ngStrap.dropdown").run(["$templateCache",function(t){t.put("dropdown/dropdown.tpl.html",'<ul tabindex="-1" class="dropdown-menu" role="menu" ng-show="content && content.length"><li role="presentation" ng-class="{divider: item.divider, active: item.active}" ng-repeat="item in content"><a role="menuitem" tabindex="-1" ng-href="{{item.href}}" ng-if="!item.divider && item.href" target="{{item.target || \'\'}}" ng-bind="item.text"></a> <a role="menuitem" tabindex="-1" href="javascript:void(0)" ng-if="!item.divider && item.click" ng-click="$eval(item.click);$hide()" ng-bind="item.text"></a></li></ul>')}]),angular.module("mgcrea.ngStrap.popover").run(["$templateCache",function(t){t.put("popover/popover.tpl.html",'<div class="popover" tabindex="-1"><div class="arrow"></div><h3 class="popover-title" ng-bind="title" ng-show="title"></h3><div class="popover-content" ng-bind="content"></div></div>')}]),angular.module("mgcrea.ngStrap.select").run(["$templateCache",function(t){t.put("select/select.tpl.html",'<ul tabindex="-1" class="select dropdown-menu" ng-show="$isVisible()" role="select"><li ng-if="$showAllNoneButtons"><div class="btn-group" style="margin-bottom: 5px; margin-left: 5px"><button type="button" class="btn btn-default btn-xs" ng-click="$selectAll()">{{$allText}}</button> <button type="button" class="btn btn-default btn-xs" ng-click="$selectNone()">{{$noneText}}</button></div></li><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $isActive($index)}"><a style="cursor: default" role="menuitem" tabindex="-1" ng-click="$select($index, $event)"><i class="{{$iconCheckmark}} pull-right" ng-if="$isMultiple && $isActive($index)"></i> <span ng-bind="match.label"></span></a></li></ul>')}]),angular.module("mgcrea.ngStrap.tab").run(["$templateCache",function(t){t.put("tab/tab.tpl.html",'<ul class="nav" ng-class="$navClass" role="tablist"><li role="presentation" ng-repeat="$pane in $panes track by $index" ng-class="[ $isActive($pane, $index) ? $activeClass : \'\', $pane.disabled ? \'disabled\' : \'\' ]"><a role="tab" data-toggle="tab" ng-click="!$pane.disabled && $setActive($pane.name || $index)" data-index="{{ $index }}" ng-bind-html="$pane.title" aria-controls="$pane.title"></a></li></ul><div ng-transclude class="tab-content"></div>')}]),angular.module("mgcrea.ngStrap.timepicker").run(["$templateCache",function(t){t.put("timepicker/timepicker.tpl.html",'<div class="dropdown-menu timepicker" style="min-width: 0px;width: auto"><table height="100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 0)"><i class="{{ $iconUp }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 1)"><i class="{{ $iconUp }}"></i></button></th><th ng-if="showSeconds">&nbsp;</th><th ng-if="showSeconds"><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 2)"><i class="{{ $iconUp }}"></i></button></th></tr></thead><tbody><tr ng-repeat="(i, row) in rows"><td class="text-center"><button tabindex="-1" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[0].selected}" ng-click="$select(row[0].date, 0)" ng-disabled="row[0].disabled"><span ng-class="{\'text-muted\': row[0].muted}" ng-bind="row[0].label"></span></button></td><td><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td><td class="text-center"><button tabindex="-1" ng-if="row[1].date" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[1].selected}" ng-click="$select(row[1].date, 1)" ng-disabled="row[1].disabled"><span ng-class="{\'text-muted\': row[1].muted}" ng-bind="row[1].label"></span></button></td><td ng-if="showSeconds"><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td><td ng-if="showSeconds" class="text-center"><button tabindex="-1" ng-if="row[2].date" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[2].selected}" ng-click="$select(row[2].date, 2)" ng-disabled="row[2].disabled"><span ng-class="{\'text-muted\': row[2].muted}" ng-bind="row[2].label"></span></button></td><td ng-if="showAM">&nbsp;</td><td ng-if="showAM"><button tabindex="-1" ng-show="i == midIndex - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !!isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">AM</button> <button tabindex="-1" ng-show="i == midIndex + 1 - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">PM</button></td></tr></tbody><tfoot><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 0)"><i class="{{ $iconDown }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 1)"><i class="{{ $iconDown }}"></i></button></th><th ng-if="showSeconds">&nbsp;</th><th ng-if="showSeconds"><button ng-if="showSeconds" tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 2)"><i class="{{ $iconDown }}"></i></button></th></tr></tfoot></table></div>')}]),angular.module("mgcrea.ngStrap.typeahead").run(["$templateCache",function(t){t.put("typeahead/typeahead.tpl.html",'<ul tabindex="-1" class="typeahead dropdown-menu" ng-show="$isVisible()" role="select"><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $index == $activeIndex}"><a role="menuitem" tabindex="-1" ng-click="$select($index, $event)" ng-bind="match.label"></a></li></ul>')}]),angular.module("mgcrea.ngStrap.tooltip").run(["$templateCache",function(t){t.put("tooltip/tooltip.tpl.html",'<div class="tooltip in" ng-show="title"><div class="tooltip-arrow"></div><div class="tooltip-inner" ng-bind="title"></div></div>')}])}(window,document);
"use strict";angular.module("google.places",[]).factory("googlePlacesApi",["$window",function(e){if(!e.google)throw"Global `google` var missing. Did you forget to include the places API script?";return e.google}]).directive("gPlacesAutocomplete",["$parse","$compile","$timeout","$document","googlePlacesApi",function(e,t,n,i,c){return{restrict:"A",require:"^ngModel",scope:{model:"=ngModel",options:"=?",forceSelection:"=?",customPlaces:"=?"},controller:["$scope",function(e){}],link:function(e,o,s,r){function l(){o.bind("keydown",p),o.bind("blur",d),o.bind("submit",d),e.$watch("selected",f)}function a(){var n,c=angular.element("<div g-places-autocomplete-drawer></div>"),o=angular.element(i[0].body);c.attr({input:"input",query:"query",predictions:"predictions",active:"active",selected:"selected"}),n=t(c)(e),o.append(n)}function u(){r.$parsers.push(g),r.$formatters.push(h),r.$render=m}function p(t){0!==e.predictions.length&&-1!==_(O,t.which)&&(t.preventDefault(),t.which===x.down?(e.active=(e.active+1)%e.predictions.length,e.$digest()):t.which===x.up?(e.active=(e.active?e.active:e.predictions.length)-1,e.$digest()):13===t.which||9===t.which?(e.forceSelection&&(e.active=-1===e.active?0:e.active),e.$apply(function(){e.selected=e.active,-1===e.selected&&v()})):27===t.which&&e.$apply(function(){t.stopPropagation(),v()}))}function d(t){0!==e.predictions.length&&(e.forceSelection&&(e.selected=-1===e.selected?0:e.selected),e.$digest(),e.$apply(function(){-1===e.selected&&v()}))}function f(){var t;t=e.predictions[e.selected],t&&(t.is_custom?e.$apply(function(){e.model=t.place,e.$emit("g-places-autocomplete:select",t.place),n(function(){r.$viewChangeListeners.forEach(function(e){e()})})}):q.getDetails({placeId:t.place_id},function(t,i){i==c.maps.places.PlacesServiceStatus.OK&&e.$apply(function(){e.model=t,e.$emit("g-places-autocomplete:select",t),n(function(){r.$viewChangeListeners.forEach(function(e){e()})})})}),v())}function g(t){var n;return t&&y(t)?(e.query=t,n=angular.extend({input:t},e.options),S.getPlacePredictions(n,function(t,n){e.$apply(function(){var i;v(),e.customPlaces&&(i=b(e.query),e.predictions.push.apply(e.predictions,i)),n==c.maps.places.PlacesServiceStatus.OK&&e.predictions.push.apply(e.predictions,t),e.predictions.length>5&&(e.predictions.length=5)})}),e.forceSelection?r.$modelValue:t):t}function h(e){var t="";return y(e)?t=e:w(e)&&(t=e.formatted_address),t}function m(){return o.val(r.$viewValue)}function v(){e.active=-1,e.selected=-1,e.predictions=[]}function b(t){var n,i,c,o=[];for(c=0;c<e.customPlaces.length;c++)n=e.customPlaces[c],i=$(t,n),i.matched_substrings.length>0&&o.push({is_custom:!0,custom_prediction_label:n.custom_prediction_label||"(Custom Non-Google Result)",description:n.formatted_address,place:n,matched_substrings:i.matched_substrings,terms:i.terms});return o}function $(e,t){var n,i,c,o=e+"",s=[],r=[];for(i=t.formatted_address.split(","),c=0;c<i.length;c++)n=i[c].trim(),o.length>0&&(n.length>=o.length?(P(n,o)&&r.push({length:o.length,offset:c}),o=""):P(o,n)?(r.push({length:n.length,offset:c}),o=o.replace(n,"").trim()):o=""),s.push({value:n,offset:t.formatted_address.indexOf(n)});return{matched_substrings:r,terms:s}}function y(e){return"[object String]"==Object.prototype.toString.call(e)}function w(e){return"[object Object]"==Object.prototype.toString.call(e)}function _(e,t){var n,i;if(null==e)return-1;for(i=e.length,n=0;i>n;n++)if(e[n]===t)return n;return-1}function P(e,t){return 0===A(e).lastIndexOf(A(t),0)}function A(e){return null==e?"":e.toLowerCase()}var x={tab:9,enter:13,esc:27,up:38,down:40},O=[x.tab,x.enter,x.esc,x.up,x.down],S=new c.maps.places.AutocompleteService,q=new c.maps.places.PlacesService(o[0]);!function(){e.query="",e.predictions=[],e.input=o,e.options=e.options||{},a(),l(),u()}()}}}]).directive("gPlacesAutocompleteDrawer",["$window","$document",function(e,t){var n=['<div class="pac-container" ng-if="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\', width: position.width+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">','  <div class="pac-item" g-places-autocomplete-prediction index="$index" prediction="prediction" query="query"','       ng-repeat="prediction in predictions track by $index" ng-class="{\'pac-item-selected\': isActive($index) }"','       ng-mouseenter="selectActive($index)" ng-click="selectPrediction($index)" role="option" id="{{prediction.id}}">',"  </div>","</div>"];return{restrict:"A",scope:{input:"=",query:"=",predictions:"=",active:"=",selected:"="},template:n.join(""),link:function(n,i){function c(n){var i=n[0],c=i.getBoundingClientRect(),o=t[0].documentElement,s=t[0].body,r=e.pageYOffset||o.scrollTop||s.scrollTop,l=e.pageXOffset||o.scrollLeft||s.scrollLeft;return{width:c.width,height:c.height,top:c.top+c.height+r,left:c.left+l}}i.bind("mousedown",function(e){e.preventDefault()}),e.onresize=function(){n.$apply(function(){n.position=c(n.input)})},n.isOpen=function(){return n.predictions.length>0},n.isActive=function(e){return n.active===e},n.selectActive=function(e){n.active=e},n.selectPrediction=function(e){n.selected=e},n.$watch("predictions",function(){n.position=c(n.input)},!0)}}}]).directive("gPlacesAutocompletePrediction",[function(){var e=['<span class="pac-icon pac-icon-marker"></span>','<span class="pac-item-query" ng-bind-html="prediction | highlightMatched"></span>','<span ng-repeat="term in prediction.terms | unmatchedTermsOnly:prediction">{{term.value | trailingComma:!$last}}&nbsp;</span>','<span class="custom-prediction-label" ng-if="prediction.is_custom">&nbsp;{{prediction.custom_prediction_label}}</span>'];return{restrict:"A",scope:{index:"=",prediction:"=",query:"="},template:e.join("")}}]).filter("highlightMatched",["$sce",function(e){return function(t){var n,i="",c="";return t.matched_substrings.length>0&&t.terms.length>0&&(n=t.matched_substrings[0],i=t.terms[0].value.substr(n.offset,n.length),c=t.terms[0].value.substr(n.offset+n.length)),e.trustAsHtml('<span class="pac-matched">'+i+"</span>"+c)}}]).filter("unmatchedTermsOnly",[function(){return function(e,t){var n,i,c=[];for(n=0;n<e.length;n++)i=e[n],t.matched_substrings.length>0&&i.offset>t.matched_substrings[0].length&&c.push(i);return c}}]).filter("trailingComma",[function(){return function(e,t){return t?e+",":e}}]);
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.6",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t(s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.6",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(i.target).is('input[type="radio"]')||t(i.target).is('input[type="checkbox"]')||i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),o="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(o&&!this.options.wrap)return e;var n="prev"==t?-1:1,s=(i+n)%this.$items.length;return this.$items.eq(s)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){return this.sliding?void 0:this.slide("next")},i.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.6",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION):n.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.6",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+r);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),i.isInStateTrue()?void 0:(clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide())},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var v=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",v).emulateTransitionEnd(i.TRANSITION_DURATION):v()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);return this.$element.trigger(a),a.isDefaultPrevented()?void 0:(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this)},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=o?{top:0,left:0}:e.offset(),a={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},r=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,r,s)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.6",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),
o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.6",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return i>n?"top":!1;if("bottom"==this.affixed)return null!=i?n+this.unpin<=s.top?!1:"bottom":t-o>=n+a?!1:"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&i>=n?"top":null!=o&&l+h>=t-o?"bottom":!1},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("angular"),require("api-check")):"function"==typeof define&&define.amd?define(["angular","api-check"],t):"object"==typeof exports?exports.ngFormly=t(require("angular"),require("api-check")):e.ngFormly=t(e.angular,e.apiCheck)}(this,function(e,t){return function(e){function t(n){if(o[n])return o[n].exports;var r=o[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=o(1),i=n(r);t["default"]=i["default"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=o(2),i=n(r),a=o(4),l=n(a),f=o(6),s=n(f),u=o(7),p=n(u),d=o(8),c=n(d),m=o(10),y=n(m),h=o(11),v=n(h),g=o(12),b=n(g),O=o(13),x=n(O),$=o(14),A=n($),E=o(15),k=n(E),w=o(16),M=n(w),C=o(17),j=n(C),T=o(18),_=n(T),F="formly";t["default"]=F;var S=i["default"].module(F,[]);S.constant("formlyApiCheck",l["default"]),S.constant("formlyErrorAndWarningsUrlPrefix",s["default"]),S.constant("formlyVersion","7.3.9"),S.provider("formlyUsability",p["default"]),S.provider("formlyConfig",c["default"]),S.factory("formlyValidationMessages",y["default"]),S.factory("formlyUtil",v["default"]),S.factory("formlyWarn",b["default"]),S.directive("formlyCustomValidation",x["default"]),S.directive("formlyField",A["default"]),S.directive("formlyFocus",k["default"]),S.directive("formlyForm",M["default"]),S.run(j["default"]),S.run(_["default"]),e.exports=t["default"]},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(3);n.version||(n=window.angular),t["default"]=n,e.exports=t["default"]},function(t,o){t.exports=e},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){function o(o,r,i,a){var l=a&&a.hasOwnProperty(r),f=e.some(function(e){return a&&a.hasOwnProperty(e)});return f||l?l?t(o,r,i,a):void 0:s.utils.getError(r,i,n)}a["default"].isArray(e)||(e=[e]);var n="specified if these are not specified: `"+e.join(", ")+"` (otherwise it's optional)";return o.type=n,s.utils.checkerHelpers.setupChecker(o)}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),a=n(i),l=o(5),f=n(l),s=(0,f["default"])({output:{prefix:"angular-formly:",docsBaseUrl:o(6)}}),u=s.oneOfType([s.string,s.func]),p=s.typeOrArrayOf(s.string).nullable,d=s.func,c=s.shape.onlyIf("apiCheck",s.func.withProperties({warn:s.func,"throw":s.func,shape:s.func})),m=s.shape.onlyIf("apiCheck",s.oneOf(["throw","warn"])),y=s.shape({name:r("types",s.string).optional,template:s.shape.ifNot("templateUrl",s.string).optional,templateUrl:s.shape.ifNot("template",s.string).optional,types:s.typeOrArrayOf(s.string).optional,overwriteOk:s.bool.optional,apiCheck:d.optional,apiCheckInstance:c.optional,apiCheckFunction:m.optional,apiCheckOptions:s.object.optional}).strict,h=s.objectOf(s.oneOfType([u,s.shape({expression:u,message:u.optional}).strict])),v=s.oneOfType([s.string,s.object]),g=s.shape({preWrapper:s.arrayOf(s.func).nullable.optional,postWrapper:s.arrayOf(s.func).nullable.optional}).strict.nullable,b=s.objectOf(s.oneOfType([u,s.shape({expression:u,message:u.optional}).strict])),O={$$hashKey:s.any.optional,type:s.shape.ifNot(["template","templateUrl"],s.string).optional,template:s.shape.ifNot(["type","templateUrl"],s.oneOfType([s.string,s.func])).optional,templateUrl:s.shape.ifNot(["type","template"],s.oneOfType([s.string,s.func])).optional,key:s.oneOfType([s.string,s.number]).optional,model:v.optional,originalModel:v.optional,className:s.string.optional,id:s.string.optional,name:s.string.optional,expressionProperties:h.optional,extras:s.shape({validateOnModelChange:s.bool.optional,skipNgModelAttrsManipulator:s.oneOfType([s.string,s.bool]).optional}).strict.optional,data:s.object.optional,templateOptions:s.object.optional,wrapper:p.optional,modelOptions:s.shape({updateOn:s.string.optional,debounce:s.oneOfType([s.objectOf(s.number),s.number]).optional,allowInvalid:s.bool.optional,getterSetter:s.bool.optional,timezone:s.string.optional}).optional,watcher:s.typeOrArrayOf(s.shape({expression:u.optional,listener:u})).optional,validators:b.optional,asyncValidators:b.optional,parsers:s.arrayOf(u).optional,formatters:s.arrayOf(u).optional,noFormControl:s.bool.optional,hide:s.bool.optional,hideExpression:u.optional,ngModelElAttrs:s.objectOf(s.string).optional,ngModelAttrs:s.objectOf(s.shape({statement:s.shape.ifNot(["value","attribute","bound","boolean"],s.any).optional,value:s.shape.ifNot("statement",s.any).optional,attribute:s.shape.ifNot("statement",s.any).optional,bound:s.shape.ifNot("statement",s.any).optional,"boolean":s.shape.ifNot("statement",s.any).optional}).strict).optional,elementAttributes:s.objectOf(s.string).optional,optionsTypes:s.typeOrArrayOf(s.string).optional,link:s.func.optional,controller:s.oneOfType([s.string,s.func,s.array]).optional,validation:s.shape({show:s.bool.nullable.optional,messages:s.objectOf(u).optional,errorExistsAndShouldBeVisible:s.bool.optional}).optional,formControl:s.typeOrArrayOf(s.object).optional,value:s.func.optional,runExpressions:s.func.optional,templateManipulators:g.optional,resetModel:s.func.optional,updateInitialValue:s.func.optional,initialValue:s.any.optional,defaultValue:s.any.optional},x=s.shape(O).strict,$=s.shape({formState:s.object.optional,resetModel:s.func.optional,updateInitialValue:s.func.optional,removeChromeAutoComplete:s.bool.optional,templateManipulators:g.optional,wrapper:p.optional,fieldTransform:s.oneOfType([s.func,s.array]).optional,data:s.object.optional}).strict,A=s.shape({$$hashKey:s.any.optional,key:s.oneOfType([s.string,s.number]).optional,fieldGroup:s.arrayOf(s.oneOfType([x,s.object])),className:s.string.optional,options:$.optional,templateOptions:s.object.optional,wrapper:p.optional,hide:s.bool.optional,hideExpression:u.optional,data:s.object.optional,model:v.optional,form:s.object.optional,elementAttributes:s.objectOf(s.string).optional}).strict,E=a["default"].copy(O);E.key=s.string.optional;var k=s.shape({name:s.string,template:s.shape.ifNot("templateUrl",s.oneOfType([s.string,s.func])).optional,templateUrl:s.shape.ifNot("template",s.oneOfType([s.string,s.func])).optional,controller:s.oneOfType([s.func,s.string,s.array]).optional,link:s.func.optional,defaultOptions:s.oneOfType([s.func,s.shape(E)]).optional,"extends":s.string.optional,wrapper:p.optional,data:s.object.optional,apiCheck:d.optional,apiCheckInstance:c.optional,apiCheckFunction:m.optional,apiCheckOptions:s.object.optional,overwriteOk:s.bool.optional}).strict;a["default"].extend(s,{formlyTypeOptions:k,formlyFieldOptions:x,formlyExpression:u,formlyWrapperType:y,fieldGroup:A,formOptionsApi:$}),t["default"]=s,e.exports=t["default"]},function(e,o){e.exports=t},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]="https://github.com/formly-js/angular-formly/blob/7.3.9/other/ERRORS_AND_WARNINGS.md#",e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){function o(e,t,o){return arguments.length<3&&(o=t,t=e,e=null),new Error(r(e,t)+(" Field definition: "+a["default"].toJson(o)))}function n(e,t){return t||(t=e,e=null),new Error(r(e,t))}function r(e,o){var n="";return null!==e&&(n=""+t+e),"Formly Error: "+o+". "+n}function i(t){e["throw"](e.formlyWrapperType,t,{prefix:"formlyConfig.setWrapper",urlSuffix:"setwrapper-validation-failed"})}function l(e,t){var o="<formly-transclude></formly-transclude>";if(-1===e.indexOf(o))throw n('Template wrapper templates must use "'+o+'" somewhere in them. This one does not have "<formly-transclude></formly-transclude>" in it: '+e+"\nAdditional information: "+JSON.stringify(t))}var f=this;a["default"].extend(this,{getFormlyError:n,getFieldError:o,checkWrapper:i,checkWrapperTemplate:l,getErrorMessage:r,$get:function(){return f}})}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),a=n(i);t["default"]=r,r.$inject=["formlyApiCheck","formlyErrorAndWarningsUrlPrefix"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}function i(e,t,o){function n(e){if(!l["default"].isArray(e)){if(l["default"].isObject(e))return i(e),e["extends"]&&a(e),M[e.name]=e,M[e.name];throw _("You must provide an object or array for setType. You provided: "+JSON.stringify(arguments))}var t=function(){var t=[];return l["default"].forEach(e,function(e){t.push(n(e))}),{v:t}}();return"object"==typeof t?t.v:void 0}function i(e){o["throw"](o.formlyTypeOptions,e,{prefix:"formlyConfig.setType",url:"settype-validation-failed"}),e.overwriteOk?e.overwriteOk=void 0:O(e.name,M,e,"types")}function a(e){var t=c(e["extends"],!0,e);u(e,t),p(e,t),d(e,t),s["default"].reverseDeepMerge(e,t),f(e,t)}function f(e,t){e.template&&t.templateUrl?delete e.templateUrl:e.templateUrl&&t.template&&delete e.template}function u(e,t){var o=t.controller;if(l["default"].isDefined(o)){var n=e.controller;l["default"].isDefined(n)?(e.controller=function(e,t){t(o,{$scope:e}),t(n,{$scope:e})},e.controller.$inject=["$scope","$controller"]):e.controller=o}}function p(e,t){var o=t.link;if(l["default"].isDefined(o)){var n=e.link;l["default"].isDefined(n)?e.link=function(){o.apply(void 0,arguments),n.apply(void 0,arguments)}:e.link=o}}function d(e,t){var o=t.defaultOptions;if(l["default"].isDefined(o)){var n=e.defaultOptions,r=l["default"].isFunction(n),i=l["default"].isFunction(o);i?e.defaultOptions=function(e,t){var i=o(e,t),a={};s["default"].reverseDeepMerge(a,e,i);var l=n;return r&&(l=l(a,t)),s["default"].reverseDeepMerge(i,l),i}:r&&(e.defaultOptions=function(e,t){var r={};return s["default"].reverseDeepMerge(r,e,o),n(r,t)})}}function c(e,t,o){if(e){var n=M[e];if(n||t!==!0)return n;throw _('There is no type by the name of "'+e+'": '+JSON.stringify(o))}}function m(e){var t=[],o=e;for(l["default"].isString(o)&&(o=c(e)),e=o["extends"];e;)o=c(e),t.push(o),e=o["extends"];return t}function y(e,t){for(var o=!0;o;){var n=e,r=t;if(o=!1,l["default"].isArray(n))return n.map(function(e){return y(e)});if(l["default"].isObject(n))return n.types=h(n),n.name=v(n,r),g(n),C[n.name]=n,n;l["default"].isString(n)&&(e={template:n,name:r},t=void 0,o=!0)}}function h(e){return l["default"].isString(e.types)?[e.types]:l["default"].isDefined(e.types)?e.types:[]}function v(e,t){return e.name||t||e.types.join(" ")||j}function g(t){e.checkWrapper(t),t.template&&e.checkWrapperTemplate(t.template,t),t.overwriteOk?delete t.overwriteOk:O(t.name,C,t,"templateWrappers"),b(t)}function b(e){var t=!l["default"].isArray(e.types)||!e.types.every(l["default"].isString);if(t)throw _("Attempted to create a template wrapper with types that is not a string or an array of strings")}function O(e,t,o,n){t.hasOwnProperty(e)&&k("overwriting-types-or-wrappers",["Attempting to overwrite "+e+" on "+n+" which is currently",JSON.stringify(t[e])+" with "+JSON.stringify(o),'To supress this warning, specify the property "overwriteOk: true"'].join(" "))}function x(e){return C[e||j]}function $(e){var t=[];for(var o in C)C.hasOwnProperty(o)&&C[o].types&&-1!==C[o].types.indexOf(e)&&t.push(C[o]);return t}function A(e){var t=C[e];return delete C[e],t}function E(e){var t=$(e);if(t)return l["default"].isArray(t)?(t.forEach(function(e){return A(e.name)}),t):A(t.name)}function k(){if(!T.disableWarnings&&console.warn){var e=Array.prototype.slice.call(arguments),o=e.shift();e.unshift("Formly Warning:"),e.push(""+t+o),console.warn.apply(console,r(e))}}var w=this,M={},C={},j="default",T=this,_=e.getFormlyError;l["default"].extend(this,{setType:n,getType:c,getTypeHeritage:m,setWrapper:y,getWrapper:x,getWrapperByType:$,removeWrapperByName:A,removeWrappersForType:E,disableWarnings:!1,extras:{disableNgModelAttrsManipulator:!1,fieldTransform:[],ngModelAttrsManipulatorPreferUnbound:!1,removeChromeAutoComplete:!1,defaultHideDirective:"ng-if",getFieldId:null},templateManipulators:{preWrapper:[],postWrapper:[]},$get:function(){return w}})}Object.defineProperty(t,"__esModule",{value:!0});var a=o(2),l=n(a),f=o(9),s=n(f);t["default"]=i,i.$inject=["formlyUsabilityProvider","formlyErrorAndWarningsUrlPrefix","formlyApiCheck"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){return i(e,".")||i(e,"[")&&i(e,"]")}function i(e,t){return e&&e.indexOf?-1!==e.indexOf(t):!1}function a(e,t,o,n,r){return v["default"].isFunction(t)?t(n,o,e,r):e.$eval(t,v["default"].extend({$viewValue:n,$modelValue:o},r))}function l(e,t,o){if(t.id)return t.id;var n=t.type;return!n&&t.template?n="template":!n&&t.templateUrl&&(n="templateUrl"),[e,n,t.key,o].join("_")}function f(e){return v["default"].forEach(arguments,function(t,o){o&&v["default"].forEach(t,function(t,o){v["default"].isDefined(e[o])?s(e[o],t)&&f(e[o],t):e[o]=v["default"].copy(t)})}),e}function s(e,t){return v["default"].isObject(e)&&v["default"].isObject(t)&&Object.getPrototypeOf(e)===Object.getPrototypeOf(t)}function u(e,t){if(e.prop||(e=v["default"].element(e)),e.prop("nodeName")===t.toUpperCase())return e;for(var o=e.children(),n=0;o&&n<o.length;n++){var r=u(o[n],t);if(r)return r}}function p(e){return e&&!v["default"].isArray(e)?e=[e]:e||(e=[]),e}function d(){for(var e=arguments.length,t=Array(e),o=0;e>o;o++)t[o]=arguments[o];return function(){var e=arguments;t.forEach(function(t){return t.apply(null,e)})}}function c(e,t,o){return o&&(e=e[o],t=t[o]),t&&e?(v["default"].forEach(t,function(t){-1===e.indexOf(t)&&e.push(t)}),e):t?t:e}function m(e,t){return v["default"].isString(e)&&v["default"].isString(t)?e.length>=t.length&&e.substring(0,t.length)===t:!1}function y(e,t){return v["default"].isString(e)&&v["default"].isString(t)?e.length>=t.length&&-1!==e.indexOf(t):!1}Object.defineProperty(t,"__esModule",{value:!0});var h=o(2),v=n(h);t["default"]={containsSelector:r,containsSpecialChar:i,formlyEval:a,getFieldId:l,reverseDeepMerge:f,findByNodeName:u,arrayify:p,extendFunction:d,extendArray:c,startsWith:m,contains:y},e.exports=t["default"]},function(e,t){"use strict";function o(){function e(e,t,r,i,a){n.messages[e]=o(t,r,i,a)}function t(e,t){n.messages[e]=function(){return t}}function o(e,t,o,n){return function(r,i,a){return"undefined"!=typeof a.options.templateOptions[e]?t+" "+a.options.templateOptions[e]+" "+o:n}}var n={addTemplateOptionValueMessage:e,addStringMessage:t,messages:{}};return n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o,e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return a["default"]}Object.defineProperty(t,"__esModule",{value:!0});var i=o(9),a=n(i);t["default"]=r,e.exports=t["default"]},function(e,t){"use strict";function o(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}function n(e,t,n){return function(){if(!e.disableWarnings){var r=Array.prototype.slice.call(arguments),i=r.shift();r.unshift("Formly Warning:"),r.push(""+t+i),n.warn.apply(n,o(r))}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n,n.$inject=["formlyConfig","formlyErrorAndWarningsUrlPrefix","$log"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){return{restrict:"A",require:"ngModel",link:function(t,o,n,r){function i(e,t,o){l(t,o),t=a["default"].isObject(t)?t.expression:t,p?f(t,o,e):s(t,o,e)}function l(o,n){var i=o.message;i&&(u.validation.messages[n]=function(){return e.formlyEval(t,i,r.$modelValue,r.$viewValue)})}function f(o,n,i){var a=i?"$asyncValidators":"$validators";r[a][n]=function(n,r){return e.formlyEval(t,o,n,r)}}function s(o,n,i){var a=void 0;r.$parsers.unshift(function(l){var f=e.formlyEval(t,o,r.$modelValue,l);return i?(r.$pending=r.$pending||{},r.$pending[n]=!0,a=f,f.then(function(){a===f&&r.$setValidity(n,!0)})["catch"](function(){a===f&&r.$setValidity(n,!1)})["finally"](function(){var e=r.$pending||{};1===Object.keys(e).length?delete r.$pending:delete r.$pending[n]})):r.$setValidity(n,f),l})}var u=t.options;u.validation.messages=u.validation.messages||{},a["default"].forEach(u.validation.messages,function(o,n){u.validation.messages[n]=function(){return e.formlyEval(t,o,r.$modelValue,r.$viewValue)}});var p=r.hasOwnProperty("$validators")&&!n.hasOwnProperty("useParsers");a["default"].forEach(u.validators,a["default"].bind(null,i,!1)),a["default"].forEach(u.asyncValidators,a["default"].bind(null,i,!0))}}}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),a=n(i);t["default"]=r,r.$inject=["formlyUtil"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}function i(e,t,o,n,i,f,u,d,c,m){function y(e,o,n,r,i){function a(){return o(function(){var o=e.options,r=l();s["default"].forEach(o.expressionProperties,function(i,a){var l=n(a).assign,f=t.when(d.formlyEval(e,i,r,r));f.then(function(e){l(o,e)})})},0,!1)}function l(t){return e.model&&e.options.key?(s["default"].isDefined(t)&&p(e.options.key,e.model,t),c(e.options.key,e.model)):void 0}function u(e){return s["default"].isNumber(e)||!d.containsSelector(e)}function p(t,o,r){if(t&&o)if(u(t))o[t]=r;else{var i=n(e.options.key).assign;i&&i(e.model,r)}}function c(e,t){return e&&t?u(e)?t[e]:n(e)(t):void 0}function m(t){d.reverseDeepMerge(t,{originalModel:t.model,extras:{},data:{},templateOptions:{},validation:{}}),e.to=e.options.templateOptions,e.formOptions=e.formOptions||{}}function y(){if(s["default"].isFunction(f.extras.getFieldId))e.id=f.extras.getFieldId(e.options,e.model,e);else{var t=e.form&&e.form.$name||e.formId;e.id=d.getFieldId(t,e.options,e.index)}e.options.id=e.id,e.name=e.options.name||e.options.id,e.options.name=e.name}function h(){s["default"].isDefined(e.options.defaultValue)&&!s["default"].isDefined(c(e.options.key,e.model))&&p(e.options.key,e.model,e.options.defaultValue)}function v(){e.options.initialValue=e.model&&c(e.options.key,e.model)}function b(e,t){t&&O(e,t.defaultOptions);var o=j(e.optionsTypes).reverse();s["default"].forEach(o,function(t){O(e,f.getType(t,!0,e).defaultOptions)})}function O(t,o){o&&(s["default"].isFunction(o)&&(o=o(t,e)),d.reverseDeepMerge(t,o))}function x(e,t){var o=e.key||t||0;s["default"].extend(e,{key:o,value:e.value||l,runExpressions:a,resetModel:$,updateInitialValue:E})}function $(){p(e.options.key,e.model,e.options.initialValue),e.options.formControl&&(s["default"].isArray(e.options.formControl)?s["default"].forEach(e.options.formControl,function(e){A(e,!0)}):A(e.options.formControl)),e.form&&(e.form.$setUntouched&&e.form.$setUntouched(),e.form.$setPristine())}function A(t,o){o||t.$setViewValue(c(e.options.key,e.model)),t.$render(),t.$setUntouched&&t.$setUntouched(),t.$setPristine(),e.$root.$$phase||e.$digest()}function E(){e.options.initialValue=c(e.options.key,e.model)}function w(e){e.validation.messages=e.validation.messages||{},s["default"].forEach(i.messages,function(t,o){e.validation.messages[o]||(e.validation.messages[o]=function(e,o,n){return d.formlyEval(n,t,o,e)})})}function M(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];s["default"].forEach([o.controller,t.controller],function(t){t&&r(t,{$scope:e})})}function C(){e.options.options=e.options.options||{},e.options.options.formState=e.formState,e.to=e.options.templateOptions}if(e.options.fieldGroup)return void C();var T=g(e.options);m(e.options),b(e.options,T),x(e.options,e.index),k(e.options),y(),h(),v(),a(),w(e.options),M(e,e.options,T)}function h(e,n,u,p){function c(){w(e.options),n.addClass("formly-field-group");var t="";e.options.elementAttributes&&(t=Object.keys(e.options.elementAttributes).map(function(t){return t+'="'+e.options.elementAttributes[t]+'"'}).join(" "));var o="model";e.options.form=e.form,e.options.key&&(o="model['"+e.options.key+"']"),x('\n          <formly-form model="'+o+'"\n                       fields="options.fieldGroup"\n                       options="options.options"\n                       form="options.form"\n                       class="'+e.options.className+'"\n                       '+t+"\n                       is-field-group>\n          </formly-form>\n        ").then($(e.options,e.formOptions)).then(A)}function y(){e.options.elementAttributes&&n.attr(e.options.elementAttributes)}function h(){e.options.className&&n.addClass(e.options.className),e.options.type&&n.addClass("formly-field-"+e.options.type)}function A(t){return n.html(v(t)),o(n.contents())(e),t}function E(t){function o(t){var o=/\{\{(.*?)}}/,r=o.exec(t);r&&(t=i(t)(e)),n(t)}function n(t){e.$watch('form["'+t+'"]',function(t){t&&(F>1?(e.options.formControl||(e.options.formControl=[]),e.options.formControl.push(t)):e.options.formControl=t,e.fc=e.options.formControl,y(),u(),p(),c())})}function u(){y=e.$watch(function(){var t=f.extras.errorExistsAndShouldBeVisibleExpression,o=e.options,n=j(e.fc);return n.some(function(e){return e.$invalid})?"boolean"==typeof o.validation.show?o.validation.show:t?n.some(function(o){return d.formlyEval(e,t,o.$modelValue,o.$viewValue)}):n.some(function(e){var t=s["default"].isUndefined(e.$touched)&&e.$dirty;return e.$touched||t}):!1},function(t){e.options.validation.errorExistsAndShouldBeVisible=t,e.showError=t})}function p(){m("parsers")}function c(){m("formatters");var t=e.fc,o=e.form.$pristine;e.options.formatters&&!function(){var n=t.$modelValue;t.$formatters.forEach(function(e){n=e(n)}),t.$setViewValue(n),t.$render(),t.$setPristine(),o&&e.form.$setPristine()}()}function m(t){function o(r){if(!r)return[];s["default"].isString(r)&&(r=f.getType(r,!0,e.options));var i=[];return r["extends"]&&(i=d.extendArray(i,o(r["extends"]))),i=d.extendArray(i,l(r,t,[])),i=d.extendArray(i,n(a(r)))}function n(){var e=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],t=[];return s["default"].forEach(s["default"].copy(j(e)).reverse(),function(e){t=d.extendArray(t,o(e))}),t}function i(t){function o(o){var n=e.options.value();return d.formlyEval(e,t,n,o)}return o[u]=t,o}var u="originalParser";"formatters"===t&&(u="originalFormatter");var p=o(C);p=d.extendArray(p,n(e.options.optionsTypes)),p=d.extendArray(p,e.options[t]),s["default"].forEach(p,function(e,t){p[t]=i(e)});var c=e.fc;s["default"].isArray(c)||(c=[c]),s["default"].forEach(c,function(e){var o;e["$"+t]=(o=e["$"+t]).concat.apply(o,r(p))})}var y=s["default"].noop;if(!e.options.noFormControl){var h=s["default"].element("<div>"+t+"</div>"),v=h[0].querySelectorAll("[ng-model],[data-ng-model]");v.length&&s["default"].forEach(v,function(e){F++,o(e.getAttribute("name"))})}}function k(){C&&C.link&&C.link.apply(_,T),e.options.link&&e.options.link.apply(_,T)}function M(o){return function(n){var r=t.when(n);return s["default"].forEach(o,function(o){r=r.then(function(n){return t.when(o(n,e.options,e)).then(function(e){return s["default"].isString(e)?e:v(e)})})}),r}}if(e.options.fieldGroup)return void c();!p&&e.options.model&&e.$watch("options.model",function(){return e.options.runExpressions()},!0),y(),h();var C=g(e.options),T=arguments,_=this,F=0,S=b(e.options,e.formOptions);O(e.options).then(M(S.preWrapper)).then($(e.options,e.formOptions)).then(M(S.postWrapper)).then(A).then(E).then(k)["catch"](function(t){m("there-was-a-problem-setting-the-template-for-this-field","There was a problem setting the template for this field ",e.options,t)})}function v(e){var t=s["default"].element("<a></a>");return t.append(e).html()}function g(e){return e.type&&f.getType(e.type)}function b(e,t){function o(e){var t=e||{},o=t.preWrapper,i=void 0===o?[]:o,a=t.postWrapper,l=void 0===a?[]:a;n=n.concat(i),r=r.concat(l)}var n=[],r=[];return o(e.templateManipulators),o(t.templateManipulators),o(f.templateManipulators),{preWrapper:n,postWrapper:r}}function O(e){function t(t,o){return s["default"].isDefined(e[t])?e[t]:o&&s["default"].isDefined(o[t])?o[t]:void 0}var o=f.getType(e.type,!0,e),n=t("template",o),r=t("templateUrl",o);if(s["default"].isUndefined(n)&&!r)throw c.getFieldError("type-type-has-no-template","Type '"+e.type+"' has no template. On element:",e);return x(r||n,s["default"].isUndefined(n),e)}function x(o,r,i){var a=void 0;if(a=s["default"].isFunction(o)?t.when(o(i)):t.when(o),!r)return a;var l=function(){var t={cache:n};return{v:a.then(function(o){return e.get(o,t)}).then(function(e){return e.data})["catch"](function(e){m("problem-loading-template-for-templateurl","Problem loading template for "+o,e)})}}();return"object"==typeof l?l.v:void 0}function $(e,o){var n=E(e,o);return function(o){if(!n.length)return t.when(o);n.forEach(function(t){c.checkWrapper(t,e),M(t,e)});var r=n.map(function(e){return x(e.template||e.templateUrl,!e.template)});return t.all(r).then(function(e){e.forEach(function(e,t){c.checkWrapperTemplate(e,n[t])}),e.reverse();var t=e.shift();return e.forEach(function(e){t=A(t,e)}),A(t,o)})}}function A(e,t){var o=s["default"].element("<a></a>");o.append(e);var n=o.find("formly-transclude");return n.length||(n=d.findByNodeName(o,"formly-transclude")),n.replaceWith(t),o.html()}function E(e,t){var o=e.wrapper;if(null===o)return[];o=o?j(o).map(f.getWrapper):j(f.getWrapperByType(e.type));var n=f.getType(e.type,!0,e);if(n&&n.wrapper){var r=j(n.wrapper).map(f.getWrapper);o=o.concat(r)}if(t.wrapper){var i=j(t.wrapper).map(f.getWrapper);o=o.concat(i)}var a=f.getWrapper();return a&&o.push(a),o}function k(e){u["throw"](u.formlyFieldOptions,e,{prefix:"formly-field directive",url:"formly-field-directive-validation-failed"});var t=e.type&&f.getType(e.type);t&&M(t,e,!0),e.expressionProperties&&e.expressionProperties.hide&&m("dont-use-expressionproperties.hide-use-hideexpression-instead","You have specified `hide` in `expressionProperties`. Use `hideExpression` instead",e)}function w(e){u["throw"](u.fieldGroup,e,{prefix:"formly-field directive",url:"formly-field-directive-validation-failed"})}function M(e,t,o){var n=e.apiCheck,r=e.apiCheckInstance,i=e.apiCheckFunction,a=e.apiCheckOptions;C(n,r,i,a,t),o&&t.type&&s["default"].forEach(f.getTypeHeritage(t.type),function(e){C(e.apiCheck,e.apiCheckInstance,e.apiCheckFunction,e.apiCheckOptions,t)})}function C(e,t,o,n,r){if(e){var i=t||f.extras.apiCheckInstance||u;if(!i.config.disabled&&!p["default"].globalConfig.disabled){var a=o||"warn",l=e(i);s["default"].forEach(l,function(e,t){var o=i.shape(e),l=s["default"].extend({prefix:"formly-field type "+r.type+" for property "+t,url:u.config.output.docsBaseUrl+"formly-field-type-apicheck-failed"},n);i[a](o,r[t],l)})}}}var j=d.arrayify;return y.$inject=["$scope","$timeout","$parse","$controller","formlyValidationMessages"],{restrict:"AE",transclude:!0,require:"?^formlyForm",scope:{options:"=",model:"=",originalModel:"=?",formId:"@",index:"=?",fields:"=?",formState:"=?",formOptions:"=?",form:"=?"},controller:y,link:h}}function a(e){return l(e,"optionsTypes",[])}function l(e,t,o){return e.defaultOptions&&e.defaultOptions[t]||o}Object.defineProperty(t,"__esModule",{value:!0});var f=o(2),s=n(f),u=o(5),p=n(u);t["default"]=i,i.$inject=["$http","$q","$compile","$templateCache","$interpolate","formlyConfig","formlyApiCheck","formlyUtil","formlyUsability","formlyWarn"],e.exports=t["default"]},function(e,t){"use strict";function o(e,t){return{restrict:"A",link:function(o,n,r){var i=null,a=n[0],l=t[0];r.$observe("formlyFocus",function(t){"true"===t?e(function(){i=l.activeElement,a.focus()},~~r.focusWait):"false"===t&&l.activeElement===a&&(a.blur(),r.hasOwnProperty("refocus")&&i&&i.focus())})}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o,o.$inject=["$timeout","$document"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}function i(e,t,o,n,i){function l(t,o){function r(){return o.rootEl||"ng-form"}function a(){return o.fieldRootEl||"div"}function l(){return o.hideDirective||n.extras.defaultHideDirective||"ng-if"}function s(){return o.trackBy?"track by "+o.trackBy:""}function u(){var t=v,n=o.bindName;if(n){if(f["default"].version.minor<3)throw e.getFormlyError("bind-name attribute on formly-form not allowed in < angular 1.3");t=i.startSymbol()+"::'formly_' + "+n+i.endSymbol()}return t}function d(){return o.transcludeClass||""}function m(e){var t=["model","form","fields","options","name","role","class","data-model","data-form","data-fields","data-options","data-name"],o=[];return f["default"].forEach(e,function(e){var n=e.nodeName,r=e.value;"undefined"!==n&&-1===t.indexOf(n)&&o.push(p(n)+'="'+r+'"')}),o.join(" ")}var y=r(),h=a(),v="formly_"+c++,g="";return o.hasOwnProperty("isFieldGroup")&&t.parent().parent().hasClass("formly")&&(g=m(t.parent().parent()[0].attributes)),"\n        <"+y+' class="formly"\n                 name="'+u()+'"\n                 role="form" '+g+">\n          <"+h+' formly-field\n               ng-repeat="field in fields '+s()+'"\n               '+l()+'="!field.hide"\n               class="formly-field"\n               options="field"\n               model="field.model || model"\n               original-model="model"\n               fields="fields"\n               form="theFormlyForm"\n               form-id="'+u()+'"\n               form-state="options.formState"\n               form-options="options"\n               index="$index">\n          </'+h+'>\n          <div ng-transclude class="'+d()+'"></div>\n        </'+y+">\n      "}function s(o,i,l){function s(){f["default"].forEach(o.fields,function(e,t){var n=e.model||o.model,r=e.runExpressions&&e.runExpressions();if(e.hideExpression){var i=n[e.key];e.hide=E(e.hideExpression,i,e,t)}if(e.extras&&e.extras.validateOnModelChange&&e.formControl){var a=e.formControl.$validate;r?r.then(a):a()}})}function u(){o.fields=o.fields||[],p(o.options);var t=o.options.fieldTransform||n.extras.fieldTransform;f["default"].isArray(t)||(t=[t]),f["default"].forEach(t,function(t){if(t&&(o.fields=t(o.fields,o.model,o.options,o.form),!o.fields))throw e.getFormlyError("fieldTransform must return an array of fields")}),h(),f["default"].forEach(o.fields,b),f["default"].forEach(o.fields,O)}function p(e){n.extras.fieldTransform&&f["default"].isFunction(n.extras.fieldTransform)?t("fieldtransform-as-a-function-deprecated","fieldTransform as a function has been deprecated.","Attempted for formlyConfig.extras: "+n.extras.fieldTransform.name,n.extras):e.fieldTransform&&f["default"].isFunction(e.fieldTransform)&&t("fieldtransform-as-a-function-deprecated","fieldTransform as a function has been deprecated.","Attempted for form",e)}function c(){i["throw"]([i.formOptionsApi.optional],[o.options],{prefix:"formly-form options check"}),o.options=o.options||{},o.options.formState=o.options.formState||{},f["default"].extend(o.options,{updateInitialValue:m,resetModel:y})}function m(){f["default"].forEach(o.fields,function(e){d(e)&&e.options?e.options.updateInitialValue():e.updateInitialValue()})}function y(){f["default"].forEach(o.fields,function(e){d(e)&&e.options?e.options.resetModel():e.resetModel&&e.resetModel()})}function h(){var e=[o.model];o.options.formState&&e.push(o.options.formState),f["default"].forEach(o.fields,function(t){var n=v(t);t.model&&n&&-1===e.indexOf(t.model)&&(o.$watch(function(){return t.model},s,!0),e.push(t.model))})}function v(t){var n=!0;if(f["default"].isString(t.model)){var r=t.model,i=o.fields.indexOf(t);if(n=!g(r),t.model=E(r,void 0,t,i),!t.model)throw e.getFieldError("field-model-must-be-initialized","Field model must be initialized. When specifying a model as a string for a field, the result of the expression must have been initialized ahead of time.",t);
}return n}function g(e){return["model","formState"].some(function(t){return l.startsWith(e,t+".")||l.startsWith(e,t+"[")})}function b(e,t){d(e)||(e.key=e.key||t||0)}function O(t,n){if(!d(t)&&f["default"].isDefined(t.watcher)){var r=t.watcher;f["default"].isArray(r)||(r=[r]),f["default"].forEach(r,function(r){if(!f["default"].isDefined(r.listener))throw e.getFieldError("all-field-watchers-must-have-a-listener","All field watchers must have a listener",t);var i=x(r,t,n),a=$(r,t,n),l=r.type||"$watch";r.stopWatching=o[l](i,a,r.watchDeep)})}}function x(e,t,o){var n=e.expression||"model['"+t.key.toString().split(".").join("']['")+"']";return f["default"].isFunction(n)&&!function(){var i=n;n=function(){var t=A.apply(void 0,[e,o].concat(a.call(arguments)));return i.apply(void 0,r(t))},n.displayName="Formly Watch Expression for field for "+t.key}(),n}function $(e,t,o){var n=e.listener;return f["default"].isFunction(n)&&!function(){var i=n;n=function(){var t=A.apply(void 0,[e,o].concat(a.call(arguments)));return i.apply(void 0,r(t))},n.displayName="Formly Watch Listener for field for "+t.key}(),n}function A(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;n>i;i++)r[i-2]=arguments[i];return[o.fields[t]].concat(r,[e.stopWatching])}function E(e,t,n,r){var i=k(n,r);return l.formlyEval(o,e,t,t,i)}function k(e,t){return{options:e,index:t,formState:o.options.formState,formId:o.formId}}c(),o.model=o.model||{},u(),o.$watch("model",s,!0),o.options.formState&&o.$watch("options.formState",s,!0)}function u(e,r,i){function a(){var a=i.name;if(e.formId=a,e.theFormlyForm=e[a],i.form){var l=o(i.form),f=l.assign,s=l(e.$parent);s?(e.theFormlyForm=s,e[a]&&e.theFormlyForm.$removeControl(e[a]),r.removeData("$formController")):f(e.$parent,e[a])}e.theFormlyForm||n.disableWarnings||t("formly-form-has-no-formcontroller","Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work",r,e)}function l(){var t=n.extras.removeChromeAutoComplete===!0,o=e.options&&e.options.removeChromeAutoComplete===!1,i=e.options&&e.options.removeChromeAutoComplete===!0;if(t&&!o||i){var a=document.createElement("input");a.setAttribute("autocomplete","address-level4"),a.setAttribute("hidden","true"),r[0].appendChild(a)}}a(),l()}function p(e){return e?e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()}):""}function d(e){return e&&!!e.fieldGroup}var c=1;return s.$inject=["$scope","formlyApiCheck","formlyUtil"],{restrict:"AE",template:l,replace:!0,transclude:!0,scope:{fields:"=",model:"=",form:"=?",options:"=?"},controller:s,link:u}}Object.defineProperty(t,"__esModule",{value:!0});var a=Array.prototype.slice,l=o(2),f=n(l);t["default"]=i,i.$inject=["formlyUsability","formlyWarn","$parse","formlyConfig","$interpolate"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){function o(e,o,r){function i(){(a["default"].isDefined(o.validators)||a["default"].isDefined(o.validation.messages))&&u(g,"formly-custom-validation","")}function l(){d(o.key)&&p(g,"ng-model","model."+o.key)}function c(){a["default"].isDefined(o.modelOptions)&&(u(g,"ng-model-options","options.modelOptions"),o.modelOptions.getterSetter&&p(g,"ng-model","options.value"))}function m(){if(o.templateOptions||o.expressionProperties){var e=o.templateOptions||{},n=o.expressionProperties||{},r=f();a["default"].extend(r,o.ngModelAttrs),a["default"].forEach(r,function(r,i){var l=void 0,f=void 0,p="options.templateOptions['"+i+"']",d=e[i],c=s(n,i),m=a["default"].isDefined(d),y=a["default"].isDefined(c);if(r.value)f=r.value,l=i;else if(r.statement&&m)if(f=r.statement,a["default"].isString(e[i]))l="$eval("+p+")";else{if(!a["default"].isFunction(e[i]))throw new Error("options.templateOptions."+i+" must be a string or function: "+JSON.stringify(o));l=p+"(model[options.key], options, this, $event)"}else r.bound&&y?(f=r.bound,l=p):(r.attribute||r["boolean"])&&y?(f=r.attribute||r["boolean"],l=""+t.startSymbol()+p+t.endSymbol()):r.attribute&&m?(f=r.attribute,l=d):r["boolean"]?m&&!y&&d&&(f=r["boolean"],l=!0):r.bound&&m&&(f=r.bound,l=p);a["default"].isDefined(f)&&a["default"].isDefined(l)&&u(g,f,l)})}}function y(){a["default"].forEach(o.ngModelElAttrs,function(e,t){p(g,t,e)})}var h=document.createElement("div"),v=o.extras&&o.extras.skipNgModelAttrsManipulator;if(v===!0)return e;h.innerHTML=e;var g=n(h,v);return g&&g.length?(u(g,"id",r.id),u(g,"name",r.name||r.id),i(),l(),c(),m(),y(),h.innerHTML):e}function n(e,t){var o=a["default"].isString(t)?":not("+t+")":"",n=":not([formly-skip-ng-model-attrs-manipulator])",i="[ng-model]"+o+n+", [data-ng-model]"+o+n;try{return e.querySelectorAll(i)}catch(l){return r(e,t)}}function r(e,t){var o=e.querySelectorAll("[ng-model], [data-ng-model]"),n=[];n.item=function(e){return this[e]};for(var r=0;r<o.length;r++){var l=o[r];l.hasAttribute("formly-skip-ng-model-attrs-manipulator")||a["default"].isString(t)&&i(l,t)||n.push(l)}return n}function i(e,t){var o=document.createElement("div");return o.innerHTML=e.outerHTML,o.querySelector(t)}function f(){var t={focus:{attribute:"formly-focus"}},o=[],n=["required","disabled"],r=["pattern","minlength"],i=["change","keydown","keyup","keypress","click","focus","blur"],l=["placeholder","min","max","tabindex","type"];return e.extras.ngModelAttrsManipulatorPreferUnbound?r.push("maxlength"):o.push("maxlength"),a["default"].forEach(o,function(e){t[e]={bound:"ng-"+e}}),a["default"].forEach(n,function(e){t[e]={"boolean":e,bound:"ng-"+e}}),a["default"].forEach(r,function(e){t[e]={attribute:e,bound:"ng-"+e}}),a["default"].forEach(i,function(e){var o="on"+e.substr(0,1).toUpperCase()+e.substr(1);t[o]={statement:"ng-"+e}}),a["default"].forEach(l,function(e){t[e]={attribute:e}}),t}function s(e,t){return e["templateOptions."+t]||e["templateOptions['"+t+"']"]||e['templateOptions["'+t+'"]']}function u(e,t,o){a["default"].forEach(e,function(e){e.getAttribute(t)||e.setAttribute(t,o)})}function p(e,t,o){a["default"].forEach(e,function(e){e.setAttribute(t,o)})}function d(e){return(0,l.contains)(e,".")||(0,l.contains)(e,"[")&&(0,l.contains)(e,"]")}e.extras.disableNgModelAttrsManipulator||e.templateManipulators.preWrapper.push(o)}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),a=n(i),l=o(9);t["default"]=r,r.$inject=["formlyConfig","$interpolate"],e.exports=t["default"]},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){e&&e.documentMode<9&&!function(){var t=e.get(0),o=["formly-field","formly-form"];a["default"].forEach(o,function(e){t.createElement(e)})}()}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),a=n(i);t["default"]=r,r.$inject=["$document"],e.exports=t["default"]}])});
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("angular"),require("angular-formly"),require("api-check")):"function"==typeof define&&define.amd?define(["angular","angular-formly","api-check"],e):"object"==typeof exports?exports.ngFormlyTemplatesBootstrap=e(require("angular"),require("angular-formly"),require("api-check")):t.ngFormlyTemplatesBootstrap=e(t.angular,t.ngFormly,t.apiCheck)}(this,function(t,e,o){return function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var o={};return e.m=t,e.c=o,e.p="",e(0)}([function(t,e,o){"use strict";t.exports=o(1)},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="formlyBootstrap",r=o(2),i=r.module(n,[o(4)]);i.constant("formlyBootstrapApiCheck",o(5)({output:{prefix:"angular-formly-bootstrap"}})),i.constant("formlyBootstrapVersion","6.1.7"),o(6)(i),o(9)(i),o(19)(i),e["default"]=n,t.exports=e["default"]},function(t,e,o){"use strict";var n=o(3);n.version||(n=window.angular),t.exports=n},function(e,o){e.exports=t},function(t,o){t.exports=e},function(t,e){t.exports=o},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setWrapper([{name:"bootstrapLabel",template:o(7),apiCheck:function(t){return{templateOptions:{label:t.string,required:t.bool.optional,labelSrOnly:t.bool.optional}}}},{name:"bootstrapHasError",template:o(8)}])}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e){t.exports="<div>\n  <label for=\"{{id}}\" class=\"control-label {{to.labelSrOnly ? 'sr-only' : ''}}\" ng-if=\"to.label\">\n    {{to.label}}\n    {{to.required ? '*' : ''}}\n  </label>\n  <formly-transclude></formly-transclude>\n</div>\n"},function(t,e){t.exports='<div class="form-group" ng-class="{\'has-error\': showError}">\n  <formly-transclude></formly-transclude>\n</div>\n'},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){o(10)(t),o(12)(t),o(14)(t),o(15)(t),o(17)(t),o(18)(t)},t.exports=e["default"]},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"checkbox",template:o(11),wrapper:["bootstrapHasError"],apiCheck:function(t){return{templateOptions:{label:t.string}}}})}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e){t.exports='<div class="checkbox">\n	<label>\n		<input type="checkbox"\n           class="formly-field-checkbox"\n		       ng-model="model[options.key]">\n		{{to.label}}\n		{{to.required ? \'*\' : \'\'}}\n	</label>\n</div>\n'},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"multiCheckbox",template:o(13),wrapper:["bootstrapLabel","bootstrapHasError"],apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional}}},defaultOptions:{noFormControl:!1,ngModelAttrs:{required:{attribute:"",bound:""}}},controller:["$scope",function(t){function e(e){var o;t.to.required&&(o=angular.isArray(t.model[r.key])&&t.model[r.key].length>0&&e,t.fc.$setValidity("required",o))}function o(){t.model[r.key]=[],angular.forEach(t.multiCheckbox.checked,function(e,o){e&&t.model[r.key].push(n.options[o][n.valueProp||"value"])}),t.fc.$setTouched(),e(!0)}var n=t.to,r=t.options;if(t.multiCheckbox={checked:[],change:o},t.$watch("model",function(e){var o,i;Object.keys(e).length&&(o=e[r.key],t.$watch("to.options",function(e){if(e&&Array.isArray(e)&&Array.isArray(o)){i=n.valueProp||"value";for(var r=0;r<e.length;r++)t.multiCheckbox.checked[r]=-1!==o.indexOf(e[r][i])}}))},!0),r.expressionProperties&&r.expressionProperties["templateOptions.required"]&&t.$watch(function(){return t.to.required},function(t){e(t)}),t.to.required)var i=t.$watch("fc",function(t){t&&(e(!0),i())})}]})}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e){t.exports='<div class="radio-group">\n  <div ng-repeat="(key, option) in to.options" class="checkbox">\n    <label>\n      <input type="checkbox"\n             id="{{id + \'_\'+ $index}}"\n             ng-model="multiCheckbox.checked[$index]"\n             ng-change="multiCheckbox.change()">\n      {{option[to.labelProp || \'name\']}}\n    </label>\n  </div>\n</div>\n'},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"input",template:'<input class="form-control" ng-model="model[options.key]">',wrapper:["bootstrapLabel","bootstrapHasError"]})}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"radio",template:o(16),wrapper:["bootstrapLabel","bootstrapHasError"],defaultOptions:{noFormControl:!1},apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional}}}})}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e){t.exports='<div class="radio-group">\n  <div ng-repeat="(key, option) in to.options" class="radio">\n    <label>\n      <input type="radio"\n             id="{{id + \'_\'+ $index}}"\n             tabindex="0"\n             ng-value="option[to.valueProp || \'value\']"\n             ng-model="model[options.key]">\n      {{option[to.labelProp || \'name\']}}\n    </label>\n  </div>\n</div>\n'},function(t,e){"use strict";function o(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"select",template:n,wrapper:["bootstrapLabel","bootstrapHasError"],defaultOptions:function(t){var e=t.templateOptions.ngOptions||"option[to.valueProp || 'value'] as option[to.labelProp || 'name'] group by option[to.groupProp || 'group'] for option in to.options";return{ngModelAttrs:o({},e,{value:t.templateOptions.optionsAttr||"ng-options"})}},apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),optionsAttr:t.string.optional,labelProp:t.string.optional,valueProp:t.string.optional,groupProp:t.string.optional}}}})}t.config(e);var n='<select class="form-control" ng-model="model[options.key]"></select>';e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.setType({name:"textarea",template:'<textarea class="form-control" ng-model="model[options.key]"></textarea>',wrapper:["bootstrapLabel","bootstrapHasError"],defaultOptions:{ngModelAttrs:{rows:{attribute:"rows"},cols:{attribute:"cols"}}},apiCheck:function(t){return{templateOptions:{rows:t.number.optional,cols:t.number.optional}}}})}t.config(e),e.$inject=["formlyConfigProvider"]},t.exports=e["default"]},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var r=o(20),i=n(r),a=o(22),l=n(a);e["default"]=function(t){(0,i["default"])(t),(0,l["default"])(t)},t.exports=e["default"]},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t,e){var n=o(21),r=e.shape({"class":e.string.optional,text:e.string.optional,onClick:e.func.optional}).strict.optional,i=e.shape({templateOptions:e.shape({addonLeft:r,addonRight:r})});t.templateManipulators.preWrapper.push(function(t,o){return o.templateOptions.addonLeft||o.templateOptions.addonRight?(e.warn([i],[o]),n.replace("<formly-transclude></formly-transclude>",t)):t})}t.run(e),e.$inject=["formlyConfig","formlyBootstrapApiCheck"]},t.exports=e["default"]},function(t,e){t.exports='<div ng-class="{\'input-group\': to.addonLeft || to.addonRight}">\n    <div class="input-group-addon"\n         ng-if="to.addonLeft"\n         ng-style="{cursor: to.addonLeft.onClick ? \'pointer\' : \'inherit\'}"\n         ng-click="to.addonLeft.onClick(options, this)">\n        <i class="{{to.addonLeft.class}}" ng-if="to.addonLeft.class"></i>\n        <span ng-if="to.addonLeft.text">{{to.addonLeft.text}}</span>\n    </div>\n    <formly-transclude></formly-transclude>\n    <div class="input-group-addon"\n         ng-if="to.addonRight"\n         ng-style="{cursor: to.addonRight.onClick ? \'pointer\' : \'inherit\'}"\n         ng-click="to.addonRight.onClick(options, this)">\n        <i class="{{to.addonRight.class}}" ng-if="to.addonRight.class"></i>\n        <span ng-if="to.addonRight.text">{{to.addonRight.text}}</span>\n    </div>\n</div>\n'},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){function e(t){t.templateManipulators.preWrapper.push(function(t,e,o){if(angular.isDefined(e.templateOptions.description)){var n=document.createElement("div");n.appendChild(angular.element(t)[0]),n.appendChild(angular.element('<p id="'+o.id+'_description"class="help-block"ng-if="to.description">{{to.description}}</p>')[0]);var r=angular.element(n.querySelectorAll("[ng-model]"));return r&&r.attr("aria-describedby",o.id+"_description"),n.innerHTML}return t})}t.run(e),e.$inject=["formlyConfig"]},t.exports=e["default"]}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
