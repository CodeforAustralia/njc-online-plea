"use strict";angular.module("njcOnlinePleas",["ui.router","angular-spinkit","ngResource","ngSanitize","ngAnimate","angular-cache","truncate","socialLinks","formly","formlyBootstrap","multiStepForm","mgcrea.ngStrap","google.places"]),function(){function e(e){e.state("home",{url:"/",templateUrl:"js/partials/home.html",controller:"HomeController",controllerAs:"vm",resolve:{}}).state("form",{"abstract":!0,templateUrl:"js/partials/form.html",controller:"FormController",controllerAs:"vm",resolve:{}}).state("form.your-details",{templateUrl:"js/partials/your-details.html"}).state("form.your-offence",{templateUrl:"js/partials/your-offence.html"}).state("form.declaration",{templateUrl:"js/partials/declaration.html"}).state("form.review",{templateUrl:"js/partials/review.html"}).state("form.finish",{url:"/submitted",templateUrl:"js/partials/confirmation.html",controller:"FormConfirmationController",controllerAs:"vm",resolve:{}})}e.$inject=["$stateProvider"],angular.module("njcOnlinePleas").config(["$urlRouterProvider",function(e){e.when("","/")}]).config(["CacheFactoryProvider",function(e){angular.extend(e.defaults,{maxAge:9e5})}]).config(["$datepickerProvider",function(e){angular.extend(e.defaults,{modelDateFormat:"dd/MM/yyyy",dateFormat:"dd/MM/yyyy",dateType:"string",startWeek:1,useNative:!0,autoclose:!0,iconLeft:"fa fa-chevron-left",iconRight:"fa fa-chevron-right"})}]).controller("AppController",["$log","$scope","$rootScope",function(e,t,o){o.user={name:""}}]).config(e).constant("_",window._).run(["$log","$rootScope","$location","formlyValidationMessages","formlyConfig",function(e,t,o,a,r){r.setWrapper([{name:"customLabel",templateUrl:"js/partials/forms/wrappers/label.html"},{name:"customHasError",templateUrl:"js/partials/forms/wrappers/has-error.html"},{name:"note",templateUrl:"js/partials/forms/wrappers/field-note.html"},{name:"noteModal",templateUrl:"js/partials/forms/wrappers/field-note-modal.html"},{name:"dobSeperateFields",templateUrl:"js/partials/forms/wrappers/dob-seperate-fields.html"}]),r.setType([{"extends":"input",name:"customInput",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"select",name:"customSelect",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"radio",name:"customRatingRadio",templateUrl:"js/partials/forms/wrappers/custom-field-rating-radio.html",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"checkbox",name:"customCheckbox",templateUrl:"js/partials/forms/wrappers/custom-field-checkbox.html",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"multiCheckbox",name:"customMultiCheckbox",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"radio",name:"customRadio",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"textarea",name:"customTextarea",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"textarea",name:"customTextareaWithCounter",wrapper:["customLabel","customHasError"],controller:["$scope",function(e){function t(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=t}]},{"extends":"input",name:"customSplitDate",templateUrl:"js/partials/forms/custom-split-date.html",wrapper:["customLabel","customHasError"],controller:["$scope",function(e,t){function o(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}e.options.data.getValidationMessage=o}]}]),a.addTemplateOptionValueMessage("maxlength","maxlength","","is the maximum length","Too long"),a.addTemplateOptionValueMessage("minlength","minlength","","is the minimum length","Too short"),a.messages.required='to.label + " is required"',a.messages.email='$viewValue + " should be a valid email address"'}])}(),function(){function e(e,t,o,a,r,n){function l(){}l()}e.$inject=["$scope","$log","$rootScope","$state","$alert","$tooltip"],angular.module("njcOnlinePleas").controller("ConfirmationFormController",e)}(),function(){function e(e,t,o,a){function r(){}var n=this;n.model={},r()}e.$inject=["$scope","$log","$rootScope","$state"],angular.module("njcOnlinePleas").controller("FormConfirmationController",e)}(),function(){function e(e,t,o,a,r,n,l,i,s){function c(e){var t=new Date(e.year,e.month,e.day),o=["January","February","March","April","May","June","July","August","September","October","November","December"];return t.getDate()+" "+o[t.getMonth()].slice(0,3)+" "+t.getFullYear()}function u(e){e.year=2===e.year.length?Number("20"+e.year):e.year;var t=new Date(e.year,e.month,e.day);return t.getTime()/1e3}function m(e){return e.formatted_address}function d(e,t){if(!(_.isUndefined(t)||_.isUndefined(t.day)||_.isUndefined(t.month)||_.isUndefined(t.year))){var o={day:t.day||"",month:t.month||"",year:t.year||""};return formatDateYMD(o)}return!1}function p(t){var o=e.options.validation.messages[t];return o?o(e.fc.$viewValue,e.fc.$modelValue,e):void 0}function f(){y.errors={},y.model={}}function g(){r({title:"Holy guacamole!",content:"Best check yo self, you're not looking too good.",type:"danger",show:!1,container:"#alert-container",duration:2500,dismissable:!0})}function h(){}var y=this;y.steps=[{id:0,label:"Your details"},{id:1,label:"Your offence"},{id:2,label:"Declarations"},{id:3,label:"Review"}],y.current_step_id=0,y.place=null,y.errors=[],y.cleanupDate=c,y.cancelForm=function(){var t=n({scope:e,show:!0,content:"Are you sure you would like to exit the form?",templateUrl:"js/partials/yes-no-modal.html"});e.exitForm=function(e){e?(t.hide(),f(),a.go("home")):t.hide()}},y.submit=function(){var e=angular.copy(y.model);e.address=m(e.address),e.plead_guilty=e.plead_guilty?"YES":"NO",e.acknowledgement=e.acknowledgement?"YES":"NO",e.birthday=y.model.birthday,l.post("pleas",e).then(function(){a.go("form.finish")},function(){g()})},y.options={data:{}},y.options.data.getValidationMessage=p,y.prev=function(e){y.errors=[],y.current_step_id--,a.go("form."+e.replace("_","-"))},y.next=function(e,t){y.checkRequiredFields(e),y.checkRequiredFields(e),0===y.errors.length&&(a.go("form."+t.replace("_","-")),y.current_step_id++)},y.checkRequiredFields=function(e){y.errors=[];var t=y.fields[e];if("your_details"===e){var o=d("birthday",y.model.birthday);if(o);else{_.find(y.fields.your_details,{key:"birthday"})}}if("declaration"!==e)t.forEach(function(e){e.formControl.$invalid&&y.errors.push({message:e.templateOptions.label+" is required"})});else{var a=!0;t.forEach(function(e){e.formControl.$invalid&&(a=!1)}),a||y.errors.push({message:"You must agree to both declarations to proceed"})}},y.finish=function(){a.go("form.finish")},y.model={your_details:{},your_offence:{},declarations:{}},y.model={contact_method:"email"},y.showMinorOffences=function(){},y.fields={},y.fields.your_details=[{name:"given_name",key:"given_name",type:"customInput",templateOptions:{label:"Given Name(s)",required:!0}},{name:"family_name",key:"family_name",type:"customInput",templateOptions:{label:"Family Name",required:!0}},{name:"address",key:"address",type:"customInput",templateOptions:{label:"Residential address",required:!0,"g-places-autocomplete":"g-places-autocomplete"},ngModelAttrs:{"g-places-autocomplete":{attribute:"g-places-autocomplete"}}},{name:"birthday",key:"birthday",type:"customInput",templateOptions:{label:"Date of Birth",placeholder:"dd/mm/yyyy",required:!0,past:!0},validators:{past:{expression:function(e,t,o){var a=t||e;if(!_.isUndefined(a)&&a.length>0){var r=a.split("/");if(3==r.length){var n=new Date;r=u({day:r[0],month:r[1]-1,year:r[2]});var l=u({day:n.getDate(),month:n.getMonth(),year:n.getFullYear()});if(l>r)return!0}}return!1},message:'"Date of birth must be a past date"'}}},{name:"contact_method",key:"contact_method",type:"customSelect",templateOptions:{label:"Preferred contact",required:!0,options:[{name:"Phone number",value:"phone"},{name:"Email",value:"email"}]}},{name:"contact",key:"contact",type:"customInput",templateOptions:{label:"Contact",placeholder:"Enter your contact",required:!0},expressionProperties:{"templateOptions.label":'"Contact " + model.contact_method'}}],y.fields.your_offence=[{name:"hearing_date",key:"hearing_date",type:"customInput",wrapper:"note",templateOptions:{label:"Date of your hearing",placeholder:"Enter the date of your hearing",required:!0,"bs-datepicker":"bs-datepicker",form_field_note:'This date is located on your summons document in the section "Where will the case be heard?"',future:!0},ngModelAttrs:{"bs-datepicker":{attribute:"bs-datepicker"},"form-field-note":{attribute:"form-field-note"}},validators:{future:{expression:function(e,t,o){var a=t||e;if(!_.isUndefined(a)&&a.length>0){var r=a.split("/");if(3==r.length){var n=new Date;r=u({day:r[0],month:r[1]-1,year:r[2]});var l=u({day:n.getDate(),month:n.getMonth(),year:n.getFullYear()});if(r>l)return!0}}return!1},message:'"Date of your hearing must be a future date"'}}},{name:"offence_date",key:"offence_date",type:"customInput",templateOptions:{label:"Date of your offence",placeholder:"Enter the date your offence was committed",required:!0,"bs-datepicker":"bs-datepicker",past:!0},ngModelAttrs:{"bs-datepicker":{attribute:"bs-datepicker"}},validators:{past:{expression:function(e,t,o){var a=t||e;if(!_.isUndefined(a)&&a.length>0){var r=a.split("/");if(3==r.length){var n=new Date;r=u({day:r[0],month:r[1]-1,year:r[2]});var l=u({day:n.getDate(),month:n.getMonth(),year:n.getFullYear()});if(l>r)return!0}}return!1},message:'"Date of your offence must be a past date"'}}},{name:"offence_details",key:"offence_details",type:"customTextarea",wrapper:"noteModal",templateOptions:{label:"Details of your offence(s)",placeholder:"Enter the details of your offence(s) as described on your summons notice",required:!0,modal_url:"js/partials/minor-offences.html",form_field_note:"Offences for which you can submit a plea online"}},{name:"message",key:"message",type:"customTextareaWithCounter",wrapper:"note",templateOptions:{label:"Message to the Magistrate",placeholder:"Enter a message to be sent to the magistrate",maxlength:600,prepend:"This might include explaining why you offended, your personal or financial circumstances, and things you would like the magistrate to consider when deciding your sentence ",modal_url:"js/partials/information-for-the-magistrate.html",form_field_note:"show more"},ngModelAttrs:{form_field_note:{attribute:"form-field-note"}}}],e.loadModal=function(e){},y.fields.declaration=[{name:"acknowledgement",key:"acknowledgement",type:"customCheckbox",templateOptions:{no_label:!0,label:"I acknowledge I may plead guilty or not guilty. I acknowledge no police officer or other person told me to plead guilty",required:!0}},{name:"plead_guilty",key:"plead_guilty",type:"customCheckbox",templateOptions:{no_label:!0,label:"I plead guilty to the offence(s) listed in this form. This plea is entered voluntarily of my own free will",required:!0}}],h()}e.$inject=["$scope","$log","$rootScope","$state","$alert","$modal","$http","$interval","$sce"],angular.module("njcOnlinePleas").controller("FormController",e)}(),function(){function e(e,t,o,a){function r(){}var n=this;n.model={},n.login=function(){a.go("viewer")},r()}e.$inject=["$scope","$log","$rootScope","$state"],angular.module("njcOnlinePleas").controller("HomeController",e)}(),function(){function e(e,t){function o(){}o()}e.$inject=["$scope","$log"],angular.module("njcOnlinePleas").controller("YesNoModalController",e)}(),function(){angular.module("njcOnlinePleas").directive("formSteps",["$log",function(e){return{restrict:"EA",replace:!0,templateUrl:"js/partials/form-steps.directive.html",scope:{steps:"=",current:"="},link:function(e,t,o){}}}])}(),function(){angular.module("njcOnlinePleas").directive("formlyErrorSummary",["$log",function(e){return{scope:{},bindToController:{form:"=",fields:"="},templateUrl:"js/partials/formly-error-summary.directive.html",controllerAs:"vm",controller:function(){function e(e){return Object.keys(e.formControl.$error).map(function(t){return e.data.getValidationMessage(t)}).join(", ")}var t=this;t.getErrorAsList=e}}}])}(),function(){angular.module("njcOnlinePleas").directive("rating",["$log",function(e){return{restrict:"EA",replace:!0,templateUrl:"js/partials/rating.directive.html",scope:{},controllerAs:"vm",controller:["$scope","$log","RatingService",function(e,t,o){var a=this;a.submitted=!1,a.model={},a.rating_options=[{label:1,value:1,value_text:"Very difficult"},{label:2,value:2},{label:3,value:3},{label:4,value:4},{label:5,value:5},{label:6,value:6},{label:7,value:7,value_text:"Very easy"}],a.fields=[{type:"customRatingRadio",key:"rating",templateOptions:{label:"Overall, how difficult or easy did you find this task?",labelProp:"label",valueProp:"value",required:!0,options:a.rating_options}},{type:"textarea",key:"comments",templateOptions:{label:"Comments",required:!1}}],a.submit=function(){o.create(a.model).then(function(e){a.submitted=!0},function(e){})}}],link:function(e,t,o){}}}])}(),function(){function e(e,t){return{create:function(e){return t.post("ratings",e)}}}e.$inject=["$log","$http"],angular.module("njcOnlinePleas").service("RatingService",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
